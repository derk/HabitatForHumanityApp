//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angular:angular-material/bower_components/angular-material/angular-material.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * Angular Material Design                                                                                             // 2
 * https://github.com/angular/material                                                                                 // 3
 * @license MIT                                                                                                        // 4
 * v0.9.7                                                                                                              // 5
 */                                                                                                                    // 6
(function( window, angular, undefined ){                                                                               // 7
"use strict";                                                                                                          // 8
                                                                                                                       // 9
(function(){                                                                                                           // 10
"use strict";                                                                                                          // 11
                                                                                                                       // 12
angular.module('ngMaterial', ["ng","ngAnimate","ngAria","material.core","material.core.gestures","material.core.theming.palette","material.core.theming","material.components.autocomplete","material.components.backdrop","material.components.bottomSheet","material.components.button","material.components.card","material.components.checkbox","material.components.chips","material.components.content","material.components.dialog","material.components.divider","material.components.gridList","material.components.icon","material.components.input","material.components.list","material.components.progressCircular","material.components.progressLinear","material.components.radioButton","material.components.select","material.components.sidenav","material.components.slider","material.components.sticky","material.components.subheader","material.components.swipe","material.components.switch","material.components.toast","material.components.tabs","material.components.toolbar","material.components.tooltip","material.components.whiteframe"]);
})();                                                                                                                  // 14
(function(){                                                                                                           // 15
"use strict";                                                                                                          // 16
                                                                                                                       // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * Initialization function that validates environment                                                                  // 20
 * requirements.                                                                                                       // 21
 */                                                                                                                    // 22
angular                                                                                                                // 23
  .module('material.core', [ 'material.core.gestures', 'material.core.theming' ])                                      // 24
  .config( MdCoreConfigure );                                                                                          // 25
                                                                                                                       // 26
                                                                                                                       // 27
function MdCoreConfigure($provide, $mdThemingProvider) {                                                               // 28
                                                                                                                       // 29
  $provide.decorator('$$rAF', ["$delegate", rAFDecorator]);                                                            // 30
                                                                                                                       // 31
  $mdThemingProvider.theme('default')                                                                                  // 32
    .primaryPalette('indigo')                                                                                          // 33
    .accentPalette('pink')                                                                                             // 34
    .warnPalette('red')                                                                                                // 35
    .backgroundPalette('grey');                                                                                        // 36
}                                                                                                                      // 37
MdCoreConfigure.$inject = ["$provide", "$mdThemingProvider"];                                                          // 38
                                                                                                                       // 39
function rAFDecorator( $delegate ) {                                                                                   // 40
  /**                                                                                                                  // 41
   * Use this to throttle events that come in often.                                                                   // 42
   * The throttled function will always use the *last* invocation before the                                           // 43
   * coming frame.                                                                                                     // 44
   *                                                                                                                   // 45
   * For example, window resize events that fire many times a second:                                                  // 46
   * If we set to use an raf-throttled callback on window resize, then                                                 // 47
   * our callback will only be fired once per frame, with the last resize                                              // 48
   * event that happened before that frame.                                                                            // 49
   *                                                                                                                   // 50
   * @param {function} callback function to debounce                                                                   // 51
   */                                                                                                                  // 52
  $delegate.throttle = function(cb) {                                                                                  // 53
    var queueArgs, alreadyQueued, queueCb, context;                                                                    // 54
    return function debounced() {                                                                                      // 55
      queueArgs = arguments;                                                                                           // 56
      context = this;                                                                                                  // 57
      queueCb = cb;                                                                                                    // 58
      if (!alreadyQueued) {                                                                                            // 59
        alreadyQueued = true;                                                                                          // 60
        $delegate(function() {                                                                                         // 61
          queueCb.apply(context, queueArgs);                                                                           // 62
          alreadyQueued = false;                                                                                       // 63
        });                                                                                                            // 64
      }                                                                                                                // 65
    };                                                                                                                 // 66
  };                                                                                                                   // 67
  return $delegate;                                                                                                    // 68
}                                                                                                                      // 69
                                                                                                                       // 70
})();                                                                                                                  // 71
(function(){                                                                                                           // 72
"use strict";                                                                                                          // 73
                                                                                                                       // 74
angular.module('material.core')                                                                                        // 75
.factory('$mdConstant', MdConstantFactory);                                                                            // 76
                                                                                                                       // 77
function MdConstantFactory($$rAF, $sniffer) {                                                                          // 78
                                                                                                                       // 79
  var webkit = /webkit/i.test($sniffer.vendorPrefix);                                                                  // 80
  function vendorProperty(name) {                                                                                      // 81
    return webkit ?  ('webkit' + name.charAt(0).toUpperCase() + name.substring(1)) : name;                             // 82
  }                                                                                                                    // 83
                                                                                                                       // 84
  return {                                                                                                             // 85
    KEY_CODE: {                                                                                                        // 86
      ENTER: 13,                                                                                                       // 87
      ESCAPE: 27,                                                                                                      // 88
      SPACE: 32,                                                                                                       // 89
      LEFT_ARROW : 37,                                                                                                 // 90
      UP_ARROW : 38,                                                                                                   // 91
      RIGHT_ARROW : 39,                                                                                                // 92
      DOWN_ARROW : 40,                                                                                                 // 93
      TAB : 9,                                                                                                         // 94
      BACKSPACE: 8,                                                                                                    // 95
      DELETE: 46                                                                                                       // 96
    },                                                                                                                 // 97
    CSS: {                                                                                                             // 98
      /* Constants */                                                                                                  // 99
      TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),                                         // 100
      ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),                                            // 101
                                                                                                                       // 102
      TRANSFORM: vendorProperty('transform'),                                                                          // 103
      TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),                                                             // 104
      TRANSITION: vendorProperty('transition'),                                                                        // 105
      TRANSITION_DURATION: vendorProperty('transitionDuration'),                                                       // 106
      ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),                                                      // 107
      ANIMATION_DURATION: vendorProperty('animationDuration'),                                                         // 108
      ANIMATION_NAME: vendorProperty('animationName'),                                                                 // 109
      ANIMATION_TIMING: vendorProperty('animationTimingFunction'),                                                     // 110
      ANIMATION_DIRECTION: vendorProperty('animationDirection')                                                        // 111
    },                                                                                                                 // 112
    MEDIA: {                                                                                                           // 113
      'sm': '(max-width: 600px)',                                                                                      // 114
      'gt-sm': '(min-width: 600px)',                                                                                   // 115
      'md': '(min-width: 600px) and (max-width: 960px)',                                                               // 116
      'gt-md': '(min-width: 960px)',                                                                                   // 117
      'lg': '(min-width: 960px) and (max-width: 1200px)',                                                              // 118
      'gt-lg': '(min-width: 1200px)'                                                                                   // 119
    },                                                                                                                 // 120
    MEDIA_PRIORITY: [                                                                                                  // 121
      'gt-lg',                                                                                                         // 122
      'lg',                                                                                                            // 123
      'gt-md',                                                                                                         // 124
      'md',                                                                                                            // 125
      'gt-sm',                                                                                                         // 126
      'sm'                                                                                                             // 127
    ]                                                                                                                  // 128
  };                                                                                                                   // 129
}                                                                                                                      // 130
MdConstantFactory.$inject = ["$$rAF", "$sniffer"];                                                                     // 131
                                                                                                                       // 132
})();                                                                                                                  // 133
(function(){                                                                                                           // 134
"use strict";                                                                                                          // 135
                                                                                                                       // 136
  angular                                                                                                              // 137
    .module('material.core')                                                                                           // 138
    .config( ["$provide", function($provide){                                                                          // 139
       $provide.decorator('$mdUtil', ['$delegate', function ($delegate){                                               // 140
           /**                                                                                                         // 141
            * Inject the iterator facade to easily support iteration and accessors                                     // 142
            * @see iterator below                                                                                      // 143
            */                                                                                                         // 144
           $delegate.iterator = MdIterator;                                                                            // 145
                                                                                                                       // 146
           return $delegate;                                                                                           // 147
         }                                                                                                             // 148
       ]);                                                                                                             // 149
     }]);                                                                                                              // 150
                                                                                                                       // 151
  /**                                                                                                                  // 152
   * iterator is a list facade to easily support iteration and accessors                                               // 153
   *                                                                                                                   // 154
   * @param items Array list which this iterator will enumerate                                                        // 155
   * @param reloop Boolean enables iterator to consider the list as an endless reloop                                  // 156
   */                                                                                                                  // 157
  function MdIterator(items, reloop) {                                                                                 // 158
    var trueFn = function() { return true; };                                                                          // 159
                                                                                                                       // 160
    if (items && !angular.isArray(items)) {                                                                            // 161
      items = Array.prototype.slice.call(items);                                                                       // 162
    }                                                                                                                  // 163
                                                                                                                       // 164
    reloop = !!reloop;                                                                                                 // 165
    var _items = items || [ ];                                                                                         // 166
                                                                                                                       // 167
    // Published API                                                                                                   // 168
    return {                                                                                                           // 169
      items: getItems,                                                                                                 // 170
      count: count,                                                                                                    // 171
                                                                                                                       // 172
      inRange: inRange,                                                                                                // 173
      contains: contains,                                                                                              // 174
      indexOf: indexOf,                                                                                                // 175
      itemAt: itemAt,                                                                                                  // 176
                                                                                                                       // 177
      findBy: findBy,                                                                                                  // 178
                                                                                                                       // 179
      add: add,                                                                                                        // 180
      remove: remove,                                                                                                  // 181
                                                                                                                       // 182
      first: first,                                                                                                    // 183
      last: last,                                                                                                      // 184
      next: angular.bind(null, findSubsequentItem, false),                                                             // 185
      previous: angular.bind(null, findSubsequentItem, true),                                                          // 186
                                                                                                                       // 187
      hasPrevious: hasPrevious,                                                                                        // 188
      hasNext: hasNext                                                                                                 // 189
                                                                                                                       // 190
    };                                                                                                                 // 191
                                                                                                                       // 192
    /**                                                                                                                // 193
     * Publish copy of the enumerable set                                                                              // 194
     * @returns {Array|*}                                                                                              // 195
     */                                                                                                                // 196
    function getItems() {                                                                                              // 197
      return [].concat(_items);                                                                                        // 198
    }                                                                                                                  // 199
                                                                                                                       // 200
    /**                                                                                                                // 201
     * Determine length of the list                                                                                    // 202
     * @returns {Array.length|*|number}                                                                                // 203
     */                                                                                                                // 204
    function count() {                                                                                                 // 205
      return _items.length;                                                                                            // 206
    }                                                                                                                  // 207
                                                                                                                       // 208
    /**                                                                                                                // 209
     * Is the index specified valid                                                                                    // 210
     * @param index                                                                                                    // 211
     * @returns {Array.length|*|number|boolean}                                                                        // 212
     */                                                                                                                // 213
    function inRange(index) {                                                                                          // 214
      return _items.length && ( index > -1 ) && (index < _items.length );                                              // 215
    }                                                                                                                  // 216
                                                                                                                       // 217
    /**                                                                                                                // 218
     * Can the iterator proceed to the next item in the list; relative to                                              // 219
     * the specified item.                                                                                             // 220
     *                                                                                                                 // 221
     * @param item                                                                                                     // 222
     * @returns {Array.length|*|number|boolean}                                                                        // 223
     */                                                                                                                // 224
    function hasNext(item) {                                                                                           // 225
      return item ? inRange(indexOf(item) + 1) : false;                                                                // 226
    }                                                                                                                  // 227
                                                                                                                       // 228
    /**                                                                                                                // 229
     * Can the iterator proceed to the previous item in the list; relative to                                          // 230
     * the specified item.                                                                                             // 231
     *                                                                                                                 // 232
     * @param item                                                                                                     // 233
     * @returns {Array.length|*|number|boolean}                                                                        // 234
     */                                                                                                                // 235
    function hasPrevious(item) {                                                                                       // 236
      return item ? inRange(indexOf(item) - 1) : false;                                                                // 237
    }                                                                                                                  // 238
                                                                                                                       // 239
    /**                                                                                                                // 240
     * Get item at specified index/position                                                                            // 241
     * @param index                                                                                                    // 242
     * @returns {*}                                                                                                    // 243
     */                                                                                                                // 244
    function itemAt(index) {                                                                                           // 245
      return inRange(index) ? _items[index] : null;                                                                    // 246
    }                                                                                                                  // 247
                                                                                                                       // 248
    /**                                                                                                                // 249
     * Find all elements matching the key/value pair                                                                   // 250
     * otherwise return null                                                                                           // 251
     *                                                                                                                 // 252
     * @param val                                                                                                      // 253
     * @param key                                                                                                      // 254
     *                                                                                                                 // 255
     * @return array                                                                                                   // 256
     */                                                                                                                // 257
    function findBy(key, val) {                                                                                        // 258
      return _items.filter(function(item) {                                                                            // 259
        return item[key] === val;                                                                                      // 260
      });                                                                                                              // 261
    }                                                                                                                  // 262
                                                                                                                       // 263
    /**                                                                                                                // 264
     * Add item to list                                                                                                // 265
     * @param item                                                                                                     // 266
     * @param index                                                                                                    // 267
     * @returns {*}                                                                                                    // 268
     */                                                                                                                // 269
    function add(item, index) {                                                                                        // 270
      if ( !item ) return -1;                                                                                          // 271
                                                                                                                       // 272
      if (!angular.isNumber(index)) {                                                                                  // 273
        index = _items.length;                                                                                         // 274
      }                                                                                                                // 275
                                                                                                                       // 276
      _items.splice(index, 0, item);                                                                                   // 277
                                                                                                                       // 278
      return indexOf(item);                                                                                            // 279
    }                                                                                                                  // 280
                                                                                                                       // 281
    /**                                                                                                                // 282
     * Remove item from list...                                                                                        // 283
     * @param item                                                                                                     // 284
     */                                                                                                                // 285
    function remove(item) {                                                                                            // 286
      if ( contains(item) ){                                                                                           // 287
        _items.splice(indexOf(item), 1);                                                                               // 288
      }                                                                                                                // 289
    }                                                                                                                  // 290
                                                                                                                       // 291
    /**                                                                                                                // 292
     * Get the zero-based index of the target item                                                                     // 293
     * @param item                                                                                                     // 294
     * @returns {*}                                                                                                    // 295
     */                                                                                                                // 296
    function indexOf(item) {                                                                                           // 297
      return _items.indexOf(item);                                                                                     // 298
    }                                                                                                                  // 299
                                                                                                                       // 300
    /**                                                                                                                // 301
     * Boolean existence check                                                                                         // 302
     * @param item                                                                                                     // 303
     * @returns {boolean}                                                                                              // 304
     */                                                                                                                // 305
    function contains(item) {                                                                                          // 306
      return item && (indexOf(item) > -1);                                                                             // 307
    }                                                                                                                  // 308
                                                                                                                       // 309
    /**                                                                                                                // 310
     * Return first item in the list                                                                                   // 311
     * @returns {*}                                                                                                    // 312
     */                                                                                                                // 313
    function first() {                                                                                                 // 314
      return _items.length ? _items[0] : null;                                                                         // 315
    }                                                                                                                  // 316
                                                                                                                       // 317
    /**                                                                                                                // 318
     * Return last item in the list...                                                                                 // 319
     * @returns {*}                                                                                                    // 320
     */                                                                                                                // 321
    function last() {                                                                                                  // 322
      return _items.length ? _items[_items.length - 1] : null;                                                         // 323
    }                                                                                                                  // 324
                                                                                                                       // 325
    /**                                                                                                                // 326
     * Find the next item. If reloop is true and at the end of the list, it will go back to the                        // 327
     * first item. If given, the `validate` callback will be used to determine whether the next item                   // 328
     * is valid. If not valid, it will try to find the next item again.                                                // 329
     *                                                                                                                 // 330
     * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)                            // 331
     * @param {*} item The item whose subsequent item we are looking for                                               // 332
     * @param {Function=} validate The `validate` function                                                             // 333
     * @param {integer=} limit The recursion limit                                                                     // 334
     *                                                                                                                 // 335
     * @returns {*} The subsequent item or null                                                                        // 336
     */                                                                                                                // 337
    function findSubsequentItem(backwards, item, validate, limit) {                                                    // 338
      validate = validate || trueFn;                                                                                   // 339
                                                                                                                       // 340
      var curIndex = indexOf(item);                                                                                    // 341
      while (true) {                                                                                                   // 342
        if (!inRange(curIndex)) return null;                                                                           // 343
                                                                                                                       // 344
        var nextIndex = curIndex + (backwards ? -1 : 1);                                                               // 345
        var foundItem = null;                                                                                          // 346
        if (inRange(nextIndex)) {                                                                                      // 347
          foundItem = _items[nextIndex];                                                                               // 348
        } else if (reloop) {                                                                                           // 349
          foundItem = backwards ? last() : first();                                                                    // 350
          nextIndex = indexOf(foundItem);                                                                              // 351
        }                                                                                                              // 352
                                                                                                                       // 353
        if ((foundItem === null) || (nextIndex === limit)) return null;                                                // 354
        if (validate(foundItem)) return foundItem;                                                                     // 355
                                                                                                                       // 356
        if (angular.isUndefined(limit)) limit = nextIndex;                                                             // 357
                                                                                                                       // 358
        curIndex = nextIndex;                                                                                          // 359
      }                                                                                                                // 360
    }                                                                                                                  // 361
  }                                                                                                                    // 362
                                                                                                                       // 363
                                                                                                                       // 364
})();                                                                                                                  // 365
(function(){                                                                                                           // 366
"use strict";                                                                                                          // 367
                                                                                                                       // 368
angular.module('material.core')                                                                                        // 369
.factory('$mdMedia', mdMediaFactory);                                                                                  // 370
                                                                                                                       // 371
/**                                                                                                                    // 372
 * @ngdoc service                                                                                                      // 373
 * @name $mdMedia                                                                                                      // 374
 * @module material.core                                                                                               // 375
 *                                                                                                                     // 376
 * @description                                                                                                        // 377
 * `$mdMedia` is used to evaluate whether a given media query is true or false given the                               // 378
 * current device's screen / window size. The media query will be re-evaluated on resize, allowing                     // 379
 * you to register a watch.                                                                                            // 380
 *                                                                                                                     // 381
 * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints.                     // 382
 *  (`sm`, `gt-sm`, `md`, `gt-md`, `lg`, `gt-lg`).                                                                     // 383
 *                                                                                                                     // 384
 * @returns {boolean} a boolean representing whether or not the given media query is true or false.                    // 385
 *                                                                                                                     // 386
 * @usage                                                                                                              // 387
 * <hljs lang="js">                                                                                                    // 388
 * app.controller('MyController', function($mdMedia, $scope) {                                                         // 389
 *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {                                              // 390
 *     $scope.bigScreen = big;                                                                                         // 391
 *   });                                                                                                               // 392
 *                                                                                                                     // 393
 *   $scope.screenIsSmall = $mdMedia('sm');                                                                            // 394
 *   $scope.customQuery = $mdMedia('(min-width: 1234px)');                                                             // 395
 *   $scope.anotherCustom = $mdMedia('max-width: 300px');                                                              // 396
 * });                                                                                                                 // 397
 * </hljs>                                                                                                             // 398
 */                                                                                                                    // 399
                                                                                                                       // 400
function mdMediaFactory($mdConstant, $rootScope, $window) {                                                            // 401
  var queries = {};                                                                                                    // 402
  var mqls = {};                                                                                                       // 403
  var results = {};                                                                                                    // 404
  var normalizeCache = {};                                                                                             // 405
                                                                                                                       // 406
  $mdMedia.getResponsiveAttribute = getResponsiveAttribute;                                                            // 407
  $mdMedia.getQuery = getQuery;                                                                                        // 408
  $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;                                                      // 409
                                                                                                                       // 410
  return $mdMedia;                                                                                                     // 411
                                                                                                                       // 412
  function $mdMedia(query) {                                                                                           // 413
    var validated = queries[query];                                                                                    // 414
    if (angular.isUndefined(validated)) {                                                                              // 415
      validated = queries[query] = validate(query);                                                                    // 416
    }                                                                                                                  // 417
                                                                                                                       // 418
    var result = results[validated];                                                                                   // 419
    if (angular.isUndefined(result)) {                                                                                 // 420
      result = add(validated);                                                                                         // 421
    }                                                                                                                  // 422
                                                                                                                       // 423
    return result;                                                                                                     // 424
  }                                                                                                                    // 425
                                                                                                                       // 426
  function validate(query) {                                                                                           // 427
    return $mdConstant.MEDIA[query] ||                                                                                 // 428
           ((query.charAt(0) !== '(') ? ('(' + query + ')') : query);                                                  // 429
  }                                                                                                                    // 430
                                                                                                                       // 431
  function add(query) {                                                                                                // 432
    var result = mqls[query] = $window.matchMedia(query);                                                              // 433
    result.addListener(onQueryChange);                                                                                 // 434
    return (results[result.media] = !!result.matches);                                                                 // 435
  }                                                                                                                    // 436
                                                                                                                       // 437
  function onQueryChange(query) {                                                                                      // 438
    $rootScope.$evalAsync(function() {                                                                                 // 439
      results[query.media] = !!query.matches;                                                                          // 440
    });                                                                                                                // 441
  }                                                                                                                    // 442
                                                                                                                       // 443
  function getQuery(name) {                                                                                            // 444
    return mqls[name];                                                                                                 // 445
  }                                                                                                                    // 446
                                                                                                                       // 447
  function getResponsiveAttribute(attrs, attrName) {                                                                   // 448
    for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {                                                      // 449
      var mediaName = $mdConstant.MEDIA_PRIORITY[i];                                                                   // 450
      if (!mqls[queries[mediaName]].matches) {                                                                         // 451
        continue;                                                                                                      // 452
      }                                                                                                                // 453
                                                                                                                       // 454
      var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);                                       // 455
      if (attrs[normalizedName]) {                                                                                     // 456
        return attrs[normalizedName];                                                                                  // 457
      }                                                                                                                // 458
    }                                                                                                                  // 459
                                                                                                                       // 460
    // fallback on unprefixed                                                                                          // 461
    return attrs[getNormalizedName(attrs, attrName)];                                                                  // 462
  }                                                                                                                    // 463
                                                                                                                       // 464
  function watchResponsiveAttributes(attrNames, attrs, watchFn) {                                                      // 465
    var unwatchFns = [];                                                                                               // 466
    attrNames.forEach(function(attrName) {                                                                             // 467
      var normalizedName = getNormalizedName(attrs, attrName);                                                         // 468
      if (attrs[normalizedName]) {                                                                                     // 469
        unwatchFns.push(                                                                                               // 470
            attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));                                      // 471
      }                                                                                                                // 472
                                                                                                                       // 473
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 474
        normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);                                         // 475
        if (!attrs[normalizedName]) {                                                                                  // 476
          return;                                                                                                      // 477
        }                                                                                                              // 478
                                                                                                                       // 479
        unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));                     // 480
      }                                                                                                                // 481
    });                                                                                                                // 482
                                                                                                                       // 483
    return function unwatch() {                                                                                        // 484
      unwatchFns.forEach(function(fn) { fn(); })                                                                       // 485
    };                                                                                                                 // 486
  }                                                                                                                    // 487
                                                                                                                       // 488
  // Improves performance dramatically                                                                                 // 489
  function getNormalizedName(attrs, attrName) {                                                                        // 490
    return normalizeCache[attrName] ||                                                                                 // 491
        (normalizeCache[attrName] = attrs.$normalize(attrName));                                                       // 492
  }                                                                                                                    // 493
}                                                                                                                      // 494
mdMediaFactory.$inject = ["$mdConstant", "$rootScope", "$window"];                                                     // 495
                                                                                                                       // 496
})();                                                                                                                  // 497
(function(){                                                                                                           // 498
"use strict";                                                                                                          // 499
                                                                                                                       // 500
/*                                                                                                                     // 501
 * This var has to be outside the angular factory, otherwise when                                                      // 502
 * there are multiple material apps on the same page, each app                                                         // 503
 * will create its own instance of this array and the app's IDs                                                        // 504
 * will not be unique.                                                                                                 // 505
 */                                                                                                                    // 506
var nextUniqueId = ['0','0','0'];                                                                                      // 507
                                                                                                                       // 508
angular.module('material.core')                                                                                        // 509
.factory('$mdUtil', ["$cacheFactory", "$document", "$timeout", "$q", "$window", "$mdConstant", function($cacheFactory, $document, $timeout, $q, $window, $mdConstant) {
  var Util;                                                                                                            // 511
                                                                                                                       // 512
  function getNode(el) {                                                                                               // 513
    return el[0] || el;                                                                                                // 514
  }                                                                                                                    // 515
                                                                                                                       // 516
  return Util = {                                                                                                      // 517
    now: window.performance ?                                                                                          // 518
      angular.bind(window.performance, window.performance.now) :                                                       // 519
      Date.now,                                                                                                        // 520
                                                                                                                       // 521
    clientRect: function(element, offsetParent, isOffsetRect) {                                                        // 522
      var node = getNode(element);                                                                                     // 523
      offsetParent = getNode(offsetParent || node.offsetParent || document.body);                                      // 524
      var nodeRect = node.getBoundingClientRect();                                                                     // 525
                                                                                                                       // 526
      // The user can ask for an offsetRect: a rect relative to the offsetParent,                                      // 527
      // or a clientRect: a rect relative to the page                                                                  // 528
      var offsetRect = isOffsetRect ?                                                                                  // 529
        offsetParent.getBoundingClientRect() :                                                                         // 530
        { left: 0, top: 0, width: 0, height: 0 };                                                                      // 531
      return {                                                                                                         // 532
        left: nodeRect.left - offsetRect.left,                                                                         // 533
        top: nodeRect.top - offsetRect.top,                                                                            // 534
        width: nodeRect.width,                                                                                         // 535
        height: nodeRect.height                                                                                        // 536
      };                                                                                                               // 537
    },                                                                                                                 // 538
    offsetRect: function(element, offsetParent) {                                                                      // 539
      return Util.clientRect(element, offsetParent, true);                                                             // 540
    },                                                                                                                 // 541
    // Disables scroll around the passed element. Goes up the DOM to find a                                            // 542
    // disableTarget (a md-content that is scrolling, or the body as a fallback)                                       // 543
    // and uses CSS/JS to prevent it from scrolling                                                                    // 544
    disableScrollAround: function(element) {                                                                           // 545
      element = element instanceof angular.element ? element[0] : element;                                             // 546
      var parentEl = element;                                                                                          // 547
      var disableTarget;                                                                                               // 548
                                                                                                                       // 549
      // Find the highest level scrolling md-content                                                                   // 550
      while (parentEl = this.getClosest(parentEl, 'MD-CONTENT', true)) {                                               // 551
        if (isScrolling(parentEl)) {                                                                                   // 552
          disableTarget = angular.element(parentEl)[0];                                                                // 553
        }                                                                                                              // 554
      }                                                                                                                // 555
                                                                                                                       // 556
      // Default to the body if no scrolling md-content                                                                // 557
      if (!disableTarget) {                                                                                            // 558
        disableTarget = $document[0].body;                                                                             // 559
        if (!isScrolling(disableTarget)) return angular.noop;                                                          // 560
      }                                                                                                                // 561
                                                                                                                       // 562
      if (disableTarget.nodeName == 'BODY') {                                                                          // 563
        return disableBodyScroll();                                                                                    // 564
      } else {                                                                                                         // 565
        return disableElementScroll();                                                                                 // 566
      }                                                                                                                // 567
                                                                                                                       // 568
      // Creates a virtual scrolling mask to absorb touchmove, keyboard, scrollbar clicking, and wheel events          // 569
      function disableElementScroll() {                                                                                // 570
        var scrollMask = angular.element('<div class="md-scroll-mask"><div class="md-scroll-mask-bar"></div></div>');  // 571
        var computedStyle = $window.getComputedStyle(disableTarget);                                                   // 572
        var disableRect = disableTarget.getBoundingClientRect();                                                       // 573
        var scrollWidth = disableRect.width - disableTarget.clientWidth;                                               // 574
        applyStyles(scrollMask[0], {                                                                                   // 575
          zIndex: computedStyle.zIndex == 'auto' ? 2 : computedStyle.zIndex + 1,                                       // 576
          width: disableRect.width + 'px',                                                                             // 577
          height: disableRect.height + 'px',                                                                           // 578
          top: disableRect.top + 'px',                                                                                 // 579
          left: disableRect.left + 'px'                                                                                // 580
        });                                                                                                            // 581
        scrollMask[0].firstElementChild.style.width = scrollWidth + 'px';                                              // 582
        $document[0].body.appendChild(scrollMask[0]);                                                                  // 583
                                                                                                                       // 584
        scrollMask.on('wheel', preventDefault);                                                                        // 585
        scrollMask.on('touchmove', preventDefault);                                                                    // 586
        $document.on('keydown', disableKeyNav);                                                                        // 587
                                                                                                                       // 588
        return function restoreScroll() {                                                                              // 589
          scrollMask.off('wheel');                                                                                     // 590
          scrollMask.off('touchmove');                                                                                 // 591
          scrollMask[0].parentNode.removeChild(scrollMask[0]);                                                         // 592
          $document.off('keydown', disableKeyNav);                                                                     // 593
        };                                                                                                             // 594
                                                                                                                       // 595
        // Prevent keypresses from elements inside the disableTarget                                                   // 596
        // used to stop the keypresses that could cause the page to scroll                                             // 597
        // (arrow keys, spacebar, tab, etc).                                                                           // 598
        function disableKeyNav(e) {                                                                                    // 599
          if (disableTarget.contains(e.target)) {                                                                      // 600
            e.preventDefault();                                                                                        // 601
            e.stopImmediatePropagation();                                                                              // 602
          }                                                                                                            // 603
        }                                                                                                              // 604
                                                                                                                       // 605
        function preventDefault(e) {                                                                                   // 606
          e.preventDefault();                                                                                          // 607
        }                                                                                                              // 608
      }                                                                                                                // 609
                                                                                                                       // 610
      // Converts the disableTarget (body) to a position fixed block and translate it to the propper scroll position   // 611
      function disableBodyScroll() {                                                                                   // 612
        var restoreStyle = disableTarget.getAttribute('style') || '';                                                  // 613
        var scrollOffset = disableTarget.scrollTop;                                                                    // 614
                                                                                                                       // 615
        applyStyles(disableTarget, {                                                                                   // 616
          position: 'fixed',                                                                                           // 617
          width: '100%',                                                                                               // 618
          overflowY: 'scroll',                                                                                         // 619
          top: -scrollOffset + 'px'                                                                                    // 620
        });                                                                                                            // 621
                                                                                                                       // 622
        return function restoreScroll() {                                                                              // 623
          disableTarget.setAttribute('style', restoreStyle);                                                           // 624
          disableTarget.scrollTop = scrollOffset;                                                                      // 625
        };                                                                                                             // 626
      }                                                                                                                // 627
                                                                                                                       // 628
      function applyStyles (el, styles) {                                                                              // 629
        for (var key in styles) {                                                                                      // 630
          el.style[key] = styles[key];                                                                                 // 631
        }                                                                                                              // 632
      }                                                                                                                // 633
                                                                                                                       // 634
      function isScrolling(el) {                                                                                       // 635
        if (el instanceof angular.element) el = el[0];                                                                 // 636
        return el.scrollHeight > el.offsetHeight;                                                                      // 637
      }                                                                                                                // 638
    },                                                                                                                 // 639
                                                                                                                       // 640
    floatingScrollbars: function() {                                                                                   // 641
      if (this.floatingScrollbars.cached === undefined) {                                                              // 642
        var tempNode = angular.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60;"></div></div>');
        $document[0].body.appendChild(tempNode[0]);                                                                    // 644
        this.floatingScrollbars.cached = (tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth);           // 645
        tempNode.remove();                                                                                             // 646
      }                                                                                                                // 647
      return this.floatingScrollbars.cached;                                                                           // 648
    },                                                                                                                 // 649
                                                                                                                       // 650
    // Mobile safari only allows you to set focus in click event listeners...                                          // 651
    forceFocus: function(element) {                                                                                    // 652
      var node = element[0] || element;                                                                                // 653
                                                                                                                       // 654
      document.addEventListener('click', function focusOnClick(ev) {                                                   // 655
        if (ev.target === node && ev.$focus) {                                                                         // 656
          node.focus();                                                                                                // 657
          ev.stopImmediatePropagation();                                                                               // 658
          ev.preventDefault();                                                                                         // 659
          node.removeEventListener('click', focusOnClick);                                                             // 660
        }                                                                                                              // 661
      }, true);                                                                                                        // 662
                                                                                                                       // 663
      var newEvent = document.createEvent('MouseEvents');                                                              // 664
      newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0,                                            // 665
                       false, false, false, false, 0, null);                                                           // 666
      newEvent.$material = true;                                                                                       // 667
      newEvent.$focus = true;                                                                                          // 668
      node.dispatchEvent(newEvent);                                                                                    // 669
    },                                                                                                                 // 670
                                                                                                                       // 671
    transitionEndPromise: function(element, opts) {                                                                    // 672
      opts = opts || {};                                                                                               // 673
      var deferred = $q.defer();                                                                                       // 674
      element.on($mdConstant.CSS.TRANSITIONEND, finished);                                                             // 675
      function finished(ev) {                                                                                          // 676
        // Make sure this transitionend didn't bubble up from a child                                                  // 677
        if (!ev || ev.target === element[0]) {                                                                         // 678
          element.off($mdConstant.CSS.TRANSITIONEND, finished);                                                        // 679
          deferred.resolve();                                                                                          // 680
        }                                                                                                              // 681
      }                                                                                                                // 682
      if (opts.timeout) $timeout(finished, opts.timeout);                                                              // 683
      return deferred.promise;                                                                                         // 684
    },                                                                                                                 // 685
                                                                                                                       // 686
    fakeNgModel: function() {                                                                                          // 687
      return {                                                                                                         // 688
        $fake: true,                                                                                                   // 689
        $setTouched: angular.noop,                                                                                     // 690
        $setViewValue: function(value) {                                                                               // 691
          this.$viewValue = value;                                                                                     // 692
          this.$render(value);                                                                                         // 693
          this.$viewChangeListeners.forEach(function(cb) { cb(); });                                                   // 694
        },                                                                                                             // 695
        $isEmpty: function(value) {                                                                                    // 696
          return ('' + value).length === 0;                                                                            // 697
        },                                                                                                             // 698
        $parsers: [],                                                                                                  // 699
        $formatters: [],                                                                                               // 700
        $viewChangeListeners: [],                                                                                      // 701
        $render: angular.noop                                                                                          // 702
      };                                                                                                               // 703
    },                                                                                                                 // 704
                                                                                                                       // 705
    // Returns a function, that, as long as it continues to be invoked, will not                                       // 706
    // be triggered. The function will be called after it stops being called for                                       // 707
    // N milliseconds.                                                                                                 // 708
    // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs                 // 709
    // @param invokeApply should the $timeout trigger $digest() dirty checking                                         // 710
    debounce: function (func, wait, scope, invokeApply) {                                                              // 711
      var timer;                                                                                                       // 712
                                                                                                                       // 713
      return function debounced() {                                                                                    // 714
        var context = scope,                                                                                           // 715
          args = Array.prototype.slice.call(arguments);                                                                // 716
                                                                                                                       // 717
        $timeout.cancel(timer);                                                                                        // 718
        timer = $timeout(function() {                                                                                  // 719
                                                                                                                       // 720
          timer = undefined;                                                                                           // 721
          func.apply(context, args);                                                                                   // 722
                                                                                                                       // 723
        }, wait || 10, invokeApply );                                                                                  // 724
      };                                                                                                               // 725
    },                                                                                                                 // 726
                                                                                                                       // 727
    // Returns a function that can only be triggered every `delay` milliseconds.                                       // 728
    // In other words, the function will not be called unless it has been more                                         // 729
    // than `delay` milliseconds since the last call.                                                                  // 730
    throttle: function throttle(func, delay) {                                                                         // 731
      var recent;                                                                                                      // 732
      return function throttled() {                                                                                    // 733
        var context = this;                                                                                            // 734
        var args = arguments;                                                                                          // 735
        var now = Util.now();                                                                                          // 736
                                                                                                                       // 737
        if (!recent || (now - recent > delay)) {                                                                       // 738
          func.apply(context, args);                                                                                   // 739
          recent = now;                                                                                                // 740
        }                                                                                                              // 741
      };                                                                                                               // 742
    },                                                                                                                 // 743
                                                                                                                       // 744
    /**                                                                                                                // 745
     * Measures the number of milliseconds taken to run the provided callback                                          // 746
     * function. Uses a high-precision timer if available.                                                             // 747
     */                                                                                                                // 748
    time: function time(cb) {                                                                                          // 749
      var start = Util.now();                                                                                          // 750
      cb();                                                                                                            // 751
      return Util.now() - start;                                                                                       // 752
    },                                                                                                                 // 753
                                                                                                                       // 754
    /**                                                                                                                // 755
     * nextUid, from angular.js.                                                                                       // 756
     * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric                       // 757
     * characters such as '012ABC'. The reason why we are not using simply a number counter is that                    // 758
     * the number string gets longer over time, and it can also overflow, where as the nextId                          // 759
     * will grow much slower, it is a string, and it will never overflow.                                              // 760
     *                                                                                                                 // 761
     * @returns an unique alpha-numeric string                                                                         // 762
     */                                                                                                                // 763
    nextUid: function() {                                                                                              // 764
      var index = nextUniqueId.length;                                                                                 // 765
      var digit;                                                                                                       // 766
                                                                                                                       // 767
      while (index) {                                                                                                  // 768
        index--;                                                                                                       // 769
        digit = nextUniqueId[index].charCodeAt(0);                                                                     // 770
        if (digit == 57 /*'9'*/) {                                                                                     // 771
          nextUniqueId[index] = 'A';                                                                                   // 772
          return nextUniqueId.join('');                                                                                // 773
        }                                                                                                              // 774
        if (digit == 90  /*'Z'*/) {                                                                                    // 775
          nextUniqueId[index] = '0';                                                                                   // 776
        } else {                                                                                                       // 777
          nextUniqueId[index] = String.fromCharCode(digit + 1);                                                        // 778
          return nextUniqueId.join('');                                                                                // 779
        }                                                                                                              // 780
      }                                                                                                                // 781
      nextUniqueId.unshift('0');                                                                                       // 782
      return nextUniqueId.join('');                                                                                    // 783
    },                                                                                                                 // 784
                                                                                                                       // 785
    // Stop watchers and events from firing on a scope without destroying it,                                          // 786
    // by disconnecting it from its parent and its siblings' linked lists.                                             // 787
    disconnectScope: function disconnectScope(scope) {                                                                 // 788
      if (!scope) return;                                                                                              // 789
                                                                                                                       // 790
      // we can't destroy the root scope or a scope that has been already destroyed                                    // 791
      if (scope.$root === scope) return;                                                                               // 792
      if (scope.$$destroyed ) return;                                                                                  // 793
                                                                                                                       // 794
      var parent = scope.$parent;                                                                                      // 795
      scope.$$disconnected = true;                                                                                     // 796
                                                                                                                       // 797
      // See Scope.$destroy                                                                                            // 798
      if (parent.$$childHead === scope) parent.$$childHead = scope.$$nextSibling;                                      // 799
      if (parent.$$childTail === scope) parent.$$childTail = scope.$$prevSibling;                                      // 800
      if (scope.$$prevSibling) scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;                                // 801
      if (scope.$$nextSibling) scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;                                // 802
                                                                                                                       // 803
      scope.$$nextSibling = scope.$$prevSibling = null;                                                                // 804
                                                                                                                       // 805
    },                                                                                                                 // 806
                                                                                                                       // 807
    // Undo the effects of disconnectScope above.                                                                      // 808
    reconnectScope: function reconnectScope(scope) {                                                                   // 809
      if (!scope) return;                                                                                              // 810
                                                                                                                       // 811
      // we can't disconnect the root node or scope already disconnected                                               // 812
      if (scope.$root === scope) return;                                                                               // 813
      if (!scope.$$disconnected) return;                                                                               // 814
                                                                                                                       // 815
      var child = scope;                                                                                               // 816
                                                                                                                       // 817
      var parent = child.$parent;                                                                                      // 818
      child.$$disconnected = false;                                                                                    // 819
      // See Scope.$new for this logic...                                                                              // 820
      child.$$prevSibling = parent.$$childTail;                                                                        // 821
      if (parent.$$childHead) {                                                                                        // 822
        parent.$$childTail.$$nextSibling = child;                                                                      // 823
        parent.$$childTail = child;                                                                                    // 824
      } else {                                                                                                         // 825
        parent.$$childHead = parent.$$childTail = child;                                                               // 826
      }                                                                                                                // 827
    },                                                                                                                 // 828
                                                                                                                       // 829
    /*                                                                                                                 // 830
     * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName               // 831
     *                                                                                                                 // 832
     * @param el Element to start walking the DOM from                                                                 // 833
     * @param tagName Tag name to find closest to el, such as 'form'                                                   // 834
     */                                                                                                                // 835
    getClosest: function getClosest(el, tagName, onlyParent) {                                                         // 836
      if (el instanceof angular.element) el = el[0];                                                                   // 837
      tagName = tagName.toUpperCase();                                                                                 // 838
      if (onlyParent) el = el.parentNode;                                                                              // 839
      if (!el) return null;                                                                                            // 840
      do {                                                                                                             // 841
        if (el.nodeName === tagName) {                                                                                 // 842
          return el;                                                                                                   // 843
        }                                                                                                              // 844
      } while (el = el.parentNode);                                                                                    // 845
      return null;                                                                                                     // 846
    },                                                                                                                 // 847
                                                                                                                       // 848
    /**                                                                                                                // 849
     * Functional equivalent for $element.filter(‘md-bottom-sheet’)                                                    // 850
     * useful with interimElements where the element and its container are important...                                // 851
     */                                                                                                                // 852
    extractElementByName: function (element, nodeName) {                                                               // 853
      for (var i = 0, len = element.length; i < len; i++) {                                                            // 854
        if (element[i].nodeName.toLowerCase() === nodeName){                                                           // 855
          return angular.element(element[i]);                                                                          // 856
        }                                                                                                              // 857
      }                                                                                                                // 858
      return element;                                                                                                  // 859
    },                                                                                                                 // 860
                                                                                                                       // 861
    /**                                                                                                                // 862
     * Give optional properties with no value a boolean true by default                                                // 863
     */                                                                                                                // 864
    initOptionalProperties: function (scope, attr, defaults ) {                                                        // 865
       defaults = defaults || { };                                                                                     // 866
       angular.forEach(scope.$$isolateBindings, function (binding, key) {                                              // 867
         if (binding.optional && angular.isUndefined(scope[key])) {                                                    // 868
           var hasKey = attr.hasOwnProperty(attr.$normalize(binding.attrName));                                        // 869
                                                                                                                       // 870
           scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : hasKey;                                     // 871
         }                                                                                                             // 872
       });                                                                                                             // 873
    }                                                                                                                  // 874
                                                                                                                       // 875
  };                                                                                                                   // 876
                                                                                                                       // 877
}]);                                                                                                                   // 878
                                                                                                                       // 879
/*                                                                                                                     // 880
 * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.                              // 881
 *                                                                                                                     // 882
 * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.                                  // 883
 *                                                                                                                     // 884
 * TODO(ajoslin): This should be added in a better place later.                                                        // 885
 */                                                                                                                    // 886
                                                                                                                       // 887
angular.element.prototype.focus = angular.element.prototype.focus || function() {                                      // 888
  if (this.length) {                                                                                                   // 889
    this[0].focus();                                                                                                   // 890
  }                                                                                                                    // 891
  return this;                                                                                                         // 892
};                                                                                                                     // 893
angular.element.prototype.blur = angular.element.prototype.blur || function() {                                        // 894
  if (this.length) {                                                                                                   // 895
    this[0].blur();                                                                                                    // 896
  }                                                                                                                    // 897
  return this;                                                                                                         // 898
};                                                                                                                     // 899
                                                                                                                       // 900
})();                                                                                                                  // 901
(function(){                                                                                                           // 902
"use strict";                                                                                                          // 903
                                                                                                                       // 904
                                                                                                                       // 905
angular.module('material.core')                                                                                        // 906
  .service('$mdAria', AriaService);                                                                                    // 907
                                                                                                                       // 908
/*                                                                                                                     // 909
 * @ngInject                                                                                                           // 910
 */                                                                                                                    // 911
function AriaService($$rAF, $log, $window) {                                                                           // 912
                                                                                                                       // 913
  return {                                                                                                             // 914
    expect: expect,                                                                                                    // 915
    expectAsync: expectAsync,                                                                                          // 916
    expectWithText: expectWithText                                                                                     // 917
  };                                                                                                                   // 918
                                                                                                                       // 919
  /**                                                                                                                  // 920
   * Check if expected attribute has been specified on the target element or child                                     // 921
   * @param element                                                                                                    // 922
   * @param attrName                                                                                                   // 923
   * @param {optional} defaultValue What to set the attr to if no value is found                                       // 924
   */                                                                                                                  // 925
  function expect(element, attrName, defaultValue) {                                                                   // 926
    var node = element[0] || element;                                                                                  // 927
                                                                                                                       // 928
    // if node exists and neither it nor its children have the attribute                                               // 929
    if (node &&                                                                                                        // 930
       ((!node.hasAttribute(attrName) ||                                                                               // 931
        node.getAttribute(attrName).length === 0) &&                                                                   // 932
        !childHasAttribute(node, attrName))) {                                                                         // 933
                                                                                                                       // 934
      defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';                                        // 935
      if (defaultValue.length) {                                                                                       // 936
        element.attr(attrName, defaultValue);                                                                          // 937
      } else {                                                                                                         // 938
        $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node);          // 939
      }                                                                                                                // 940
                                                                                                                       // 941
    }                                                                                                                  // 942
  }                                                                                                                    // 943
                                                                                                                       // 944
  function expectAsync(element, attrName, defaultValueGetter) {                                                        // 945
    // Problem: when retrieving the element's contents synchronously to find the label,                                // 946
    // the text may not be defined yet in the case of a binding.                                                       // 947
    // There is a higher chance that a binding will be defined if we wait one frame.                                   // 948
    $$rAF(function() {                                                                                                 // 949
      expect(element, attrName, defaultValueGetter());                                                                 // 950
    });                                                                                                                // 951
  }                                                                                                                    // 952
                                                                                                                       // 953
  function expectWithText(element, attrName) {                                                                         // 954
    expectAsync(element, attrName, function() {                                                                        // 955
      return getText(element);                                                                                         // 956
    });                                                                                                                // 957
  }                                                                                                                    // 958
                                                                                                                       // 959
  function getText(element) {                                                                                          // 960
    return element.text().trim();                                                                                      // 961
  }                                                                                                                    // 962
                                                                                                                       // 963
  function childHasAttribute(node, attrName) {                                                                         // 964
    var hasChildren = node.hasChildNodes(),                                                                            // 965
        hasAttr = false;                                                                                               // 966
                                                                                                                       // 967
    function isHidden(el) {                                                                                            // 968
      var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);                                    // 969
      return (style.display === 'none');                                                                               // 970
    }                                                                                                                  // 971
                                                                                                                       // 972
    if(hasChildren) {                                                                                                  // 973
      var children = node.childNodes;                                                                                  // 974
      for(var i=0; i<children.length; i++){                                                                            // 975
        var child = children[i];                                                                                       // 976
        if(child.nodeType === 1 && child.hasAttribute(attrName)) {                                                     // 977
          if(!isHidden(child)){                                                                                        // 978
            hasAttr = true;                                                                                            // 979
          }                                                                                                            // 980
        }                                                                                                              // 981
      }                                                                                                                // 982
    }                                                                                                                  // 983
    return hasAttr;                                                                                                    // 984
  }                                                                                                                    // 985
}                                                                                                                      // 986
AriaService.$inject = ["$$rAF", "$log", "$window"];                                                                    // 987
                                                                                                                       // 988
})();                                                                                                                  // 989
(function(){                                                                                                           // 990
"use strict";                                                                                                          // 991
                                                                                                                       // 992
angular.module('material.core')                                                                                        // 993
  .service('$mdCompiler', mdCompilerService);                                                                          // 994
                                                                                                                       // 995
function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {                              // 996
  /* jshint validthis: true */                                                                                         // 997
                                                                                                                       // 998
  /*                                                                                                                   // 999
   * @ngdoc service                                                                                                    // 1000
   * @name $mdCompiler                                                                                                 // 1001
   * @module material.core                                                                                             // 1002
   * @description                                                                                                      // 1003
   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer                        // 1004
   * to easily compile an element with a templateUrl, controller, and locals.                                          // 1005
   *                                                                                                                   // 1006
   * @usage                                                                                                            // 1007
   * <hljs lang="js">                                                                                                  // 1008
   * $mdCompiler.compile({                                                                                             // 1009
   *   templateUrl: 'modal.html',                                                                                      // 1010
   *   controller: 'ModalCtrl',                                                                                        // 1011
   *   locals: {                                                                                                       // 1012
   *     modal: myModalInstance;                                                                                       // 1013
   *   }                                                                                                               // 1014
   * }).then(function(compileData) {                                                                                   // 1015
   *   compileData.element; // modal.html's template in an element                                                     // 1016
   *   compileData.link(myScope); //attach controller & scope to element                                               // 1017
   * });                                                                                                               // 1018
   * </hljs>                                                                                                           // 1019
   */                                                                                                                  // 1020
                                                                                                                       // 1021
   /*                                                                                                                  // 1022
    * @ngdoc method                                                                                                    // 1023
    * @name $mdCompiler#compile                                                                                        // 1024
    * @description A helper to compile an HTML template/templateUrl with a given controller,                           // 1025
    * locals, and scope.                                                                                               // 1026
    * @param {object} options An options object, with the following properties:                                        // 1027
    *                                                                                                                  // 1028
    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with                        // 1029
    *      newly created scope or the name of a registered controller if passed as a string.                           // 1030
    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be                     // 1031
    *      published to scope under the `controllerAs` name.                                                           // 1032
    *    - `template` - `{string=}` An html template as a string.                                                      // 1033
    *    - `templateUrl` - `{string=}` A path to an html template.                                                     // 1034
    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after                // 1035
    *      it is loaded. It will be given the template string as a parameter, and should                               // 1036
    *      return a a new string representing the transformed template.                                                // 1037
    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should                   // 1038
    *      be injected into the controller. If any of these dependencies are promises, the compiler                    // 1039
    *      will wait for them all to be resolved, or if one is rejected before the controller is                       // 1040
    *      instantiated `compile()` will fail..                                                                        // 1041
    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.                            // 1042
    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.                           // 1043
    *        Otherwise if function, then it is injected and the return value is treated as the                         // 1044
    *        dependency. If the result is a promise, it is resolved before its value is                                // 1045
    *        injected into the controller.                                                                             // 1046
    *                                                                                                                  // 1047
    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.                        // 1048
    * `compileData` has the following properties:                                                                      // 1049
    *                                                                                                                  // 1050
    *   - `element` - `{element}`: an uncompiled element matching the provided template.                               // 1051
    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile                              // 1052
    *     the element and instantiate the provided controller (if given).                                              // 1053
    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is                    // 1054
    *     called. If `bindToController` is true, they will be coppied to the ctrl instead                              // 1055
    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.                  // 1056
    */                                                                                                                 // 1057
  this.compile = function(options) {                                                                                   // 1058
    var templateUrl = options.templateUrl;                                                                             // 1059
    var template = options.template || '';                                                                             // 1060
    var controller = options.controller;                                                                               // 1061
    var controllerAs = options.controllerAs;                                                                           // 1062
    var resolve = options.resolve || {};                                                                               // 1063
    var locals = options.locals || {};                                                                                 // 1064
    var transformTemplate = options.transformTemplate || angular.identity;                                             // 1065
    var bindToController = options.bindToController;                                                                   // 1066
                                                                                                                       // 1067
    // Take resolve values and invoke them.                                                                            // 1068
    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),                                            // 1069
    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})                               // 1070
    angular.forEach(resolve, function(value, key) {                                                                    // 1071
      if (angular.isString(value)) {                                                                                   // 1072
        resolve[key] = $injector.get(value);                                                                           // 1073
      } else {                                                                                                         // 1074
        resolve[key] = $injector.invoke(value);                                                                        // 1075
      }                                                                                                                // 1076
    });                                                                                                                // 1077
    //Add the locals, which are just straight values to inject                                                         // 1078
    //eg locals: { three: 3 }, will inject three into the controller                                                   // 1079
    angular.extend(resolve, locals);                                                                                   // 1080
                                                                                                                       // 1081
    if (templateUrl) {                                                                                                 // 1082
      resolve.$template = $http.get(templateUrl, {cache: $templateCache})                                              // 1083
        .then(function(response) {                                                                                     // 1084
          return response.data;                                                                                        // 1085
        });                                                                                                            // 1086
    } else {                                                                                                           // 1087
      resolve.$template = $q.when(template);                                                                           // 1088
    }                                                                                                                  // 1089
                                                                                                                       // 1090
    // Wait for all the resolves to finish if they are promises                                                        // 1091
    return $q.all(resolve).then(function(locals) {                                                                     // 1092
                                                                                                                       // 1093
      var template = transformTemplate(locals.$template);                                                              // 1094
      var element = options.element || angular.element('<div>').html(template.trim()).contents();                      // 1095
      var linkFn = $compile(element);                                                                                  // 1096
                                                                                                                       // 1097
      //Return a linking function that can be used later when the element is ready                                     // 1098
      return {                                                                                                         // 1099
        locals: locals,                                                                                                // 1100
        element: element,                                                                                              // 1101
        link: function link(scope) {                                                                                   // 1102
          locals.$scope = scope;                                                                                       // 1103
                                                                                                                       // 1104
          //Instantiate controller if it exists, because we have scope                                                 // 1105
          if (controller) {                                                                                            // 1106
            var invokeCtrl = $controller(controller, locals, true);                                                    // 1107
            if (bindToController) {                                                                                    // 1108
              angular.extend(invokeCtrl.instance, locals);                                                             // 1109
            }                                                                                                          // 1110
            var ctrl = invokeCtrl();                                                                                   // 1111
            //See angular-route source for this logic                                                                  // 1112
            element.data('$ngControllerController', ctrl);                                                             // 1113
            element.children().data('$ngControllerController', ctrl);                                                  // 1114
                                                                                                                       // 1115
            if (controllerAs) {                                                                                        // 1116
              scope[controllerAs] = ctrl;                                                                              // 1117
            }                                                                                                          // 1118
          }                                                                                                            // 1119
          return linkFn(scope);                                                                                        // 1120
        }                                                                                                              // 1121
      };                                                                                                               // 1122
    });                                                                                                                // 1123
                                                                                                                       // 1124
  };                                                                                                                   // 1125
}                                                                                                                      // 1126
mdCompilerService.$inject = ["$q", "$http", "$injector", "$compile", "$controller", "$templateCache"];                 // 1127
                                                                                                                       // 1128
})();                                                                                                                  // 1129
(function(){                                                                                                           // 1130
"use strict";                                                                                                          // 1131
                                                                                                                       // 1132
  var HANDLERS = {};                                                                                                   // 1133
  /* The state of the current 'pointer'                                                                                // 1134
   * The pointer represents the state of the current touch.                                                            // 1135
   * It contains normalized x and y coordinates from DOM events,                                                       // 1136
   * as well as other information abstracted from the DOM.                                                             // 1137
   */                                                                                                                  // 1138
  var pointer, lastPointer, forceSkipClickHijack = false;                                                              // 1139
                                                                                                                       // 1140
  // Used to attach event listeners once when multiple ng-apps are running.                                            // 1141
  var isInitialized = false;                                                                                           // 1142
                                                                                                                       // 1143
  angular                                                                                                              // 1144
    .module('material.core.gestures', [ ])                                                                             // 1145
    .provider('$mdGesture', MdGestureProvider)                                                                         // 1146
    .factory('$$MdGestureHandler', MdGestureHandler)                                                                   // 1147
    .run( attachToDocument );                                                                                          // 1148
                                                                                                                       // 1149
  /**                                                                                                                  // 1150
     * @ngdoc service                                                                                                  // 1151
     * @name $mdGestureProvider                                                                                        // 1152
     * @module material.core.gestures                                                                                  // 1153
     *                                                                                                                 // 1154
     * @description                                                                                                    // 1155
     * In some scenarios on Mobile devices (without jQuery), the click events should NOT be hijacked.                  // 1156
     * `$mdGestureProvider` is used to configure the Gesture module to ignore or skip click hijacking on mobile        // 1157
     * devices.                                                                                                        // 1158
     *                                                                                                                 // 1159
     * <hljs lang="js">                                                                                                // 1160
     *   app.config(function($mdGestureProvider) {                                                                     // 1161
     *                                                                                                                 // 1162
     *     // For mobile devices without jQuery loaded, do not                                                         // 1163
     *     // intercept click events during the capture phase.                                                         // 1164
     *     $mdGestureProvider.skipClickHijack();                                                                       // 1165
     *                                                                                                                 // 1166
     *   });                                                                                                           // 1167
     * </hljs>                                                                                                         // 1168
     *                                                                                                                 // 1169
     */                                                                                                                // 1170
  function MdGestureProvider() { }                                                                                     // 1171
                                                                                                                       // 1172
  MdGestureProvider.prototype = {                                                                                      // 1173
                                                                                                                       // 1174
    // Publish access to setter to configure a variable  BEFORE the                                                    // 1175
    // $mdGesture service is instantiated...                                                                           // 1176
    skipClickHijack: function() {                                                                                      // 1177
      return forceSkipClickHijack = true;                                                                              // 1178
    },                                                                                                                 // 1179
                                                                                                                       // 1180
    /**                                                                                                                // 1181
     * $get is used to build an instance of $mdGesture                                                                 // 1182
     * @ngInject                                                                                                       // 1183
     */                                                                                                                // 1184
    $get : ["$$MdGestureHandler", "$$rAF", "$timeout", function($$MdGestureHandler, $$rAF, $timeout) {                 // 1185
         return new MdGesture($$MdGestureHandler, $$rAF, $timeout);                                                    // 1186
    }]                                                                                                                 // 1187
  };                                                                                                                   // 1188
                                                                                                                       // 1189
                                                                                                                       // 1190
                                                                                                                       // 1191
  /**                                                                                                                  // 1192
   * MdGesture factory construction function                                                                           // 1193
   * @ngInject                                                                                                         // 1194
   */                                                                                                                  // 1195
  function MdGesture($$MdGestureHandler, $$rAF, $timeout) {                                                            // 1196
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;                                           // 1197
    var isIos = userAgent.match(/ipad|iphone|ipod/i);                                                                  // 1198
    var isAndroid = userAgent.match(/android/i);                                                                       // 1199
    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);                    // 1200
                                                                                                                       // 1201
    var self = {                                                                                                       // 1202
      handler: addHandler,                                                                                             // 1203
      register: register,                                                                                              // 1204
      // On mobile w/out jQuery, we normally intercept clicks. Should we skip that?                                    // 1205
      isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack                                   // 1206
    };                                                                                                                 // 1207
                                                                                                                       // 1208
    if (self.isHijackingClicks) {                                                                                      // 1209
      self.handler('click', {                                                                                          // 1210
        options: {                                                                                                     // 1211
          maxDistance: 6                                                                                               // 1212
        },                                                                                                             // 1213
        onEnd: function (ev, pointer) {                                                                                // 1214
          if (pointer.distance < this.state.options.maxDistance) {                                                     // 1215
            this.dispatchEvent(ev, 'click');                                                                           // 1216
          }                                                                                                            // 1217
        }                                                                                                              // 1218
      });                                                                                                              // 1219
    }                                                                                                                  // 1220
                                                                                                                       // 1221
    /*                                                                                                                 // 1222
     * Register an element to listen for a handler.                                                                    // 1223
     * This allows an element to override the default options for a handler.                                           // 1224
     * Additionally, some handlers like drag and hold only dispatch events if                                          // 1225
     * the domEvent happens inside an element that's registered to listen for these events.                            // 1226
     *                                                                                                                 // 1227
     * @see GestureHandler for how overriding of default options works.                                                // 1228
     * @example $mdGesture.register(myElement, 'drag', { minDistance: 20, horziontal: false })                         // 1229
     */                                                                                                                // 1230
    function register(element, handlerName, options) {                                                                 // 1231
      var handler = HANDLERS[handlerName.replace(/^\$md./, '')];                                                       // 1232
      if (!handler) {                                                                                                  // 1233
        throw new Error('Failed to register element with handler ' + handlerName + '. ' +                              // 1234
        'Available handlers: ' + Object.keys(HANDLERS).join(', '));                                                    // 1235
      }                                                                                                                // 1236
      return handler.registerElement(element, options);                                                                // 1237
    }                                                                                                                  // 1238
                                                                                                                       // 1239
    /*                                                                                                                 // 1240
     * add a handler to $mdGesture. see below.                                                                         // 1241
     */                                                                                                                // 1242
    function addHandler(name, definition) {                                                                            // 1243
      var handler = new $$MdGestureHandler(name);                                                                      // 1244
      angular.extend(handler, definition);                                                                             // 1245
      HANDLERS[name] = handler;                                                                                        // 1246
                                                                                                                       // 1247
      return self;                                                                                                     // 1248
    }                                                                                                                  // 1249
                                                                                                                       // 1250
    /*                                                                                                                 // 1251
     * Register handlers. These listen to touch/start/move events, interpret them,                                     // 1252
     * and dispatch gesture events depending on options & conditions. These are all                                    // 1253
     * instances of GestureHandler.                                                                                    // 1254
     * @see GestureHandler                                                                                             // 1255
     */                                                                                                                // 1256
    return self                                                                                                        // 1257
      /*                                                                                                               // 1258
       * The press handler dispatches an event on touchdown/touchend.                                                  // 1259
       * It's a simple abstraction of touch/mouse/pointer start and end.                                               // 1260
       */                                                                                                              // 1261
      .handler('press', {                                                                                              // 1262
        onStart: function (ev, pointer) {                                                                              // 1263
          this.dispatchEvent(ev, '$md.pressdown');                                                                     // 1264
        },                                                                                                             // 1265
        onEnd: function (ev, pointer) {                                                                                // 1266
          this.dispatchEvent(ev, '$md.pressup');                                                                       // 1267
        }                                                                                                              // 1268
      })                                                                                                               // 1269
                                                                                                                       // 1270
      /*                                                                                                               // 1271
       * The hold handler dispatches an event if the user keeps their finger within                                    // 1272
       * the same <maxDistance> area for <delay> ms.                                                                   // 1273
       * The hold handler will only run if a parent of the touch target is registered                                  // 1274
       * to listen for hold events through $mdGesture.register()                                                       // 1275
       */                                                                                                              // 1276
      .handler('hold', {                                                                                               // 1277
        options: {                                                                                                     // 1278
          maxDistance: 6,                                                                                              // 1279
          delay: 500                                                                                                   // 1280
        },                                                                                                             // 1281
        onCancel: function () {                                                                                        // 1282
          $timeout.cancel(this.state.timeout);                                                                         // 1283
        },                                                                                                             // 1284
        onStart: function (ev, pointer) {                                                                              // 1285
          // For hold, require a parent to be registered with $mdGesture.register()                                    // 1286
          // Because we prevent scroll events, this is necessary.                                                      // 1287
          if (!this.state.registeredParent) return this.cancel();                                                      // 1288
                                                                                                                       // 1289
          this.state.pos = {x: pointer.x, y: pointer.y};                                                               // 1290
          this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {                                    // 1291
            this.dispatchEvent(ev, '$md.hold');                                                                        // 1292
            this.cancel(); //we're done!                                                                               // 1293
          }), this.state.options.delay, false);                                                                        // 1294
        },                                                                                                             // 1295
        onMove: function (ev, pointer) {                                                                               // 1296
          // Don't scroll while waiting for hold.                                                                      // 1297
          // If we don't preventDefault touchmove events here, Android will assume we don't                            // 1298
          // want to listen to anymore touch events. It will start scrolling and stop sending                          // 1299
          // touchmove events.                                                                                         // 1300
          ev.preventDefault();                                                                                         // 1301
                                                                                                                       // 1302
          // If the user moves greater than <maxDistance> pixels, stop the hold timer                                  // 1303
          // set in onStart                                                                                            // 1304
          var dx = this.state.pos.x - pointer.x;                                                                       // 1305
          var dy = this.state.pos.y - pointer.y;                                                                       // 1306
          if (Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance) {                                               // 1307
            this.cancel();                                                                                             // 1308
          }                                                                                                            // 1309
        },                                                                                                             // 1310
        onEnd: function () {                                                                                           // 1311
          this.onCancel();                                                                                             // 1312
        }                                                                                                              // 1313
      })                                                                                                               // 1314
                                                                                                                       // 1315
      /*                                                                                                               // 1316
       * The drag handler dispatches a drag event if the user holds and moves his finger greater than                  // 1317
       * <minDistance> px in the x or y direction, depending on options.horizontal.                                    // 1318
       * The drag will be cancelled if the user moves his finger greater than <minDistance>*<cancelMultiplier> in      // 1319
       * the perpindicular direction. Eg if the drag is horizontal and the user moves his finger <minDistance>*<cancelMultiplier>
       * pixels vertically, this handler won't consider the move part of a drag.                                       // 1321
       */                                                                                                              // 1322
      .handler('drag', {                                                                                               // 1323
        options: {                                                                                                     // 1324
          minDistance: 6,                                                                                              // 1325
          horizontal: true,                                                                                            // 1326
          cancelMultiplier: 1.5                                                                                        // 1327
        },                                                                                                             // 1328
        onStart: function (ev) {                                                                                       // 1329
          // For drag, require a parent to be registered with $mdGesture.register()                                    // 1330
          if (!this.state.registeredParent) this.cancel();                                                             // 1331
        },                                                                                                             // 1332
        onMove: function (ev, pointer) {                                                                               // 1333
          var shouldStartDrag, shouldCancel;                                                                           // 1334
          // Don't scroll while deciding if this touchmove qualifies as a drag event.                                  // 1335
          // If we don't preventDefault touchmove events here, Android will assume we don't                            // 1336
          // want to listen to anymore touch events. It will start scrolling and stop sending                          // 1337
          // touchmove events.                                                                                         // 1338
          ev.preventDefault();                                                                                         // 1339
                                                                                                                       // 1340
          if (!this.state.dragPointer) {                                                                               // 1341
            if (this.state.options.horizontal) {                                                                       // 1342
              shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;                          // 1343
              shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;
            } else {                                                                                                   // 1345
              shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;                          // 1346
              shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;
            }                                                                                                          // 1348
                                                                                                                       // 1349
            if (shouldStartDrag) {                                                                                     // 1350
              // Create a new pointer representing this drag, starting at this point where the drag started.           // 1351
              this.state.dragPointer = makeStartPointer(ev);                                                           // 1352
              updatePointerState(ev, this.state.dragPointer);                                                          // 1353
              this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);                                         // 1354
                                                                                                                       // 1355
            } else if (shouldCancel) {                                                                                 // 1356
              this.cancel();                                                                                           // 1357
            }                                                                                                          // 1358
          } else {                                                                                                     // 1359
            this.dispatchDragMove(ev);                                                                                 // 1360
          }                                                                                                            // 1361
        },                                                                                                             // 1362
        // Only dispatch dragmove events every frame; any more is unnecessray                                          // 1363
        dispatchDragMove: $$rAF.throttle(function (ev) {                                                               // 1364
          // Make sure the drag didn't stop while waiting for the next frame                                           // 1365
          if (this.state.isRunning) {                                                                                  // 1366
            updatePointerState(ev, this.state.dragPointer);                                                            // 1367
            this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);                                                // 1368
          }                                                                                                            // 1369
        }),                                                                                                            // 1370
        onEnd: function (ev, pointer) {                                                                                // 1371
          if (this.state.dragPointer) {                                                                                // 1372
            updatePointerState(ev, this.state.dragPointer);                                                            // 1373
            this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);                                             // 1374
          }                                                                                                            // 1375
        }                                                                                                              // 1376
      })                                                                                                               // 1377
                                                                                                                       // 1378
      /*                                                                                                               // 1379
       * The swipe handler will dispatch a swipe event if, on the end of a touch,                                      // 1380
       * the velocity and distance were high enough.                                                                   // 1381
       * TODO: add vertical swiping with a `horizontal` option similar to the drag handler.                            // 1382
       */                                                                                                              // 1383
      .handler('swipe', {                                                                                              // 1384
        options: {                                                                                                     // 1385
          minVelocity: 0.65,                                                                                           // 1386
          minDistance: 10                                                                                              // 1387
        },                                                                                                             // 1388
        onEnd: function (ev, pointer) {                                                                                // 1389
          if (Math.abs(pointer.velocityX) > this.state.options.minVelocity &&                                          // 1390
            Math.abs(pointer.distanceX) > this.state.options.minDistance) {                                            // 1391
            var eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';                         // 1392
            this.dispatchEvent(ev, eventType);                                                                         // 1393
          }                                                                                                            // 1394
        }                                                                                                              // 1395
      });                                                                                                              // 1396
                                                                                                                       // 1397
  }                                                                                                                    // 1398
  MdGesture.$inject = ["$$MdGestureHandler", "$$rAF", "$timeout"];                                                     // 1399
                                                                                                                       // 1400
  /**                                                                                                                  // 1401
   * MdGestureHandler                                                                                                  // 1402
   * A GestureHandler is an object which is able to dispatch custom dom events                                         // 1403
   * based on native dom {touch,pointer,mouse}{start,move,end} events.                                                 // 1404
   *                                                                                                                   // 1405
   * A gesture will manage its lifecycle through the start,move,end, and cancel                                        // 1406
   * functions, which are called by native dom events.                                                                 // 1407
   *                                                                                                                   // 1408
   * A gesture has the concept of 'options' (eg a swipe's required velocity), which can be                             // 1409
   * overridden by elements registering through $mdGesture.register()                                                  // 1410
   */                                                                                                                  // 1411
  function GestureHandler (name) {                                                                                     // 1412
    this.name = name;                                                                                                  // 1413
    this.state = {};                                                                                                   // 1414
  }                                                                                                                    // 1415
                                                                                                                       // 1416
  function MdGestureHandler() {                                                                                        // 1417
    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);                    // 1418
                                                                                                                       // 1419
    GestureHandler.prototype = {                                                                                       // 1420
      options: {},                                                                                                     // 1421
      // jQuery listeners don't work with custom DOMEvents, so we have to dispatch events                              // 1422
      // differently when jQuery is loaded                                                                             // 1423
      dispatchEvent: hasJQuery ?  jQueryDispatchEvent : nativeDispatchEvent,                                           // 1424
                                                                                                                       // 1425
      // These are overridden by the registered handler                                                                // 1426
      onStart: angular.noop,                                                                                           // 1427
      onMove: angular.noop,                                                                                            // 1428
      onEnd: angular.noop,                                                                                             // 1429
      onCancel: angular.noop,                                                                                          // 1430
                                                                                                                       // 1431
      // onStart sets up a new state for the handler, which includes options from the                                  // 1432
      // nearest registered parent element of ev.target.                                                               // 1433
      start: function (ev, pointer) {                                                                                  // 1434
        if (this.state.isRunning) return;                                                                              // 1435
        var parentTarget = this.getNearestParent(ev.target);                                                           // 1436
        // Get the options from the nearest registered parent                                                          // 1437
        var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};                            // 1438
                                                                                                                       // 1439
        this.state = {                                                                                                 // 1440
          isRunning: true,                                                                                             // 1441
          // Override the default options with the nearest registered parent's options                                 // 1442
          options: angular.extend({}, this.options, parentTargetOptions),                                              // 1443
          // Pass in the registered parent node to the state so the onStart listener can use                           // 1444
          registeredParent: parentTarget                                                                               // 1445
        };                                                                                                             // 1446
        this.onStart(ev, pointer);                                                                                     // 1447
      },                                                                                                               // 1448
      move: function (ev, pointer) {                                                                                   // 1449
        if (!this.state.isRunning) return;                                                                             // 1450
        this.onMove(ev, pointer);                                                                                      // 1451
      },                                                                                                               // 1452
      end: function (ev, pointer) {                                                                                    // 1453
        if (!this.state.isRunning) return;                                                                             // 1454
        this.onEnd(ev, pointer);                                                                                       // 1455
        this.state.isRunning = false;                                                                                  // 1456
      },                                                                                                               // 1457
      cancel: function (ev, pointer) {                                                                                 // 1458
        this.onCancel(ev, pointer);                                                                                    // 1459
        this.state = {};                                                                                               // 1460
      },                                                                                                               // 1461
                                                                                                                       // 1462
      // Find and return the nearest parent element that has been registered to                                        // 1463
      // listen for this handler via $mdGesture.register(element, 'handlerName').                                      // 1464
      getNearestParent: function (node) {                                                                              // 1465
        var current = node;                                                                                            // 1466
        while (current) {                                                                                              // 1467
          if ((current.$mdGesture || {})[this.name]) {                                                                 // 1468
            return current;                                                                                            // 1469
          }                                                                                                            // 1470
          current = current.parentNode;                                                                                // 1471
        }                                                                                                              // 1472
        return null;                                                                                                   // 1473
      },                                                                                                               // 1474
                                                                                                                       // 1475
      // Called from $mdGesture.register when an element reigsters itself with a handler.                              // 1476
      // Store the options the user gave on the DOMElement itself. These options will                                  // 1477
      // be retrieved with getNearestParent when the handler starts.                                                   // 1478
      registerElement: function (element, options) {                                                                   // 1479
        var self = this;                                                                                               // 1480
        element[0].$mdGesture = element[0].$mdGesture || {};                                                           // 1481
        element[0].$mdGesture[this.name] = options || {};                                                              // 1482
        element.on('$destroy', onDestroy);                                                                             // 1483
                                                                                                                       // 1484
        return onDestroy;                                                                                              // 1485
                                                                                                                       // 1486
        function onDestroy() {                                                                                         // 1487
          delete element[0].$mdGesture[self.name];                                                                     // 1488
          element.off('$destroy', onDestroy);                                                                          // 1489
        }                                                                                                              // 1490
      }                                                                                                                // 1491
    };                                                                                                                 // 1492
                                                                                                                       // 1493
    return GestureHandler;                                                                                             // 1494
                                                                                                                       // 1495
    /*                                                                                                                 // 1496
     * Dispatch an event with jQuery                                                                                   // 1497
     * TODO: Make sure this sends bubbling events                                                                      // 1498
     *                                                                                                                 // 1499
     * @param srcEvent the original DOM touch event that started this.                                                 // 1500
     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')                                // 1501
     * @param eventPointer the pointer object that matches this event.                                                 // 1502
     */                                                                                                                // 1503
    function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {                                                  // 1504
      eventPointer = eventPointer || pointer;                                                                          // 1505
      var eventObj = new angular.element.Event(eventType);                                                             // 1506
                                                                                                                       // 1507
      eventObj.$material = true;                                                                                       // 1508
      eventObj.pointer = eventPointer;                                                                                 // 1509
      eventObj.srcEvent = srcEvent;                                                                                    // 1510
                                                                                                                       // 1511
      angular.extend(eventObj, {                                                                                       // 1512
        clientX: eventPointer.x,                                                                                       // 1513
        clientY: eventPointer.y,                                                                                       // 1514
        screenX: eventPointer.x,                                                                                       // 1515
        screenY: eventPointer.y,                                                                                       // 1516
        pageX: eventPointer.x,                                                                                         // 1517
        pageY: eventPointer.y,                                                                                         // 1518
        ctrlKey: srcEvent.ctrlKey,                                                                                     // 1519
        altKey: srcEvent.altKey,                                                                                       // 1520
        shiftKey: srcEvent.shiftKey,                                                                                   // 1521
        metaKey: srcEvent.metaKey                                                                                      // 1522
      });                                                                                                              // 1523
      angular.element(eventPointer.target).trigger(eventObj);                                                          // 1524
    }                                                                                                                  // 1525
                                                                                                                       // 1526
    /*                                                                                                                 // 1527
     * NOTE: nativeDispatchEvent is very performance sensitive.                                                        // 1528
     * @param srcEvent the original DOM touch event that started this.                                                 // 1529
     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')                                // 1530
     * @param eventPointer the pointer object that matches this event.                                                 // 1531
     */                                                                                                                // 1532
    function nativeDispatchEvent(srcEvent, eventType, eventPointer) {                                                  // 1533
      eventPointer = eventPointer || pointer;                                                                          // 1534
      var eventObj;                                                                                                    // 1535
                                                                                                                       // 1536
      if (eventType === 'click') {                                                                                     // 1537
        eventObj = document.createEvent('MouseEvents');                                                                // 1538
        eventObj.initMouseEvent(                                                                                       // 1539
          'click', true, true, window, srcEvent.detail,                                                                // 1540
          eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y,                                              // 1541
          srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey,                                      // 1542
          srcEvent.button, srcEvent.relatedTarget || null                                                              // 1543
        );                                                                                                             // 1544
                                                                                                                       // 1545
      } else {                                                                                                         // 1546
        eventObj = document.createEvent('CustomEvent');                                                                // 1547
        eventObj.initCustomEvent(eventType, true, true, {});                                                           // 1548
      }                                                                                                                // 1549
      eventObj.$material = true;                                                                                       // 1550
      eventObj.pointer = eventPointer;                                                                                 // 1551
      eventObj.srcEvent = srcEvent;                                                                                    // 1552
      eventPointer.target.dispatchEvent(eventObj);                                                                     // 1553
    }                                                                                                                  // 1554
                                                                                                                       // 1555
  }                                                                                                                    // 1556
                                                                                                                       // 1557
  /**                                                                                                                  // 1558
   * Attach Gestures: hook document and check shouldHijack clicks                                                      // 1559
   * @ngInject                                                                                                         // 1560
   */                                                                                                                  // 1561
  function attachToDocument( $mdGesture, $$MdGestureHandler ) {                                                        // 1562
                                                                                                                       // 1563
    // Polyfill document.contains for IE11.                                                                            // 1564
    // TODO: move to util                                                                                              // 1565
    document.contains || (document.contains = function (node) {                                                        // 1566
      return document.body.contains(node);                                                                             // 1567
    });                                                                                                                // 1568
                                                                                                                       // 1569
    if (!isInitialized && $mdGesture.isHijackingClicks ) {                                                             // 1570
      /*                                                                                                               // 1571
       * If hijack clicks is true, we preventDefault any click that wasn't                                             // 1572
       * sent by ngMaterial. This is because on older Android & iOS, a false, or 'ghost',                              // 1573
       * click event will be sent ~400ms after a touchend event happens.                                               // 1574
       * The only way to know if this click is real is to prevent any normal                                           // 1575
       * click events, and add a flag to events sent by material so we know not to prevent those.                      // 1576
       *                                                                                                               // 1577
       * Two exceptions to click events that should be prevented are:                                                  // 1578
       *  - click events sent by the keyboard (eg form submit)                                                         // 1579
       *  - events that originate from an Ionic app                                                                    // 1580
       */                                                                                                              // 1581
      document.addEventListener('click', function clickHijacker(ev) {                                                  // 1582
        var isKeyClick = ev.clientX === 0 && ev.clientY === 0;                                                         // 1583
        if (!isKeyClick && !ev.$material && !ev.isIonicTap) {                                                          // 1584
          ev.preventDefault();                                                                                         // 1585
          ev.stopPropagation();                                                                                        // 1586
        }                                                                                                              // 1587
      }, true);                                                                                                        // 1588
                                                                                                                       // 1589
      isInitialized = true;                                                                                            // 1590
    }                                                                                                                  // 1591
                                                                                                                       // 1592
    // Listen to all events to cover all platforms.                                                                    // 1593
    var START_EVENTS = 'mousedown touchstart pointerdown';                                                             // 1594
    var MOVE_EVENTS = 'mousemove touchmove pointermove';                                                               // 1595
    var END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';                                // 1596
                                                                                                                       // 1597
    angular.element(document)                                                                                          // 1598
      .on(START_EVENTS, gestureStart)                                                                                  // 1599
      .on(MOVE_EVENTS, gestureMove)                                                                                    // 1600
      .on(END_EVENTS, gestureEnd)                                                                                      // 1601
      // For testing                                                                                                   // 1602
      .on('$$mdGestureReset', function gestureClearCache () {                                                          // 1603
        lastPointer = pointer = null;                                                                                  // 1604
      });                                                                                                              // 1605
                                                                                                                       // 1606
    /*                                                                                                                 // 1607
     * When a DOM event happens, run all registered gesture handlers' lifecycle                                        // 1608
     * methods which match the DOM event.                                                                              // 1609
     * Eg when a 'touchstart' event happens, runHandlers('start') will call and                                        // 1610
     * run `handler.cancel()` and `handler.start()` on all registered handlers.                                        // 1611
     */                                                                                                                // 1612
    function runHandlers(handlerEvent, event) {                                                                        // 1613
      var handler;                                                                                                     // 1614
      for (var name in HANDLERS) {                                                                                     // 1615
        handler = HANDLERS[name];                                                                                      // 1616
        if( handler instanceof $$MdGestureHandler ) {                                                                  // 1617
                                                                                                                       // 1618
          if (handlerEvent === 'start') {                                                                              // 1619
            // Run cancel to reset any handlers' state                                                                 // 1620
            handler.cancel();                                                                                          // 1621
          }                                                                                                            // 1622
          handler[handlerEvent](event, pointer);                                                                       // 1623
                                                                                                                       // 1624
        }                                                                                                              // 1625
      }                                                                                                                // 1626
    }                                                                                                                  // 1627
                                                                                                                       // 1628
    /*                                                                                                                 // 1629
     * gestureStart vets if a start event is legitimate (and not part of a 'ghost click' from iOS/Android)             // 1630
     * If it is legitimate, we initiate the pointer state and mark the current pointer's type                          // 1631
     * For example, for a touchstart event, mark the current pointer as a 'touch' pointer, so mouse events             // 1632
     * won't effect it.                                                                                                // 1633
     */                                                                                                                // 1634
    function gestureStart(ev) {                                                                                        // 1635
      // If we're already touched down, abort                                                                          // 1636
      if (pointer) return;                                                                                             // 1637
                                                                                                                       // 1638
      var now = +Date.now();                                                                                           // 1639
                                                                                                                       // 1640
      // iOS & old android bug: after a touch event, a click event is sent 350 ms later.                               // 1641
      // If <400ms have passed, don't allow an event of a different type than the previous event                       // 1642
      if (lastPointer && !typesMatch(ev, lastPointer) && (now - lastPointer.endTime < 1500)) {                         // 1643
        return;                                                                                                        // 1644
      }                                                                                                                // 1645
                                                                                                                       // 1646
      pointer = makeStartPointer(ev);                                                                                  // 1647
                                                                                                                       // 1648
      runHandlers('start', ev);                                                                                        // 1649
    }                                                                                                                  // 1650
    /*                                                                                                                 // 1651
     * If a move event happens of the right type, update the pointer and run all the move handlers.                    // 1652
     * "of the right type": if a mousemove happens but our pointer started with a touch event, do nothing.             // 1653
     */                                                                                                                // 1654
    function gestureMove(ev) {                                                                                         // 1655
      if (!pointer || !typesMatch(ev, pointer)) return;                                                                // 1656
                                                                                                                       // 1657
      updatePointerState(ev, pointer);                                                                                 // 1658
      runHandlers('move', ev);                                                                                         // 1659
    }                                                                                                                  // 1660
    /*                                                                                                                 // 1661
     * If an end event happens of the right type, update the pointer, run endHandlers, and save the pointer as 'lastPointer'
     */                                                                                                                // 1663
    function gestureEnd(ev) {                                                                                          // 1664
      if (!pointer || !typesMatch(ev, pointer)) return;                                                                // 1665
                                                                                                                       // 1666
      updatePointerState(ev, pointer);                                                                                 // 1667
      pointer.endTime = +Date.now();                                                                                   // 1668
                                                                                                                       // 1669
      runHandlers('end', ev);                                                                                          // 1670
                                                                                                                       // 1671
      lastPointer = pointer;                                                                                           // 1672
      pointer = null;                                                                                                  // 1673
    }                                                                                                                  // 1674
                                                                                                                       // 1675
  }                                                                                                                    // 1676
  attachToDocument.$inject = ["$mdGesture", "$$MdGestureHandler"];                                                     // 1677
                                                                                                                       // 1678
  // ********************                                                                                              // 1679
  // Module Functions                                                                                                  // 1680
  // ********************                                                                                              // 1681
                                                                                                                       // 1682
  /*                                                                                                                   // 1683
   * Initiate the pointer. x, y, and the pointer's type.                                                               // 1684
   */                                                                                                                  // 1685
  function makeStartPointer(ev) {                                                                                      // 1686
    var point = getEventPoint(ev);                                                                                     // 1687
    var startPointer = {                                                                                               // 1688
      startTime: +Date.now(),                                                                                          // 1689
      target: ev.target,                                                                                               // 1690
      // 'p' for pointer events, 'm' for mouse, 't' for touch                                                          // 1691
      type: ev.type.charAt(0)                                                                                          // 1692
    };                                                                                                                 // 1693
    startPointer.startX = startPointer.x = point.pageX;                                                                // 1694
    startPointer.startY = startPointer.y = point.pageY;                                                                // 1695
    return startPointer;                                                                                               // 1696
  }                                                                                                                    // 1697
                                                                                                                       // 1698
  /*                                                                                                                   // 1699
   * return whether the pointer's type matches the event's type.                                                       // 1700
   * Eg if a touch event happens but the pointer has a mouse type, return false.                                       // 1701
   */                                                                                                                  // 1702
  function typesMatch(ev, pointer) {                                                                                   // 1703
    return ev && pointer && ev.type.charAt(0) === pointer.type;                                                        // 1704
  }                                                                                                                    // 1705
                                                                                                                       // 1706
  /*                                                                                                                   // 1707
   * Update the given pointer based upon the given DOMEvent.                                                           // 1708
   * Distance, velocity, direction, duration, etc                                                                      // 1709
   */                                                                                                                  // 1710
  function updatePointerState(ev, pointer) {                                                                           // 1711
    var point = getEventPoint(ev);                                                                                     // 1712
    var x = pointer.x = point.pageX;                                                                                   // 1713
    var y = pointer.y = point.pageY;                                                                                   // 1714
                                                                                                                       // 1715
    pointer.distanceX = x - pointer.startX;                                                                            // 1716
    pointer.distanceY = y - pointer.startY;                                                                            // 1717
    pointer.distance = Math.sqrt(                                                                                      // 1718
      pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY                                    // 1719
    );                                                                                                                 // 1720
                                                                                                                       // 1721
    pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';                        // 1722
    pointer.directionY = pointer.distanceY > 0 ? 'up' : pointer.distanceY < 0 ? 'down' : '';                           // 1723
                                                                                                                       // 1724
    pointer.duration = +Date.now() - pointer.startTime;                                                                // 1725
    pointer.velocityX = pointer.distanceX / pointer.duration;                                                          // 1726
    pointer.velocityY = pointer.distanceY / pointer.duration;                                                          // 1727
  }                                                                                                                    // 1728
                                                                                                                       // 1729
  /*                                                                                                                   // 1730
   * Normalize the point where the DOM event happened whether it's touch or mouse.                                     // 1731
   * @returns point event obj with pageX and pageY on it.                                                              // 1732
   */                                                                                                                  // 1733
  function getEventPoint(ev) {                                                                                         // 1734
    ev = ev.originalEvent || ev; // support jQuery events                                                              // 1735
    return (ev.touches && ev.touches[0]) ||                                                                            // 1736
      (ev.changedTouches && ev.changedTouches[0]) ||                                                                   // 1737
      ev;                                                                                                              // 1738
  }                                                                                                                    // 1739
                                                                                                                       // 1740
})();                                                                                                                  // 1741
(function(){                                                                                                           // 1742
"use strict";                                                                                                          // 1743
                                                                                                                       // 1744
angular.module('material.core')                                                                                        // 1745
  .provider('$$interimElement', InterimElementProvider);                                                               // 1746
                                                                                                                       // 1747
/*                                                                                                                     // 1748
 * @ngdoc service                                                                                                      // 1749
 * @name $$interimElement                                                                                              // 1750
 * @module material.core                                                                                               // 1751
 *                                                                                                                     // 1752
 * @description                                                                                                        // 1753
 *                                                                                                                     // 1754
 * Factory that contructs `$$interimElement.$service` services.                                                        // 1755
 * Used internally in material design for elements that appear on screen temporarily.                                  // 1756
 * The service provides a promise-like API for interacting with the temporary                                          // 1757
 * elements.                                                                                                           // 1758
 *                                                                                                                     // 1759
 * ```js                                                                                                               // 1760
 * app.service('$mdToast', function($$interimElement) {                                                                // 1761
 *   var $mdToast = $$interimElement(toastDefaultOptions);                                                             // 1762
 *   return $mdToast;                                                                                                  // 1763
 * });                                                                                                                 // 1764
 * ```                                                                                                                 // 1765
 * @param {object=} defaultOptions Options used by default for the `show` method on the service.                       // 1766
 *                                                                                                                     // 1767
 * @returns {$$interimElement.$service}                                                                                // 1768
 *                                                                                                                     // 1769
 */                                                                                                                    // 1770
                                                                                                                       // 1771
function InterimElementProvider() {                                                                                    // 1772
  createInterimElementProvider.$get = InterimElementFactory;                                                           // 1773
  InterimElementFactory.$inject = ["$document", "$q", "$rootScope", "$timeout", "$rootElement", "$animate", "$interpolate", "$mdCompiler", "$mdTheming"];
  return createInterimElementProvider;                                                                                 // 1775
                                                                                                                       // 1776
  /**                                                                                                                  // 1777
   * Returns a new provider which allows configuration of a new interimElement                                         // 1778
   * service. Allows configuration of default options & methods for options,                                           // 1779
   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)                        // 1780
   */                                                                                                                  // 1781
  function createInterimElementProvider(interimFactoryName) {                                                          // 1782
    var EXPOSED_METHODS = ['onHide', 'onShow', 'onRemove'];                                                            // 1783
                                                                                                                       // 1784
    var customMethods = {};                                                                                            // 1785
    var providerConfig = {                                                                                             // 1786
      presets: {}                                                                                                      // 1787
    };                                                                                                                 // 1788
                                                                                                                       // 1789
    var provider = {                                                                                                   // 1790
      setDefaults: setDefaults,                                                                                        // 1791
      addPreset: addPreset,                                                                                            // 1792
      addMethod: addMethod,                                                                                            // 1793
      $get: factory                                                                                                    // 1794
    };                                                                                                                 // 1795
                                                                                                                       // 1796
    /**                                                                                                                // 1797
     * all interim elements will come with the 'build' preset                                                          // 1798
     */                                                                                                                // 1799
    provider.addPreset('build', {                                                                                      // 1800
      methods: ['controller', 'controllerAs', 'resolve',                                                               // 1801
        'template', 'templateUrl', 'themable', 'transformTemplate', 'parent']                                          // 1802
    });                                                                                                                // 1803
                                                                                                                       // 1804
    factory.$inject = ["$$interimElement", "$animate", "$injector"];                                                   // 1805
    return provider;                                                                                                   // 1806
                                                                                                                       // 1807
    /**                                                                                                                // 1808
     * Save the configured defaults to be used when the factory is instantiated                                        // 1809
     */                                                                                                                // 1810
    function setDefaults(definition) {                                                                                 // 1811
      providerConfig.optionsFactory = definition.options;                                                              // 1812
      providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);                                     // 1813
      return provider;                                                                                                 // 1814
    }                                                                                                                  // 1815
                                                                                                                       // 1816
    /**                                                                                                                // 1817
     * Add a method to the factory that isn't specific to any interim element operations                               // 1818
     */                                                                                                                // 1819
                                                                                                                       // 1820
    function addMethod(name, fn) {                                                                                     // 1821
      customMethods[name] = fn;                                                                                        // 1822
      return provider;                                                                                                 // 1823
    }                                                                                                                  // 1824
                                                                                                                       // 1825
    /**                                                                                                                // 1826
     * Save the configured preset to be used when the factory is instantiated                                          // 1827
     */                                                                                                                // 1828
    function addPreset(name, definition) {                                                                             // 1829
      definition = definition || {};                                                                                   // 1830
      definition.methods = definition.methods || [];                                                                   // 1831
      definition.options = definition.options || function() { return {}; };                                            // 1832
                                                                                                                       // 1833
      if (/^cancel|hide|show$/.test(name)) {                                                                           // 1834
        throw new Error("Preset '" + name + "' in " + interimFactoryName + " is reserved!");                           // 1835
      }                                                                                                                // 1836
      if (definition.methods.indexOf('_options') > -1) {                                                               // 1837
        throw new Error("Method '_options' in " + interimFactoryName + " is reserved!");                               // 1838
      }                                                                                                                // 1839
      providerConfig.presets[name] = {                                                                                 // 1840
        methods: definition.methods.concat(EXPOSED_METHODS),                                                           // 1841
        optionsFactory: definition.options,                                                                            // 1842
        argOption: definition.argOption                                                                                // 1843
      };                                                                                                               // 1844
      return provider;                                                                                                 // 1845
    }                                                                                                                  // 1846
                                                                                                                       // 1847
    /**                                                                                                                // 1848
     * Create a factory that has the given methods & defaults implementing interimElement                              // 1849
     */                                                                                                                // 1850
    /* @ngInject */                                                                                                    // 1851
    function factory($$interimElement, $animate, $injector) {                                                          // 1852
      var defaultMethods;                                                                                              // 1853
      var defaultOptions;                                                                                              // 1854
      var interimElementService = $$interimElement();                                                                  // 1855
                                                                                                                       // 1856
      /*                                                                                                               // 1857
       * publicService is what the developer will be using.                                                            // 1858
       * It has methods hide(), cancel(), show(), build(), and any other                                               // 1859
       * presets which were set during the config phase.                                                               // 1860
       */                                                                                                              // 1861
      var publicService = {                                                                                            // 1862
        hide: interimElementService.hide,                                                                              // 1863
        cancel: interimElementService.cancel,                                                                          // 1864
        show: showInterimElement                                                                                       // 1865
      };                                                                                                               // 1866
                                                                                                                       // 1867
      defaultMethods = providerConfig.methods || [];                                                                   // 1868
      // This must be invoked after the publicService is initialized                                                   // 1869
      defaultOptions = invokeFactory(providerConfig.optionsFactory, {});                                               // 1870
                                                                                                                       // 1871
      // Copy over the simple custom methods                                                                           // 1872
      angular.forEach(customMethods, function(fn, name) {                                                              // 1873
        publicService[name] = fn;                                                                                      // 1874
      });                                                                                                              // 1875
                                                                                                                       // 1876
      angular.forEach(providerConfig.presets, function(definition, name) {                                             // 1877
        var presetDefaults = invokeFactory(definition.optionsFactory, {});                                             // 1878
        var presetMethods = (definition.methods || []).concat(defaultMethods);                                         // 1879
                                                                                                                       // 1880
        // Every interimElement built with a preset has a field called `$type`,                                        // 1881
        // which matches the name of the preset.                                                                       // 1882
        // Eg in preset 'confirm', options.$type === 'confirm'                                                         // 1883
        angular.extend(presetDefaults, { $type: name });                                                               // 1884
                                                                                                                       // 1885
        // This creates a preset class which has setter methods for every                                              // 1886
        // method given in the `.addPreset()` function, as well as every                                               // 1887
        // method given in the `.setDefaults()` function.                                                              // 1888
        //                                                                                                             // 1889
        // @example                                                                                                    // 1890
        // .setDefaults({                                                                                              // 1891
        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],                          // 1892
        //   options: dialogDefaultOptions                                                                             // 1893
        // })                                                                                                          // 1894
        // .addPreset('alert', {                                                                                       // 1895
        //   methods: ['title', 'ok'],                                                                                 // 1896
        //   options: alertDialogOptions                                                                               // 1897
        // })                                                                                                          // 1898
        //                                                                                                             // 1899
        // Set values will be passed to the options when interimElemnt.show() is called.                               // 1900
        function Preset(opts) {                                                                                        // 1901
          this._options = angular.extend({}, presetDefaults, opts);                                                    // 1902
        }                                                                                                              // 1903
        angular.forEach(presetMethods, function(name) {                                                                // 1904
          Preset.prototype[name] = function(value) {                                                                   // 1905
            this._options[name] = value;                                                                               // 1906
            return this;                                                                                               // 1907
          };                                                                                                           // 1908
        });                                                                                                            // 1909
                                                                                                                       // 1910
        // Create shortcut method for one-linear methods                                                               // 1911
        if (definition.argOption) {                                                                                    // 1912
          var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);                                      // 1913
          publicService[methodName] = function(arg) {                                                                  // 1914
            var config = publicService[name](arg);                                                                     // 1915
            return publicService.show(config);                                                                         // 1916
          };                                                                                                           // 1917
        }                                                                                                              // 1918
                                                                                                                       // 1919
        // eg $mdDialog.alert() will return a new alert preset                                                         // 1920
        publicService[name] = function(arg) {                                                                          // 1921
          // If argOption is supplied, eg `argOption: 'content'`, then we assume                                       // 1922
          // if the argument is not an options object then it is the `argOption` option.                               // 1923
          //                                                                                                           // 1924
          // @example `$mdToast.simple('hello')` // sets options.content to hello                                      // 1925
          //                                     // because argOption === 'content'                                    // 1926
          if (arguments.length && definition.argOption && !angular.isObject(arg) &&                                    // 1927
              !angular.isArray(arg)) {                                                                                 // 1928
            return (new Preset())[definition.argOption](arg);                                                          // 1929
          } else {                                                                                                     // 1930
            return new Preset(arg);                                                                                    // 1931
          }                                                                                                            // 1932
                                                                                                                       // 1933
        };                                                                                                             // 1934
      });                                                                                                              // 1935
                                                                                                                       // 1936
      return publicService;                                                                                            // 1937
                                                                                                                       // 1938
      function showInterimElement(opts) {                                                                              // 1939
        // opts is either a preset which stores its options on an _options field,                                      // 1940
        // or just an object made up of options                                                                        // 1941
        if (opts && opts._options) opts = opts._options;                                                               // 1942
        return interimElementService.show(                                                                             // 1943
          angular.extend({}, defaultOptions, opts)                                                                     // 1944
        );                                                                                                             // 1945
      }                                                                                                                // 1946
                                                                                                                       // 1947
      /**                                                                                                              // 1948
       * Helper to call $injector.invoke with a local of the factory name for                                          // 1949
       * this provider.                                                                                                // 1950
       * If an $mdDialog is providing options for a dialog and tries to inject                                         // 1951
       * $mdDialog, a circular dependency error will happen.                                                           // 1952
       * We get around that by manually injecting $mdDialog as a local.                                                // 1953
       */                                                                                                              // 1954
      function invokeFactory(factory, defaultVal) {                                                                    // 1955
        var locals = {};                                                                                               // 1956
        locals[interimFactoryName] = publicService;                                                                    // 1957
        return $injector.invoke(factory || function() { return defaultVal; }, {}, locals);                             // 1958
      }                                                                                                                // 1959
                                                                                                                       // 1960
    }                                                                                                                  // 1961
                                                                                                                       // 1962
  }                                                                                                                    // 1963
                                                                                                                       // 1964
  /* @ngInject */                                                                                                      // 1965
  function InterimElementFactory($document, $q, $rootScope, $timeout, $rootElement, $animate,                          // 1966
                                 $interpolate, $mdCompiler, $mdTheming ) {                                             // 1967
    var startSymbol = $interpolate.startSymbol(),                                                                      // 1968
        endSymbol = $interpolate.endSymbol(),                                                                          // 1969
        usesStandardSymbols = ((startSymbol === '{{') && (endSymbol === '}}')),                                        // 1970
        processTemplate  = usesStandardSymbols ? angular.identity : replaceInterpolationSymbols;                       // 1971
                                                                                                                       // 1972
    return function createInterimElementService() {                                                                    // 1973
      /*                                                                                                               // 1974
       * @ngdoc service                                                                                                // 1975
       * @name $$interimElement.$service                                                                               // 1976
       *                                                                                                               // 1977
       * @description                                                                                                  // 1978
       * A service used to control inserting and removing an element into the DOM.                                     // 1979
       *                                                                                                               // 1980
       */                                                                                                              // 1981
      var stack = [];                                                                                                  // 1982
      var service;                                                                                                     // 1983
      return service = {                                                                                               // 1984
        show: show,                                                                                                    // 1985
        hide: hide,                                                                                                    // 1986
        cancel: cancel                                                                                                 // 1987
      };                                                                                                               // 1988
                                                                                                                       // 1989
      /*                                                                                                               // 1990
       * @ngdoc method                                                                                                 // 1991
       * @name $$interimElement.$service#show                                                                          // 1992
       * @kind function                                                                                                // 1993
       *                                                                                                               // 1994
       * @description                                                                                                  // 1995
       * Adds the `$interimElement` to the DOM and returns a promise that will be resolved or rejected                 // 1996
       * with hide or cancel, respectively.                                                                            // 1997
       *                                                                                                               // 1998
       * @param {*} options is hashMap of settings                                                                     // 1999
       * @returns a Promise                                                                                            // 2000
       *                                                                                                               // 2001
       */                                                                                                              // 2002
      function show(options) {                                                                                         // 2003
        if (stack.length) {                                                                                            // 2004
          return service.cancel().then(function() {                                                                    // 2005
            return show(options);                                                                                      // 2006
          });                                                                                                          // 2007
        } else {                                                                                                       // 2008
          var interimElement = new InterimElement(options);                                                            // 2009
          stack.push(interimElement);                                                                                  // 2010
          return interimElement.show().then(function() {                                                               // 2011
            return interimElement.deferred.promise;                                                                    // 2012
          });                                                                                                          // 2013
        }                                                                                                              // 2014
      }                                                                                                                // 2015
                                                                                                                       // 2016
      /*                                                                                                               // 2017
       * @ngdoc method                                                                                                 // 2018
       * @name $$interimElement.$service#hide                                                                          // 2019
       * @kind function                                                                                                // 2020
       *                                                                                                               // 2021
       * @description                                                                                                  // 2022
       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`                      // 2023
       *                                                                                                               // 2024
       * @param {*} resolveParam Data to resolve the promise with                                                      // 2025
       * @returns a Promise that will be resolved after the element has been removed.                                  // 2026
       *                                                                                                               // 2027
       */                                                                                                              // 2028
      function hide(response) {                                                                                        // 2029
        var interimElement = stack.shift();                                                                            // 2030
        return interimElement && interimElement.remove().then(function() {                                             // 2031
          interimElement.deferred.resolve(response);                                                                   // 2032
        });                                                                                                            // 2033
      }                                                                                                                // 2034
                                                                                                                       // 2035
      /*                                                                                                               // 2036
       * @ngdoc method                                                                                                 // 2037
       * @name $$interimElement.$service#cancel                                                                        // 2038
       * @kind function                                                                                                // 2039
       *                                                                                                               // 2040
       * @description                                                                                                  // 2041
       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`                       // 2042
       *                                                                                                               // 2043
       * @param {*} reason Data to reject the promise with                                                             // 2044
       * @returns Promise that will be resolved after the element has been removed.                                    // 2045
       *                                                                                                               // 2046
       */                                                                                                              // 2047
      function cancel(reason) {                                                                                        // 2048
        var interimElement = stack.shift();                                                                            // 2049
        return $q.when(interimElement && interimElement.remove().then(function() {                                     // 2050
          interimElement.deferred.reject(reason);                                                                      // 2051
        }));                                                                                                           // 2052
      }                                                                                                                // 2053
                                                                                                                       // 2054
                                                                                                                       // 2055
      /*                                                                                                               // 2056
       * Internal Interim Element Object                                                                               // 2057
       * Used internally to manage the DOM element and related data                                                    // 2058
       */                                                                                                              // 2059
      function InterimElement(options) {                                                                               // 2060
        var self;                                                                                                      // 2061
        var hideTimeout, element, showDone, removeDone;                                                                // 2062
                                                                                                                       // 2063
        options = options || {};                                                                                       // 2064
        options = angular.extend({                                                                                     // 2065
          preserveScope: false,                                                                                        // 2066
          scope: options.scope || $rootScope.$new(options.isolateScope),                                               // 2067
          onShow: function(scope, element, options) {                                                                  // 2068
            return $animate.enter(element, options.parent);                                                            // 2069
          },                                                                                                           // 2070
          onRemove: function(scope, element, options) {                                                                // 2071
            // Element could be undefined if a new element is shown before                                             // 2072
            // the old one finishes compiling.                                                                         // 2073
            return element && $animate.leave(element) || $q.when();                                                    // 2074
          }                                                                                                            // 2075
        }, options);                                                                                                   // 2076
                                                                                                                       // 2077
        if (options.template) {                                                                                        // 2078
          options.template = processTemplate(options.template);                                                        // 2079
        }                                                                                                              // 2080
                                                                                                                       // 2081
        return self = {                                                                                                // 2082
          options: options,                                                                                            // 2083
          deferred: $q.defer(),                                                                                        // 2084
          show: function() {                                                                                           // 2085
            var compilePromise;                                                                                        // 2086
            if (options.skipCompile) {                                                                                 // 2087
              compilePromise = $q(function(resolve) {                                                                  // 2088
                resolve({                                                                                              // 2089
                  locals: {},                                                                                          // 2090
                  link: function() { return options.element; }                                                         // 2091
                });                                                                                                    // 2092
              });                                                                                                      // 2093
            } else {                                                                                                   // 2094
              compilePromise = $mdCompiler.compile(options);                                                           // 2095
            }                                                                                                          // 2096
                                                                                                                       // 2097
            return showDone = compilePromise.then(function(compileData) {                                              // 2098
              angular.extend(compileData.locals, self.options);                                                        // 2099
                                                                                                                       // 2100
              element = compileData.link(options.scope);                                                               // 2101
                                                                                                                       // 2102
              // Search for parent at insertion time, if not specified                                                 // 2103
              if (angular.isFunction(options.parent)) {                                                                // 2104
                options.parent = options.parent(options.scope, element, options);                                      // 2105
              } else if (angular.isString(options.parent)) {                                                           // 2106
                options.parent = angular.element($document[0].querySelector(options.parent));                          // 2107
              }                                                                                                        // 2108
                                                                                                                       // 2109
              // If parent querySelector/getter function fails, or it's just null,                                     // 2110
              // find a default.                                                                                       // 2111
              if (!(options.parent || {}).length) {                                                                    // 2112
                var el;                                                                                                // 2113
                if ($rootElement[0] && $rootElement[0].querySelector) {                                                // 2114
                  el = $rootElement[0].querySelector(':not(svg) > body');                                              // 2115
                }                                                                                                      // 2116
                if (!el) el = $rootElement[0];                                                                         // 2117
                if (el.nodeName == '#comment') {                                                                       // 2118
                  el = $document[0].body;                                                                              // 2119
                }                                                                                                      // 2120
                options.parent = angular.element(el);                                                                  // 2121
              }                                                                                                        // 2122
                                                                                                                       // 2123
              if (options.themable) $mdTheming(element);                                                               // 2124
              var ret = options.onShow(options.scope, element, options);                                               // 2125
              return $q.when(ret)                                                                                      // 2126
                .then(function(){                                                                                      // 2127
                  // Issue onComplete callback when the `show()` finishes                                              // 2128
                  (options.onComplete || angular.noop)(options.scope, element, options);                               // 2129
                  startHideTimeout();                                                                                  // 2130
                });                                                                                                    // 2131
                                                                                                                       // 2132
              function startHideTimeout() {                                                                            // 2133
                if (options.hideDelay) {                                                                               // 2134
                  hideTimeout = $timeout(service.cancel, options.hideDelay) ;                                          // 2135
                }                                                                                                      // 2136
              }                                                                                                        // 2137
            }, function(reason) { showDone = true; self.deferred.reject(reason); });                                   // 2138
          },                                                                                                           // 2139
          cancelTimeout: function() {                                                                                  // 2140
            if (hideTimeout) {                                                                                         // 2141
              $timeout.cancel(hideTimeout);                                                                            // 2142
              hideTimeout = undefined;                                                                                 // 2143
            }                                                                                                          // 2144
          },                                                                                                           // 2145
          remove: function() {                                                                                         // 2146
            self.cancelTimeout();                                                                                      // 2147
            return removeDone = $q.when(showDone).then(function() {                                                    // 2148
              var ret = element ? options.onRemove(options.scope, element, options) : true;                            // 2149
              return $q.when(ret).then(function() {                                                                    // 2150
                if (!options.preserveScope) options.scope.$destroy();                                                  // 2151
                removeDone = true;                                                                                     // 2152
              });                                                                                                      // 2153
            });                                                                                                        // 2154
          }                                                                                                            // 2155
        };                                                                                                             // 2156
      }                                                                                                                // 2157
    };                                                                                                                 // 2158
                                                                                                                       // 2159
    /*                                                                                                                 // 2160
     * Replace `{{` and `}}` in a string (usually a template) with the actual start-/endSymbols used                   // 2161
     * for interpolation. This allows pre-defined templates (for components such as dialog, toast etc)                 // 2162
     * to continue to work in apps that use custom interpolation start-/endSymbols.                                    // 2163
     *                                                                                                                 // 2164
     * @param {string} text The text in which to replace `{{` / `}}`                                                   // 2165
     * @returns {string} The modified string using the actual interpolation start-/endSymbols                          // 2166
     */                                                                                                                // 2167
    function replaceInterpolationSymbols(text) {                                                                       // 2168
      if (!text || !angular.isString(text)) return text;                                                               // 2169
      return text.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                             // 2170
    }                                                                                                                  // 2171
  }                                                                                                                    // 2172
                                                                                                                       // 2173
}                                                                                                                      // 2174
                                                                                                                       // 2175
})();                                                                                                                  // 2176
(function(){                                                                                                           // 2177
"use strict";                                                                                                          // 2178
                                                                                                                       // 2179
  /**                                                                                                                  // 2180
   * @ngdoc module                                                                                                     // 2181
   * @name material.core.componentRegistry                                                                             // 2182
   *                                                                                                                   // 2183
   * @description                                                                                                      // 2184
   * A component instance registration service.                                                                        // 2185
   * Note: currently this as a private service in the SideNav component.                                               // 2186
   */                                                                                                                  // 2187
  angular.module('material.core')                                                                                      // 2188
    .factory('$mdComponentRegistry', ComponentRegistry);                                                               // 2189
                                                                                                                       // 2190
  /*                                                                                                                   // 2191
   * @private                                                                                                          // 2192
   * @ngdoc factory                                                                                                    // 2193
   * @name ComponentRegistry                                                                                           // 2194
   * @module material.core.componentRegistry                                                                           // 2195
   *                                                                                                                   // 2196
   */                                                                                                                  // 2197
  function ComponentRegistry($log, $q) {                                                                               // 2198
                                                                                                                       // 2199
    var self;                                                                                                          // 2200
    var instances = [ ];                                                                                               // 2201
    var pendings = { };                                                                                                // 2202
                                                                                                                       // 2203
    return self = {                                                                                                    // 2204
      /**                                                                                                              // 2205
       * Used to print an error when an instance for a handle isn't found.                                             // 2206
       */                                                                                                              // 2207
      notFoundError: function(handle) {                                                                                // 2208
        $log.error('No instance found for handle', handle);                                                            // 2209
      },                                                                                                               // 2210
      /**                                                                                                              // 2211
       * Return all registered instances as an array.                                                                  // 2212
       */                                                                                                              // 2213
      getInstances: function() {                                                                                       // 2214
        return instances;                                                                                              // 2215
      },                                                                                                               // 2216
                                                                                                                       // 2217
      /**                                                                                                              // 2218
       * Get a registered instance.                                                                                    // 2219
       * @param handle the String handle to look up for a registered instance.                                         // 2220
       */                                                                                                              // 2221
      get: function(handle) {                                                                                          // 2222
        if ( !isValidID(handle) ) return null;                                                                         // 2223
                                                                                                                       // 2224
        var i, j, instance;                                                                                            // 2225
        for(i = 0, j = instances.length; i < j; i++) {                                                                 // 2226
          instance = instances[i];                                                                                     // 2227
          if(instance.$$mdHandle === handle) {                                                                         // 2228
            return instance;                                                                                           // 2229
          }                                                                                                            // 2230
        }                                                                                                              // 2231
        return null;                                                                                                   // 2232
      },                                                                                                               // 2233
                                                                                                                       // 2234
      /**                                                                                                              // 2235
       * Register an instance.                                                                                         // 2236
       * @param instance the instance to register                                                                      // 2237
       * @param handle the handle to identify the instance under.                                                      // 2238
       */                                                                                                              // 2239
      register: function(instance, handle) {                                                                           // 2240
        if ( !handle ) return angular.noop;                                                                            // 2241
                                                                                                                       // 2242
        instance.$$mdHandle = handle;                                                                                  // 2243
        instances.push(instance);                                                                                      // 2244
        resolveWhen();                                                                                                 // 2245
                                                                                                                       // 2246
        return deregister;                                                                                             // 2247
                                                                                                                       // 2248
        /**                                                                                                            // 2249
         * Remove registration for an instance                                                                         // 2250
         */                                                                                                            // 2251
        function deregister() {                                                                                        // 2252
          var index = instances.indexOf(instance);                                                                     // 2253
          if (index !== -1) {                                                                                          // 2254
            instances.splice(index, 1);                                                                                // 2255
          }                                                                                                            // 2256
        }                                                                                                              // 2257
                                                                                                                       // 2258
        /**                                                                                                            // 2259
         * Resolve any pending promises for this instance                                                              // 2260
         */                                                                                                            // 2261
        function resolveWhen() {                                                                                       // 2262
          var dfd = pendings[handle];                                                                                  // 2263
          if ( dfd ) {                                                                                                 // 2264
            dfd.resolve( instance );                                                                                   // 2265
            delete pendings[handle];                                                                                   // 2266
          }                                                                                                            // 2267
        }                                                                                                              // 2268
      },                                                                                                               // 2269
                                                                                                                       // 2270
      /**                                                                                                              // 2271
       * Async accessor to registered component instance                                                               // 2272
       * If not available then a promise is created to notify                                                          // 2273
       * all listeners when the instance is registered.                                                                // 2274
       */                                                                                                              // 2275
      when : function(handle) {                                                                                        // 2276
        if ( isValidID(handle) ) {                                                                                     // 2277
          var deferred = $q.defer();                                                                                   // 2278
          var instance = self.get(handle);                                                                             // 2279
                                                                                                                       // 2280
          if ( instance )  {                                                                                           // 2281
            deferred.resolve( instance );                                                                              // 2282
          } else {                                                                                                     // 2283
            pendings[handle] = deferred;                                                                               // 2284
          }                                                                                                            // 2285
                                                                                                                       // 2286
          return deferred.promise;                                                                                     // 2287
        }                                                                                                              // 2288
        return $q.reject("Invalid `md-component-id` value.");                                                          // 2289
      }                                                                                                                // 2290
                                                                                                                       // 2291
    };                                                                                                                 // 2292
                                                                                                                       // 2293
    function isValidID(handle){                                                                                        // 2294
      return handle && (handle !== "");                                                                                // 2295
    }                                                                                                                  // 2296
                                                                                                                       // 2297
  }                                                                                                                    // 2298
  ComponentRegistry.$inject = ["$log", "$q"];                                                                          // 2299
                                                                                                                       // 2300
})();                                                                                                                  // 2301
(function(){                                                                                                           // 2302
"use strict";                                                                                                          // 2303
                                                                                                                       // 2304
(function() {                                                                                                          // 2305
  'use strict';                                                                                                        // 2306
                                                                                                                       // 2307
  /**                                                                                                                  // 2308
   * @ngdoc service                                                                                                    // 2309
   * @name $mdButtonInkRipple                                                                                          // 2310
   * @module material.core                                                                                             // 2311
   *                                                                                                                   // 2312
   * @description                                                                                                      // 2313
   * Provides ripple effects for md-button.  See $mdInkRipple service for all possible configuration options.          // 2314
   *                                                                                                                   // 2315
   * @param {object=} scope Scope within the current context                                                           // 2316
   * @param {object=} element The element the ripple effect should be applied to                                       // 2317
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 2318
   */                                                                                                                  // 2319
                                                                                                                       // 2320
  angular.module('material.core')                                                                                      // 2321
    .factory('$mdButtonInkRipple', MdButtonInkRipple);                                                                 // 2322
                                                                                                                       // 2323
  function MdButtonInkRipple($mdInkRipple) {                                                                           // 2324
    return {                                                                                                           // 2325
      attach: attach                                                                                                   // 2326
    };                                                                                                                 // 2327
                                                                                                                       // 2328
    function attach(scope, element, options) {                                                                         // 2329
      var elementOptions = optionsForElement(element);                                                                 // 2330
      return $mdInkRipple.attach(scope, element, angular.extend(elementOptions, options));                             // 2331
    };                                                                                                                 // 2332
                                                                                                                       // 2333
    function optionsForElement(element) {                                                                              // 2334
      if (element.hasClass('md-icon-button')) {                                                                        // 2335
        return {                                                                                                       // 2336
          isMenuItem: element.hasClass('md-menu-item'),                                                                // 2337
          fitRipple: true,                                                                                             // 2338
          center: true                                                                                                 // 2339
        };                                                                                                             // 2340
      } else {                                                                                                         // 2341
        return {                                                                                                       // 2342
          isMenuItem: element.hasClass('md-menu-item'),                                                                // 2343
          dimBackground: true                                                                                          // 2344
        }                                                                                                              // 2345
      }                                                                                                                // 2346
    };                                                                                                                 // 2347
  }                                                                                                                    // 2348
  MdButtonInkRipple.$inject = ["$mdInkRipple"];;                                                                       // 2349
})();                                                                                                                  // 2350
                                                                                                                       // 2351
})();                                                                                                                  // 2352
(function(){                                                                                                           // 2353
"use strict";                                                                                                          // 2354
                                                                                                                       // 2355
(function() {                                                                                                          // 2356
  'use strict';                                                                                                        // 2357
                                                                                                                       // 2358
    /**                                                                                                                // 2359
   * @ngdoc service                                                                                                    // 2360
   * @name $mdCheckboxInkRipple                                                                                        // 2361
   * @module material.core                                                                                             // 2362
   *                                                                                                                   // 2363
   * @description                                                                                                      // 2364
   * Provides ripple effects for md-checkbox.  See $mdInkRipple service for all possible configuration options.        // 2365
   *                                                                                                                   // 2366
   * @param {object=} scope Scope within the current context                                                           // 2367
   * @param {object=} element The element the ripple effect should be applied to                                       // 2368
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 2369
   */                                                                                                                  // 2370
                                                                                                                       // 2371
  angular.module('material.core')                                                                                      // 2372
    .factory('$mdCheckboxInkRipple', MdCheckboxInkRipple);                                                             // 2373
                                                                                                                       // 2374
  function MdCheckboxInkRipple($mdInkRipple) {                                                                         // 2375
    return {                                                                                                           // 2376
      attach: attach                                                                                                   // 2377
    };                                                                                                                 // 2378
                                                                                                                       // 2379
    function attach(scope, element, options) {                                                                         // 2380
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 2381
        center: true,                                                                                                  // 2382
        dimBackground: false,                                                                                          // 2383
        fitRipple: true                                                                                                // 2384
      }, options));                                                                                                    // 2385
    };                                                                                                                 // 2386
  }                                                                                                                    // 2387
  MdCheckboxInkRipple.$inject = ["$mdInkRipple"];;                                                                     // 2388
})();                                                                                                                  // 2389
                                                                                                                       // 2390
})();                                                                                                                  // 2391
(function(){                                                                                                           // 2392
"use strict";                                                                                                          // 2393
                                                                                                                       // 2394
(function() {                                                                                                          // 2395
  'use strict';                                                                                                        // 2396
                                                                                                                       // 2397
  /**                                                                                                                  // 2398
   * @ngdoc service                                                                                                    // 2399
   * @name $mdListInkRipple                                                                                            // 2400
   * @module material.core                                                                                             // 2401
   *                                                                                                                   // 2402
   * @description                                                                                                      // 2403
   * Provides ripple effects for md-list.  See $mdInkRipple service for all possible configuration options.            // 2404
   *                                                                                                                   // 2405
   * @param {object=} scope Scope within the current context                                                           // 2406
   * @param {object=} element The element the ripple effect should be applied to                                       // 2407
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 2408
   */                                                                                                                  // 2409
                                                                                                                       // 2410
  angular.module('material.core')                                                                                      // 2411
    .factory('$mdListInkRipple', MdListInkRipple);                                                                     // 2412
                                                                                                                       // 2413
  function MdListInkRipple($mdInkRipple) {                                                                             // 2414
    return {                                                                                                           // 2415
      attach: attach                                                                                                   // 2416
    };                                                                                                                 // 2417
                                                                                                                       // 2418
    function attach(scope, element, options) {                                                                         // 2419
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 2420
        center: false,                                                                                                 // 2421
        dimBackground: true,                                                                                           // 2422
        outline: false,                                                                                                // 2423
        rippleSize: 'full'                                                                                             // 2424
      }, options));                                                                                                    // 2425
    };                                                                                                                 // 2426
  }                                                                                                                    // 2427
  MdListInkRipple.$inject = ["$mdInkRipple"];;                                                                         // 2428
})();                                                                                                                  // 2429
                                                                                                                       // 2430
})();                                                                                                                  // 2431
(function(){                                                                                                           // 2432
"use strict";                                                                                                          // 2433
                                                                                                                       // 2434
angular.module('material.core')                                                                                        // 2435
  .factory('$mdInkRipple', InkRippleService)                                                                           // 2436
  .directive('mdInkRipple', InkRippleDirective)                                                                        // 2437
  .directive('mdNoInk', attrNoDirective())                                                                             // 2438
  .directive('mdNoBar', attrNoDirective())                                                                             // 2439
  .directive('mdNoStretch', attrNoDirective());                                                                        // 2440
                                                                                                                       // 2441
function InkRippleDirective($mdButtonInkRipple, $mdCheckboxInkRipple) {                                                // 2442
  return {                                                                                                             // 2443
    controller: angular.noop,                                                                                          // 2444
    link: function (scope, element, attr) {                                                                            // 2445
      if (attr.hasOwnProperty('mdInkRippleCheckbox')) {                                                                // 2446
        $mdCheckboxInkRipple.attach(scope, element);                                                                   // 2447
      } else {                                                                                                         // 2448
        $mdButtonInkRipple.attach(scope, element);                                                                     // 2449
      }                                                                                                                // 2450
    }                                                                                                                  // 2451
  };                                                                                                                   // 2452
}                                                                                                                      // 2453
InkRippleDirective.$inject = ["$mdButtonInkRipple", "$mdCheckboxInkRipple"];                                           // 2454
                                                                                                                       // 2455
function InkRippleService($window, $timeout) {                                                                         // 2456
                                                                                                                       // 2457
  return {                                                                                                             // 2458
    attach: attach                                                                                                     // 2459
  };                                                                                                                   // 2460
                                                                                                                       // 2461
  function attach(scope, element, options) {                                                                           // 2462
    if (element.controller('mdNoInk')) return angular.noop;                                                            // 2463
                                                                                                                       // 2464
    options = angular.extend({                                                                                         // 2465
      colorElement: element,                                                                                           // 2466
      mousedown: true,                                                                                                 // 2467
      hover: true,                                                                                                     // 2468
      focus: true,                                                                                                     // 2469
      center: false,                                                                                                   // 2470
      mousedownPauseTime: 150,                                                                                         // 2471
      dimBackground: false,                                                                                            // 2472
      outline: false,                                                                                                  // 2473
      fullRipple: true,                                                                                                // 2474
      isMenuItem: false,                                                                                               // 2475
      fitRipple: false                                                                                                 // 2476
    }, options);                                                                                                       // 2477
                                                                                                                       // 2478
    var rippleSize,                                                                                                    // 2479
        controller = element.controller('mdInkRipple') || {},                                                          // 2480
        counter = 0,                                                                                                   // 2481
        ripples = [],                                                                                                  // 2482
        states = [],                                                                                                   // 2483
        isActiveExpr = element.attr('md-highlight'),                                                                   // 2484
        isActive = false,                                                                                              // 2485
        isHeld = false,                                                                                                // 2486
        node = element[0],                                                                                             // 2487
        rippleSizeSetting = element.attr('md-ripple-size'),                                                            // 2488
        color = parseColor(element.attr('md-ink-ripple')) || parseColor(options.colorElement.length && $window.getComputedStyle(options.colorElement[0]).color || 'rgb(0, 0, 0)');
                                                                                                                       // 2490
    switch (rippleSizeSetting) {                                                                                       // 2491
      case 'full':                                                                                                     // 2492
        options.fullRipple = true;                                                                                     // 2493
        break;                                                                                                         // 2494
      case 'partial':                                                                                                  // 2495
        options.fullRipple = false;                                                                                    // 2496
        break;                                                                                                         // 2497
    }                                                                                                                  // 2498
                                                                                                                       // 2499
    // expose onInput for ripple testing                                                                               // 2500
    if (options.mousedown) {                                                                                           // 2501
      element.on('$md.pressdown', onPressDown)                                                                         // 2502
        .on('$md.pressup', onPressUp);                                                                                 // 2503
    }                                                                                                                  // 2504
                                                                                                                       // 2505
    controller.createRipple = createRipple;                                                                            // 2506
                                                                                                                       // 2507
    if (isActiveExpr) {                                                                                                // 2508
      scope.$watch(isActiveExpr, function watchActive(newValue) {                                                      // 2509
        isActive = newValue;                                                                                           // 2510
        if (isActive && !ripples.length) {                                                                             // 2511
          $timeout(function () { createRipple(0, 0); }, 0, false);                                                     // 2512
        }                                                                                                              // 2513
        angular.forEach(ripples, updateElement);                                                                       // 2514
      });                                                                                                              // 2515
    }                                                                                                                  // 2516
                                                                                                                       // 2517
    // Publish self-detach method if desired...                                                                        // 2518
    return function detach() {                                                                                         // 2519
      element.off('$md.pressdown', onPressDown)                                                                        // 2520
        .off('$md.pressup', onPressUp);                                                                                // 2521
      getRippleContainer().remove();                                                                                   // 2522
    };                                                                                                                 // 2523
                                                                                                                       // 2524
    /**                                                                                                                // 2525
     * Gets the current ripple container                                                                               // 2526
     * If there is no ripple container, it creates one and returns it                                                  // 2527
     *                                                                                                                 // 2528
     * @returns {angular.element} ripple container element                                                             // 2529
     */                                                                                                                // 2530
    function getRippleContainer() {                                                                                    // 2531
      var container = element.data('$mdRippleContainer');                                                              // 2532
      if (container) return container;                                                                                 // 2533
      container = angular.element('<div class="md-ripple-container">');                                                // 2534
      element.append(container);                                                                                       // 2535
      element.data('$mdRippleContainer', container);                                                                   // 2536
      return container;                                                                                                // 2537
    }                                                                                                                  // 2538
                                                                                                                       // 2539
    function parseColor(color) {                                                                                       // 2540
      if (!color) return;                                                                                              // 2541
      if (color.indexOf('rgba') === 0) return color.replace(/\d?\.?\d*\s*\)\s*$/, '0.1)');                             // 2542
      if (color.indexOf('rgb')  === 0) return rgbToRGBA(color);                                                        // 2543
      if (color.indexOf('#')    === 0) return hexToRGBA(color);                                                        // 2544
                                                                                                                       // 2545
      /**                                                                                                              // 2546
       * Converts a hex value to an rgba string                                                                        // 2547
       *                                                                                                               // 2548
       * @param {string} hex value (3 or 6 digits) to be converted                                                     // 2549
       *                                                                                                               // 2550
       * @returns {string} rgba color with 0.1 alpha                                                                   // 2551
       */                                                                                                              // 2552
      function hexToRGBA(color) {                                                                                      // 2553
        var hex = color.charAt(0) === '#' ? color.substr(1) : color,                                                   // 2554
          dig = hex.length / 3,                                                                                        // 2555
          red = hex.substr(0, dig),                                                                                    // 2556
          grn = hex.substr(dig, dig),                                                                                  // 2557
          blu = hex.substr(dig * 2);                                                                                   // 2558
        if (dig === 1) {                                                                                               // 2559
          red += red;                                                                                                  // 2560
          grn += grn;                                                                                                  // 2561
          blu += blu;                                                                                                  // 2562
        }                                                                                                              // 2563
        return 'rgba(' + parseInt(red, 16) + ',' + parseInt(grn, 16) + ',' + parseInt(blu, 16) + ',0.1)';              // 2564
      }                                                                                                                // 2565
                                                                                                                       // 2566
      /**                                                                                                              // 2567
       * Converts rgb value to rgba string                                                                             // 2568
       *                                                                                                               // 2569
       * @param {string} rgb color string                                                                              // 2570
       *                                                                                                               // 2571
       * @returns {string} rgba color with 0.1 alpha                                                                   // 2572
       */                                                                                                              // 2573
      function rgbToRGBA(color) {                                                                                      // 2574
        return color.replace(')', ', 0.1)').replace('(', 'a(');                                                        // 2575
      }                                                                                                                // 2576
                                                                                                                       // 2577
    }                                                                                                                  // 2578
                                                                                                                       // 2579
    function removeElement(elem, wait) {                                                                               // 2580
      ripples.splice(ripples.indexOf(elem), 1);                                                                        // 2581
      if (ripples.length === 0) {                                                                                      // 2582
        getRippleContainer().css({ backgroundColor: '' });                                                             // 2583
      }                                                                                                                // 2584
      $timeout(function () { elem.remove(); }, wait, false);                                                           // 2585
    }                                                                                                                  // 2586
                                                                                                                       // 2587
    function updateElement(elem) {                                                                                     // 2588
      var index = ripples.indexOf(elem),                                                                               // 2589
          state = states[index] || {},                                                                                 // 2590
          elemIsActive = ripples.length > 1 ? false : isActive,                                                        // 2591
          elemIsHeld   = ripples.length > 1 ? false : isHeld;                                                          // 2592
      if (elemIsActive || state.animating || elemIsHeld) {                                                             // 2593
        elem.addClass('md-ripple-visible');                                                                            // 2594
      } else if (elem) {                                                                                               // 2595
        elem.removeClass('md-ripple-visible');                                                                         // 2596
        if (options.outline) {                                                                                         // 2597
          elem.css({                                                                                                   // 2598
            width: rippleSize + 'px',                                                                                  // 2599
            height: rippleSize + 'px',                                                                                 // 2600
            marginLeft: (rippleSize * -1) + 'px',                                                                      // 2601
            marginTop: (rippleSize * -1) + 'px'                                                                        // 2602
          });                                                                                                          // 2603
        }                                                                                                              // 2604
        removeElement(elem, options.outline ? 450 : 650);                                                              // 2605
      }                                                                                                                // 2606
    }                                                                                                                  // 2607
                                                                                                                       // 2608
    /**                                                                                                                // 2609
     * Creates a ripple at the provided coordinates                                                                    // 2610
     *                                                                                                                 // 2611
     * @param {number} left cursor position                                                                            // 2612
     * @param {number} top cursor position                                                                             // 2613
     *                                                                                                                 // 2614
     * @returns {angular.element} the generated ripple element                                                         // 2615
     */                                                                                                                // 2616
    function createRipple(left, top) {                                                                                 // 2617
                                                                                                                       // 2618
      color = parseColor(element.attr('md-ink-ripple')) || parseColor($window.getComputedStyle(options.colorElement[0]).color || 'rgb(0, 0, 0)');
                                                                                                                       // 2620
      var container = getRippleContainer(),                                                                            // 2621
          size = getRippleSize(left, top),                                                                             // 2622
          css = getRippleCss(size, left, top),                                                                         // 2623
          elem = getRippleElement(css),                                                                                // 2624
          index = ripples.indexOf(elem),                                                                               // 2625
          state = states[index] || {};                                                                                 // 2626
                                                                                                                       // 2627
      rippleSize = size;                                                                                               // 2628
                                                                                                                       // 2629
      state.animating = true;                                                                                          // 2630
                                                                                                                       // 2631
      $timeout(function () {                                                                                           // 2632
        if (options.dimBackground) {                                                                                   // 2633
          container.css({ backgroundColor: color });                                                                   // 2634
        }                                                                                                              // 2635
        elem.addClass('md-ripple-placed md-ripple-scaled');                                                            // 2636
        if (options.outline) {                                                                                         // 2637
          elem.css({                                                                                                   // 2638
            borderWidth: (size * 0.5) + 'px',                                                                          // 2639
            marginLeft: (size * -0.5) + 'px',                                                                          // 2640
            marginTop: (size * -0.5) + 'px'                                                                            // 2641
          });                                                                                                          // 2642
        } else {                                                                                                       // 2643
          elem.css({ left: '50%', top: '50%' });                                                                       // 2644
        }                                                                                                              // 2645
        updateElement(elem);                                                                                           // 2646
        $timeout(function () {                                                                                         // 2647
          state.animating = false;                                                                                     // 2648
          updateElement(elem);                                                                                         // 2649
        }, (options.outline ? 450 : 225), false);                                                                      // 2650
      }, 0, false);                                                                                                    // 2651
                                                                                                                       // 2652
      return elem;                                                                                                     // 2653
                                                                                                                       // 2654
      /**                                                                                                              // 2655
       * Creates the ripple element with the provided css                                                              // 2656
       *                                                                                                               // 2657
       * @param {object} css properties to be applied                                                                  // 2658
       *                                                                                                               // 2659
       * @returns {angular.element} the generated ripple element                                                       // 2660
       */                                                                                                              // 2661
      function getRippleElement(css) {                                                                                 // 2662
        var elem = angular.element('<div class="md-ripple" data-counter="' + counter++ + '">');                        // 2663
        ripples.unshift(elem);                                                                                         // 2664
        states.unshift({ animating: true });                                                                           // 2665
        container.append(elem);                                                                                        // 2666
        css && elem.css(css);                                                                                          // 2667
        return elem;                                                                                                   // 2668
      }                                                                                                                // 2669
                                                                                                                       // 2670
      /**                                                                                                              // 2671
       * Calculate the ripple size                                                                                     // 2672
       *                                                                                                               // 2673
       * @returns {number} calculated ripple diameter                                                                  // 2674
       */                                                                                                              // 2675
      function getRippleSize(left, top) {                                                                              // 2676
        var width = container.prop('offsetWidth'),                                                                     // 2677
            height = container.prop('offsetHeight'),                                                                   // 2678
            multiplier, size, rect;                                                                                    // 2679
        if (options.isMenuItem) {                                                                                      // 2680
          size = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));                                                  // 2681
        } else if (options.outline) {                                                                                  // 2682
          rect = node.getBoundingClientRect();                                                                         // 2683
          left -= rect.left;                                                                                           // 2684
          top -= rect.top;                                                                                             // 2685
          width = Math.max(left, width - left);                                                                        // 2686
          height = Math.max(top, height - top);                                                                        // 2687
          size = 2 * Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));                                              // 2688
        } else {                                                                                                       // 2689
          multiplier = options.fullRipple ? 1.1 : 0.8;                                                                 // 2690
          size = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2)) * multiplier;                                     // 2691
          if (options.fitRipple) {                                                                                     // 2692
            size = Math.min(height, width, size);                                                                      // 2693
          }                                                                                                            // 2694
        }                                                                                                              // 2695
        return size;                                                                                                   // 2696
      }                                                                                                                // 2697
                                                                                                                       // 2698
      /**                                                                                                              // 2699
       * Generates the ripple css                                                                                      // 2700
       *                                                                                                               // 2701
       * @param {number} the diameter of the ripple                                                                    // 2702
       * @param {number} the left cursor offset                                                                        // 2703
       * @param {number} the top cursor offset                                                                         // 2704
       *                                                                                                               // 2705
       * @returns {{backgroundColor: string, borderColor: string, width: string, height: string}}                      // 2706
       */                                                                                                              // 2707
      function getRippleCss(size, left, top) {                                                                         // 2708
        var rect = node.getBoundingClientRect(),                                                                       // 2709
            css  = {                                                                                                   // 2710
              backgroundColor: rgbaToRGB(color),                                                                       // 2711
              borderColor: rgbaToRGB(color),                                                                           // 2712
              width: size + 'px',                                                                                      // 2713
              height: size + 'px'                                                                                      // 2714
            };                                                                                                         // 2715
                                                                                                                       // 2716
        if (options.outline) {                                                                                         // 2717
          css.width = 0;                                                                                               // 2718
          css.height = 0;                                                                                              // 2719
        } else {                                                                                                       // 2720
          css.marginLeft = css.marginTop = (size * -0.5) + 'px';                                                       // 2721
        }                                                                                                              // 2722
                                                                                                                       // 2723
        if (options.center) {                                                                                          // 2724
          css.left = css.top = '50%';                                                                                  // 2725
        } else {                                                                                                       // 2726
          css.left = Math.round((left - rect.left) / container.prop('offsetWidth') * 100) + '%';                       // 2727
          css.top = Math.round((top - rect.top) / container.prop('offsetHeight') * 100) + '%';                         // 2728
        }                                                                                                              // 2729
                                                                                                                       // 2730
        return css;                                                                                                    // 2731
                                                                                                                       // 2732
        /**                                                                                                            // 2733
         * Converts rgba string to rgb, removing the alpha value                                                       // 2734
         *                                                                                                             // 2735
         * @param {string} rgba color                                                                                  // 2736
         *                                                                                                             // 2737
         * @returns {string} rgb color                                                                                 // 2738
         */                                                                                                            // 2739
        function rgbaToRGB(color) {                                                                                    // 2740
          return color.replace('rgba', 'rgb').replace(/,[^\),]+\)/, ')');                                              // 2741
        }                                                                                                              // 2742
      }                                                                                                                // 2743
    }                                                                                                                  // 2744
                                                                                                                       // 2745
    /**                                                                                                                // 2746
     * Handles user input start and stop events                                                                        // 2747
     *                                                                                                                 // 2748
     */                                                                                                                // 2749
    function onPressDown(ev) {                                                                                         // 2750
      if (!isRippleAllowed()) return;                                                                                  // 2751
                                                                                                                       // 2752
      createRipple(ev.pointer.x, ev.pointer.y);                                                                        // 2753
      isHeld = true;                                                                                                   // 2754
    }                                                                                                                  // 2755
    function onPressUp() {                                                                                             // 2756
      isHeld = false;                                                                                                  // 2757
      var ripple = ripples[ ripples.length - 1 ];                                                                      // 2758
      $timeout(function () { updateElement(ripple); }, 0, false);                                                      // 2759
    }                                                                                                                  // 2760
                                                                                                                       // 2761
    /**                                                                                                                // 2762
     * Determines if the ripple is allowed                                                                             // 2763
     *                                                                                                                 // 2764
     * @returns {boolean} true if the ripple is allowed, false if not                                                  // 2765
     */                                                                                                                // 2766
    function isRippleAllowed() {                                                                                       // 2767
      var parent = node.parentNode;                                                                                    // 2768
      var grandparent = parent && parent.parentNode;                                                                   // 2769
      var ancestor = grandparent && grandparent.parentNode;                                                            // 2770
      return !isDisabled(node) && !isDisabled(parent) && !isDisabled(grandparent) && !isDisabled(ancestor);            // 2771
      function isDisabled (elem) {                                                                                     // 2772
        return elem && elem.hasAttribute && elem.hasAttribute('disabled');                                             // 2773
      }                                                                                                                // 2774
    }                                                                                                                  // 2775
                                                                                                                       // 2776
  }                                                                                                                    // 2777
}                                                                                                                      // 2778
InkRippleService.$inject = ["$window", "$timeout"];                                                                    // 2779
                                                                                                                       // 2780
/**                                                                                                                    // 2781
 * noink/nobar/nostretch directive: make any element that has one of                                                   // 2782
 * these attributes be given a controller, so that other directives can                                                // 2783
 * `require:` these and see if there is a `no<xxx>` parent attribute.                                                  // 2784
 *                                                                                                                     // 2785
 * @usage                                                                                                              // 2786
 * <hljs lang="html">                                                                                                  // 2787
 * <parent md-no-ink>                                                                                                  // 2788
 *   <child detect-no>                                                                                                 // 2789
 *   </child>                                                                                                          // 2790
 * </parent>                                                                                                           // 2791
 * </hljs>                                                                                                             // 2792
 *                                                                                                                     // 2793
 * <hljs lang="js">                                                                                                    // 2794
 * myApp.directive('detectNo', function() {                                                                            // 2795
 *   return {                                                                                                          // 2796
 *     require: ['^?mdNoInk', ^?mdNoBar'],                                                                             // 2797
 *     link: function(scope, element, attr, ctrls) {                                                                   // 2798
 *       var noinkCtrl = ctrls[0];                                                                                     // 2799
 *       var nobarCtrl = ctrls[1];                                                                                     // 2800
 *       if (noInkCtrl) {                                                                                              // 2801
 *         alert("the md-no-ink flag has been specified on an ancestor!");                                             // 2802
 *       }                                                                                                             // 2803
 *       if (nobarCtrl) {                                                                                              // 2804
 *         alert("the md-no-bar flag has been specified on an ancestor!");                                             // 2805
 *       }                                                                                                             // 2806
 *     }                                                                                                               // 2807
 *   };                                                                                                                // 2808
 * });                                                                                                                 // 2809
 * </hljs>                                                                                                             // 2810
 */                                                                                                                    // 2811
function attrNoDirective() {                                                                                           // 2812
  return function() {                                                                                                  // 2813
    return {                                                                                                           // 2814
      controller: angular.noop                                                                                         // 2815
    };                                                                                                                 // 2816
  };                                                                                                                   // 2817
}                                                                                                                      // 2818
                                                                                                                       // 2819
})();                                                                                                                  // 2820
(function(){                                                                                                           // 2821
"use strict";                                                                                                          // 2822
                                                                                                                       // 2823
(function() {                                                                                                          // 2824
  'use strict';                                                                                                        // 2825
                                                                                                                       // 2826
    /**                                                                                                                // 2827
   * @ngdoc service                                                                                                    // 2828
   * @name $mdTabInkRipple                                                                                             // 2829
   * @module material.core                                                                                             // 2830
   *                                                                                                                   // 2831
   * @description                                                                                                      // 2832
   * Provides ripple effects for md-tabs.  See $mdInkRipple service for all possible configuration options.            // 2833
   *                                                                                                                   // 2834
   * @param {object=} scope Scope within the current context                                                           // 2835
   * @param {object=} element The element the ripple effect should be applied to                                       // 2836
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 2837
   */                                                                                                                  // 2838
                                                                                                                       // 2839
  angular.module('material.core')                                                                                      // 2840
    .factory('$mdTabInkRipple', MdTabInkRipple);                                                                       // 2841
                                                                                                                       // 2842
  function MdTabInkRipple($mdInkRipple) {                                                                              // 2843
    return {                                                                                                           // 2844
      attach: attach                                                                                                   // 2845
    };                                                                                                                 // 2846
                                                                                                                       // 2847
    function attach(scope, element, options) {                                                                         // 2848
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 2849
        center: false,                                                                                                 // 2850
        dimBackground: true,                                                                                           // 2851
        outline: false,                                                                                                // 2852
        rippleSize: 'full'                                                                                             // 2853
      }, options));                                                                                                    // 2854
    };                                                                                                                 // 2855
  }                                                                                                                    // 2856
  MdTabInkRipple.$inject = ["$mdInkRipple"];;                                                                          // 2857
})();                                                                                                                  // 2858
                                                                                                                       // 2859
})();                                                                                                                  // 2860
(function(){                                                                                                           // 2861
"use strict";                                                                                                          // 2862
                                                                                                                       // 2863
angular.module('material.core.theming.palette', [])                                                                    // 2864
.constant('$mdColorPalette', {                                                                                         // 2865
  'red': {                                                                                                             // 2866
    '50': '#ffebee',                                                                                                   // 2867
    '100': '#ffcdd2',                                                                                                  // 2868
    '200': '#ef9a9a',                                                                                                  // 2869
    '300': '#e57373',                                                                                                  // 2870
    '400': '#ef5350',                                                                                                  // 2871
    '500': '#f44336',                                                                                                  // 2872
    '600': '#e53935',                                                                                                  // 2873
    '700': '#d32f2f',                                                                                                  // 2874
    '800': '#c62828',                                                                                                  // 2875
    '900': '#b71c1c',                                                                                                  // 2876
    'A100': '#ff8a80',                                                                                                 // 2877
    'A200': '#ff5252',                                                                                                 // 2878
    'A400': '#ff1744',                                                                                                 // 2879
    'A700': '#d50000',                                                                                                 // 2880
    'contrastDefaultColor': 'light',                                                                                   // 2881
    'contrastDarkColors': '50 100 200 300 400 A100',                                                                   // 2882
    'contrastStrongLightColors': '500 600 700 A200 A400 A700'                                                          // 2883
  },                                                                                                                   // 2884
  'pink': {                                                                                                            // 2885
    '50': '#fce4ec',                                                                                                   // 2886
    '100': '#f8bbd0',                                                                                                  // 2887
    '200': '#f48fb1',                                                                                                  // 2888
    '300': '#f06292',                                                                                                  // 2889
    '400': '#ec407a',                                                                                                  // 2890
    '500': '#e91e63',                                                                                                  // 2891
    '600': '#d81b60',                                                                                                  // 2892
    '700': '#c2185b',                                                                                                  // 2893
    '800': '#ad1457',                                                                                                  // 2894
    '900': '#880e4f',                                                                                                  // 2895
    'A100': '#ff80ab',                                                                                                 // 2896
    'A200': '#ff4081',                                                                                                 // 2897
    'A400': '#f50057',                                                                                                 // 2898
    'A700': '#c51162',                                                                                                 // 2899
    'contrastDefaultColor': 'light',                                                                                   // 2900
    'contrastDarkColors': '50 100 200 300 400 A100',                                                                   // 2901
    'contrastStrongLightColors': '500 600 A200 A400 A700'                                                              // 2902
  },                                                                                                                   // 2903
  'purple': {                                                                                                          // 2904
    '50': '#f3e5f5',                                                                                                   // 2905
    '100': '#e1bee7',                                                                                                  // 2906
    '200': '#ce93d8',                                                                                                  // 2907
    '300': '#ba68c8',                                                                                                  // 2908
    '400': '#ab47bc',                                                                                                  // 2909
    '500': '#9c27b0',                                                                                                  // 2910
    '600': '#8e24aa',                                                                                                  // 2911
    '700': '#7b1fa2',                                                                                                  // 2912
    '800': '#6a1b9a',                                                                                                  // 2913
    '900': '#4a148c',                                                                                                  // 2914
    'A100': '#ea80fc',                                                                                                 // 2915
    'A200': '#e040fb',                                                                                                 // 2916
    'A400': '#d500f9',                                                                                                 // 2917
    'A700': '#aa00ff',                                                                                                 // 2918
    'contrastDefaultColor': 'light',                                                                                   // 2919
    'contrastDarkColors': '50 100 200 A100',                                                                           // 2920
    'contrastStrongLightColors': '300 400 A200 A400 A700'                                                              // 2921
  },                                                                                                                   // 2922
  'deep-purple': {                                                                                                     // 2923
    '50': '#ede7f6',                                                                                                   // 2924
    '100': '#d1c4e9',                                                                                                  // 2925
    '200': '#b39ddb',                                                                                                  // 2926
    '300': '#9575cd',                                                                                                  // 2927
    '400': '#7e57c2',                                                                                                  // 2928
    '500': '#673ab7',                                                                                                  // 2929
    '600': '#5e35b1',                                                                                                  // 2930
    '700': '#512da8',                                                                                                  // 2931
    '800': '#4527a0',                                                                                                  // 2932
    '900': '#311b92',                                                                                                  // 2933
    'A100': '#b388ff',                                                                                                 // 2934
    'A200': '#7c4dff',                                                                                                 // 2935
    'A400': '#651fff',                                                                                                 // 2936
    'A700': '#6200ea',                                                                                                 // 2937
    'contrastDefaultColor': 'light',                                                                                   // 2938
    'contrastDarkColors': '50 100 200 A100',                                                                           // 2939
    'contrastStrongLightColors': '300 400 A200'                                                                        // 2940
  },                                                                                                                   // 2941
  'indigo': {                                                                                                          // 2942
    '50': '#e8eaf6',                                                                                                   // 2943
    '100': '#c5cae9',                                                                                                  // 2944
    '200': '#9fa8da',                                                                                                  // 2945
    '300': '#7986cb',                                                                                                  // 2946
    '400': '#5c6bc0',                                                                                                  // 2947
    '500': '#3f51b5',                                                                                                  // 2948
    '600': '#3949ab',                                                                                                  // 2949
    '700': '#303f9f',                                                                                                  // 2950
    '800': '#283593',                                                                                                  // 2951
    '900': '#1a237e',                                                                                                  // 2952
    'A100': '#8c9eff',                                                                                                 // 2953
    'A200': '#536dfe',                                                                                                 // 2954
    'A400': '#3d5afe',                                                                                                 // 2955
    'A700': '#304ffe',                                                                                                 // 2956
    'contrastDefaultColor': 'light',                                                                                   // 2957
    'contrastDarkColors': '50 100 200 A100',                                                                           // 2958
    'contrastStrongLightColors': '300 400 A200 A400'                                                                   // 2959
  },                                                                                                                   // 2960
  'blue': {                                                                                                            // 2961
    '50': '#e3f2fd',                                                                                                   // 2962
    '100': '#bbdefb',                                                                                                  // 2963
    '200': '#90caf9',                                                                                                  // 2964
    '300': '#64b5f6',                                                                                                  // 2965
    '400': '#42a5f5',                                                                                                  // 2966
    '500': '#2196f3',                                                                                                  // 2967
    '600': '#1e88e5',                                                                                                  // 2968
    '700': '#1976d2',                                                                                                  // 2969
    '800': '#1565c0',                                                                                                  // 2970
    '900': '#0d47a1',                                                                                                  // 2971
    'A100': '#82b1ff',                                                                                                 // 2972
    'A200': '#448aff',                                                                                                 // 2973
    'A400': '#2979ff',                                                                                                 // 2974
    'A700': '#2962ff',                                                                                                 // 2975
    'contrastDefaultColor': 'light',                                                                                   // 2976
    'contrastDarkColors': '100 200 300 400 A100',                                                                      // 2977
    'contrastStrongLightColors': '500 600 700 A200 A400 A700'                                                          // 2978
  },                                                                                                                   // 2979
  'light-blue': {                                                                                                      // 2980
    '50': '#e1f5fe',                                                                                                   // 2981
    '100': '#b3e5fc',                                                                                                  // 2982
    '200': '#81d4fa',                                                                                                  // 2983
    '300': '#4fc3f7',                                                                                                  // 2984
    '400': '#29b6f6',                                                                                                  // 2985
    '500': '#03a9f4',                                                                                                  // 2986
    '600': '#039be5',                                                                                                  // 2987
    '700': '#0288d1',                                                                                                  // 2988
    '800': '#0277bd',                                                                                                  // 2989
    '900': '#01579b',                                                                                                  // 2990
    'A100': '#80d8ff',                                                                                                 // 2991
    'A200': '#40c4ff',                                                                                                 // 2992
    'A400': '#00b0ff',                                                                                                 // 2993
    'A700': '#0091ea',                                                                                                 // 2994
    'contrastDefaultColor': 'dark',                                                                                    // 2995
    'contrastLightColors': '500 600 700 800 900 A700',                                                                 // 2996
    'contrastStrongLightColors': '500 600 700 800 A700'                                                                // 2997
  },                                                                                                                   // 2998
  'cyan': {                                                                                                            // 2999
    '50': '#e0f7fa',                                                                                                   // 3000
    '100': '#b2ebf2',                                                                                                  // 3001
    '200': '#80deea',                                                                                                  // 3002
    '300': '#4dd0e1',                                                                                                  // 3003
    '400': '#26c6da',                                                                                                  // 3004
    '500': '#00bcd4',                                                                                                  // 3005
    '600': '#00acc1',                                                                                                  // 3006
    '700': '#0097a7',                                                                                                  // 3007
    '800': '#00838f',                                                                                                  // 3008
    '900': '#006064',                                                                                                  // 3009
    'A100': '#84ffff',                                                                                                 // 3010
    'A200': '#18ffff',                                                                                                 // 3011
    'A400': '#00e5ff',                                                                                                 // 3012
    'A700': '#00b8d4',                                                                                                 // 3013
    'contrastDefaultColor': 'dark',                                                                                    // 3014
    'contrastLightColors': '500 600 700 800 900',                                                                      // 3015
    'contrastStrongLightColors': '500 600 700 800'                                                                     // 3016
  },                                                                                                                   // 3017
  'teal': {                                                                                                            // 3018
    '50': '#e0f2f1',                                                                                                   // 3019
    '100': '#b2dfdb',                                                                                                  // 3020
    '200': '#80cbc4',                                                                                                  // 3021
    '300': '#4db6ac',                                                                                                  // 3022
    '400': '#26a69a',                                                                                                  // 3023
    '500': '#009688',                                                                                                  // 3024
    '600': '#00897b',                                                                                                  // 3025
    '700': '#00796b',                                                                                                  // 3026
    '800': '#00695c',                                                                                                  // 3027
    '900': '#004d40',                                                                                                  // 3028
    'A100': '#a7ffeb',                                                                                                 // 3029
    'A200': '#64ffda',                                                                                                 // 3030
    'A400': '#1de9b6',                                                                                                 // 3031
    'A700': '#00bfa5',                                                                                                 // 3032
    'contrastDefaultColor': 'dark',                                                                                    // 3033
    'contrastLightColors': '500 600 700 800 900',                                                                      // 3034
    'contrastStrongLightColors': '500 600 700'                                                                         // 3035
  },                                                                                                                   // 3036
  'green': {                                                                                                           // 3037
    '50': '#e8f5e9',                                                                                                   // 3038
    '100': '#c8e6c9',                                                                                                  // 3039
    '200': '#a5d6a7',                                                                                                  // 3040
    '300': '#81c784',                                                                                                  // 3041
    '400': '#66bb6a',                                                                                                  // 3042
    '500': '#4caf50',                                                                                                  // 3043
    '600': '#43a047',                                                                                                  // 3044
    '700': '#388e3c',                                                                                                  // 3045
    '800': '#2e7d32',                                                                                                  // 3046
    '900': '#1b5e20',                                                                                                  // 3047
    'A100': '#b9f6ca',                                                                                                 // 3048
    'A200': '#69f0ae',                                                                                                 // 3049
    'A400': '#00e676',                                                                                                 // 3050
    'A700': '#00c853',                                                                                                 // 3051
    'contrastDefaultColor': 'dark',                                                                                    // 3052
    'contrastLightColors': '500 600 700 800 900',                                                                      // 3053
    'contrastStrongLightColors': '500 600 700'                                                                         // 3054
  },                                                                                                                   // 3055
  'light-green': {                                                                                                     // 3056
    '50': '#f1f8e9',                                                                                                   // 3057
    '100': '#dcedc8',                                                                                                  // 3058
    '200': '#c5e1a5',                                                                                                  // 3059
    '300': '#aed581',                                                                                                  // 3060
    '400': '#9ccc65',                                                                                                  // 3061
    '500': '#8bc34a',                                                                                                  // 3062
    '600': '#7cb342',                                                                                                  // 3063
    '700': '#689f38',                                                                                                  // 3064
    '800': '#558b2f',                                                                                                  // 3065
    '900': '#33691e',                                                                                                  // 3066
    'A100': '#ccff90',                                                                                                 // 3067
    'A200': '#b2ff59',                                                                                                 // 3068
    'A400': '#76ff03',                                                                                                 // 3069
    'A700': '#64dd17',                                                                                                 // 3070
    'contrastDefaultColor': 'dark',                                                                                    // 3071
    'contrastLightColors': '800 900',                                                                                  // 3072
    'contrastStrongLightColors': '800 900'                                                                             // 3073
  },                                                                                                                   // 3074
  'lime': {                                                                                                            // 3075
    '50': '#f9fbe7',                                                                                                   // 3076
    '100': '#f0f4c3',                                                                                                  // 3077
    '200': '#e6ee9c',                                                                                                  // 3078
    '300': '#dce775',                                                                                                  // 3079
    '400': '#d4e157',                                                                                                  // 3080
    '500': '#cddc39',                                                                                                  // 3081
    '600': '#c0ca33',                                                                                                  // 3082
    '700': '#afb42b',                                                                                                  // 3083
    '800': '#9e9d24',                                                                                                  // 3084
    '900': '#827717',                                                                                                  // 3085
    'A100': '#f4ff81',                                                                                                 // 3086
    'A200': '#eeff41',                                                                                                 // 3087
    'A400': '#c6ff00',                                                                                                 // 3088
    'A700': '#aeea00',                                                                                                 // 3089
    'contrastDefaultColor': 'dark',                                                                                    // 3090
    'contrastLightColors': '900',                                                                                      // 3091
    'contrastStrongLightColors': '900'                                                                                 // 3092
  },                                                                                                                   // 3093
  'yellow': {                                                                                                          // 3094
    '50': '#fffde7',                                                                                                   // 3095
    '100': '#fff9c4',                                                                                                  // 3096
    '200': '#fff59d',                                                                                                  // 3097
    '300': '#fff176',                                                                                                  // 3098
    '400': '#ffee58',                                                                                                  // 3099
    '500': '#ffeb3b',                                                                                                  // 3100
    '600': '#fdd835',                                                                                                  // 3101
    '700': '#fbc02d',                                                                                                  // 3102
    '800': '#f9a825',                                                                                                  // 3103
    '900': '#f57f17',                                                                                                  // 3104
    'A100': '#ffff8d',                                                                                                 // 3105
    'A200': '#ffff00',                                                                                                 // 3106
    'A400': '#ffea00',                                                                                                 // 3107
    'A700': '#ffd600',                                                                                                 // 3108
    'contrastDefaultColor': 'dark'                                                                                     // 3109
  },                                                                                                                   // 3110
  'amber': {                                                                                                           // 3111
    '50': '#fff8e1',                                                                                                   // 3112
    '100': '#ffecb3',                                                                                                  // 3113
    '200': '#ffe082',                                                                                                  // 3114
    '300': '#ffd54f',                                                                                                  // 3115
    '400': '#ffca28',                                                                                                  // 3116
    '500': '#ffc107',                                                                                                  // 3117
    '600': '#ffb300',                                                                                                  // 3118
    '700': '#ffa000',                                                                                                  // 3119
    '800': '#ff8f00',                                                                                                  // 3120
    '900': '#ff6f00',                                                                                                  // 3121
    'A100': '#ffe57f',                                                                                                 // 3122
    'A200': '#ffd740',                                                                                                 // 3123
    'A400': '#ffc400',                                                                                                 // 3124
    'A700': '#ffab00',                                                                                                 // 3125
    'contrastDefaultColor': 'dark'                                                                                     // 3126
  },                                                                                                                   // 3127
  'orange': {                                                                                                          // 3128
    '50': '#fff3e0',                                                                                                   // 3129
    '100': '#ffe0b2',                                                                                                  // 3130
    '200': '#ffcc80',                                                                                                  // 3131
    '300': '#ffb74d',                                                                                                  // 3132
    '400': '#ffa726',                                                                                                  // 3133
    '500': '#ff9800',                                                                                                  // 3134
    '600': '#fb8c00',                                                                                                  // 3135
    '700': '#f57c00',                                                                                                  // 3136
    '800': '#ef6c00',                                                                                                  // 3137
    '900': '#e65100',                                                                                                  // 3138
    'A100': '#ffd180',                                                                                                 // 3139
    'A200': '#ffab40',                                                                                                 // 3140
    'A400': '#ff9100',                                                                                                 // 3141
    'A700': '#ff6d00',                                                                                                 // 3142
    'contrastDefaultColor': 'dark',                                                                                    // 3143
    'contrastLightColors': '800 900',                                                                                  // 3144
    'contrastStrongLightColors': '800 900'                                                                             // 3145
  },                                                                                                                   // 3146
  'deep-orange': {                                                                                                     // 3147
    '50': '#fbe9e7',                                                                                                   // 3148
    '100': '#ffccbc',                                                                                                  // 3149
    '200': '#ffab91',                                                                                                  // 3150
    '300': '#ff8a65',                                                                                                  // 3151
    '400': '#ff7043',                                                                                                  // 3152
    '500': '#ff5722',                                                                                                  // 3153
    '600': '#f4511e',                                                                                                  // 3154
    '700': '#e64a19',                                                                                                  // 3155
    '800': '#d84315',                                                                                                  // 3156
    '900': '#bf360c',                                                                                                  // 3157
    'A100': '#ff9e80',                                                                                                 // 3158
    'A200': '#ff6e40',                                                                                                 // 3159
    'A400': '#ff3d00',                                                                                                 // 3160
    'A700': '#dd2c00',                                                                                                 // 3161
    'contrastDefaultColor': 'light',                                                                                   // 3162
    'contrastDarkColors': '50 100 200 300 400 A100 A200',                                                              // 3163
    'contrastStrongLightColors': '500 600 700 800 900 A400 A700'                                                       // 3164
  },                                                                                                                   // 3165
  'brown': {                                                                                                           // 3166
    '50': '#efebe9',                                                                                                   // 3167
    '100': '#d7ccc8',                                                                                                  // 3168
    '200': '#bcaaa4',                                                                                                  // 3169
    '300': '#a1887f',                                                                                                  // 3170
    '400': '#8d6e63',                                                                                                  // 3171
    '500': '#795548',                                                                                                  // 3172
    '600': '#6d4c41',                                                                                                  // 3173
    '700': '#5d4037',                                                                                                  // 3174
    '800': '#4e342e',                                                                                                  // 3175
    '900': '#3e2723',                                                                                                  // 3176
    'A100': '#d7ccc8',                                                                                                 // 3177
    'A200': '#bcaaa4',                                                                                                 // 3178
    'A400': '#8d6e63',                                                                                                 // 3179
    'A700': '#5d4037',                                                                                                 // 3180
    'contrastDefaultColor': 'light',                                                                                   // 3181
    'contrastDarkColors': '50 100 200',                                                                                // 3182
    'contrastStrongLightColors': '300 400'                                                                             // 3183
  },                                                                                                                   // 3184
  'grey': {                                                                                                            // 3185
    '50': '#fafafa',                                                                                                   // 3186
    '100': '#f5f5f5',                                                                                                  // 3187
    '200': '#eeeeee',                                                                                                  // 3188
    '300': '#e0e0e0',                                                                                                  // 3189
    '400': '#bdbdbd',                                                                                                  // 3190
    '500': '#9e9e9e',                                                                                                  // 3191
    '600': '#757575',                                                                                                  // 3192
    '700': '#616161',                                                                                                  // 3193
    '800': '#424242',                                                                                                  // 3194
    '900': '#212121',                                                                                                  // 3195
    '1000': '#000000',                                                                                                 // 3196
    'A100': '#ffffff',                                                                                                 // 3197
    'A200': '#eeeeee',                                                                                                 // 3198
    'A400': '#bdbdbd',                                                                                                 // 3199
    'A700': '#616161',                                                                                                 // 3200
    'contrastDefaultColor': 'dark',                                                                                    // 3201
    'contrastLightColors': '600 700 800 900'                                                                           // 3202
  },                                                                                                                   // 3203
  'blue-grey': {                                                                                                       // 3204
    '50': '#eceff1',                                                                                                   // 3205
    '100': '#cfd8dc',                                                                                                  // 3206
    '200': '#b0bec5',                                                                                                  // 3207
    '300': '#90a4ae',                                                                                                  // 3208
    '400': '#78909c',                                                                                                  // 3209
    '500': '#607d8b',                                                                                                  // 3210
    '600': '#546e7a',                                                                                                  // 3211
    '700': '#455a64',                                                                                                  // 3212
    '800': '#37474f',                                                                                                  // 3213
    '900': '#263238',                                                                                                  // 3214
    'A100': '#cfd8dc',                                                                                                 // 3215
    'A200': '#b0bec5',                                                                                                 // 3216
    'A400': '#78909c',                                                                                                 // 3217
    'A700': '#455a64',                                                                                                 // 3218
    'contrastDefaultColor': 'light',                                                                                   // 3219
    'contrastDarkColors': '50 100 200 300',                                                                            // 3220
    'contrastStrongLightColors': '400 500'                                                                             // 3221
  }                                                                                                                    // 3222
});                                                                                                                    // 3223
                                                                                                                       // 3224
})();                                                                                                                  // 3225
(function(){                                                                                                           // 3226
"use strict";                                                                                                          // 3227
                                                                                                                       // 3228
angular.module('material.core.theming', ['material.core.theming.palette'])                                             // 3229
  .directive('mdTheme', ThemingDirective)                                                                              // 3230
  .directive('mdThemable', ThemableDirective)                                                                          // 3231
  .provider('$mdTheming', ThemingProvider)                                                                             // 3232
  .run(generateThemes);                                                                                                // 3233
                                                                                                                       // 3234
/**                                                                                                                    // 3235
 * @ngdoc provider                                                                                                     // 3236
 * @name $mdThemingProvider                                                                                            // 3237
 * @module material.core                                                                                               // 3238
 *                                                                                                                     // 3239
 * @description Provider to configure the `$mdTheming` service.                                                        // 3240
 */                                                                                                                    // 3241
                                                                                                                       // 3242
/**                                                                                                                    // 3243
 * @ngdoc method                                                                                                       // 3244
 * @name $mdThemingProvider#setDefaultTheme                                                                            // 3245
 * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.                 // 3246
 */                                                                                                                    // 3247
                                                                                                                       // 3248
/**                                                                                                                    // 3249
 * @ngdoc method                                                                                                       // 3250
 * @name $mdThemingProvider#alwaysWatchTheme                                                                           // 3251
 * @param {boolean} watch Whether or not to always watch themes for changes and re-apply                               // 3252
 * classes when they change. Default is `false`. Enabling can reduce performance.                                      // 3253
 */                                                                                                                    // 3254
                                                                                                                       // 3255
/* Some Example Valid Theming Expressions                                                                              // 3256
 * =======================================                                                                             // 3257
 *                                                                                                                     // 3258
 * Intention group expansion: (valid for primary, accent, warn, background)                                            // 3259
 *                                                                                                                     // 3260
 * {{primary-100}} - grab shade 100 from the primary palette                                                           // 3261
 * {{primary-100-0.7}} - grab shade 100, apply opacity of 0.7                                                          // 3262
 * {{primary-hue-1}} - grab the shade assigned to hue-1 from the primary palette                                       // 3263
 * {{primary-hue-1-0.7}} - apply 0.7 opacity to primary-hue-1                                                          // 3264
 * {{primary-color}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured shades set for each hue               // 3265
 * {{primary-color-0.7}} - Apply 0.7 opacity to each of the above rules                                                // 3266
 * {{primary-contrast}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured contrast (ie. text) color shades set for each hue
 * {{primary-contrast-0.7}} - Apply 0.7 opacity to each of the above rules                                             // 3268
 *                                                                                                                     // 3269
 * Foreground expansion: Applies rgba to black/white foreground text                                                   // 3270
 *                                                                                                                     // 3271
 * {{foreground-1}} - used for primary text                                                                            // 3272
 * {{foreground-2}} - used for secondary text/divider                                                                  // 3273
 * {{foreground-3}} - used for disabled text                                                                           // 3274
 * {{foreground-4}} - used for dividers                                                                                // 3275
 *                                                                                                                     // 3276
 */                                                                                                                    // 3277
                                                                                                                       // 3278
// In memory generated CSS rules; registered by theme.name                                                             // 3279
var GENERATED = { };                                                                                                   // 3280
                                                                                                                       // 3281
// In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)                     // 3282
var PALETTES;                                                                                                          // 3283
var THEMES;                                                                                                            // 3284
                                                                                                                       // 3285
var DARK_FOREGROUND = {                                                                                                // 3286
  name: 'dark',                                                                                                        // 3287
  '1': 'rgba(0,0,0,0.87)',                                                                                             // 3288
  '2': 'rgba(0,0,0,0.54)',                                                                                             // 3289
  '3': 'rgba(0,0,0,0.26)',                                                                                             // 3290
  '4': 'rgba(0,0,0,0.12)'                                                                                              // 3291
};                                                                                                                     // 3292
var LIGHT_FOREGROUND = {                                                                                               // 3293
  name: 'light',                                                                                                       // 3294
  '1': 'rgba(255,255,255,1.0)',                                                                                        // 3295
  '2': 'rgba(255,255,255,0.7)',                                                                                        // 3296
  '3': 'rgba(255,255,255,0.3)',                                                                                        // 3297
  '4': 'rgba(255,255,255,0.12)'                                                                                        // 3298
};                                                                                                                     // 3299
                                                                                                                       // 3300
var DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';                                        // 3301
var LIGHT_SHADOW = '';                                                                                                 // 3302
                                                                                                                       // 3303
var DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');                                                        // 3304
var LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87');                                                  // 3305
var STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');                                                // 3306
                                                                                                                       // 3307
var THEME_COLOR_TYPES = ['primary', 'accent', 'warn', 'background'];                                                   // 3308
var DEFAULT_COLOR_TYPE = 'primary';                                                                                    // 3309
                                                                                                                       // 3310
// A color in a theme will use these hues by default, if not specified by user.                                        // 3311
var LIGHT_DEFAULT_HUES = {                                                                                             // 3312
  'accent': {                                                                                                          // 3313
    'default': 'A200',                                                                                                 // 3314
    'hue-1': 'A100',                                                                                                   // 3315
    'hue-2': 'A400',                                                                                                   // 3316
    'hue-3': 'A700'                                                                                                    // 3317
  },                                                                                                                   // 3318
  'background': {                                                                                                      // 3319
    'default': 'A100',                                                                                                 // 3320
    'hue-1': '300',                                                                                                    // 3321
    'hue-2': '800',                                                                                                    // 3322
    'hue-3': '900'                                                                                                     // 3323
  }                                                                                                                    // 3324
};                                                                                                                     // 3325
                                                                                                                       // 3326
var DARK_DEFAULT_HUES = {                                                                                              // 3327
  'background': {                                                                                                      // 3328
    'default': '800',                                                                                                  // 3329
    'hue-1': '300',                                                                                                    // 3330
    'hue-2': '600',                                                                                                    // 3331
    'hue-3': '900'                                                                                                     // 3332
  }                                                                                                                    // 3333
};                                                                                                                     // 3334
THEME_COLOR_TYPES.forEach(function(colorType) {                                                                        // 3335
  // Color types with unspecified default hues will use these default hue values                                       // 3336
  var defaultDefaultHues = {                                                                                           // 3337
    'default': '500',                                                                                                  // 3338
    'hue-1': '300',                                                                                                    // 3339
    'hue-2': '800',                                                                                                    // 3340
    'hue-3': 'A100'                                                                                                    // 3341
  };                                                                                                                   // 3342
  if (!LIGHT_DEFAULT_HUES[colorType]) LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;                              // 3343
  if (!DARK_DEFAULT_HUES[colorType]) DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;                                // 3344
});                                                                                                                    // 3345
                                                                                                                       // 3346
var VALID_HUE_VALUES = [                                                                                               // 3347
  '50', '100', '200', '300', '400', '500', '600',                                                                      // 3348
  '700', '800', '900', 'A100', 'A200', 'A400', 'A700'                                                                  // 3349
];                                                                                                                     // 3350
                                                                                                                       // 3351
function ThemingProvider($mdColorPalette) {                                                                            // 3352
  PALETTES = { };                                                                                                      // 3353
  THEMES = { };                                                                                                        // 3354
                                                                                                                       // 3355
  var themingProvider;                                                                                                 // 3356
  var defaultTheme = 'default';                                                                                        // 3357
  var alwaysWatchTheme = false;                                                                                        // 3358
                                                                                                                       // 3359
  // Load JS Defined Palettes                                                                                          // 3360
  angular.extend(PALETTES, $mdColorPalette);                                                                           // 3361
                                                                                                                       // 3362
  // Default theme defined in core.js                                                                                  // 3363
                                                                                                                       // 3364
  ThemingService.$inject = ["$rootScope", "$log"];                                                                     // 3365
  return themingProvider = {                                                                                           // 3366
    definePalette: definePalette,                                                                                      // 3367
    extendPalette: extendPalette,                                                                                      // 3368
    theme: registerTheme,                                                                                              // 3369
                                                                                                                       // 3370
    setDefaultTheme: function(theme) {                                                                                 // 3371
      defaultTheme = theme;                                                                                            // 3372
    },                                                                                                                 // 3373
    alwaysWatchTheme: function(alwaysWatch) {                                                                          // 3374
      alwaysWatchTheme = alwaysWatch;                                                                                  // 3375
    },                                                                                                                 // 3376
    $get: ThemingService,                                                                                              // 3377
    _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,                                                                           // 3378
    _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,                                                                             // 3379
    _PALETTES: PALETTES,                                                                                               // 3380
    _THEMES: THEMES,                                                                                                   // 3381
    _parseRules: parseRules,                                                                                           // 3382
    _rgba: rgba                                                                                                        // 3383
  };                                                                                                                   // 3384
                                                                                                                       // 3385
  // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });                                     // 3386
  function definePalette(name, map) {                                                                                  // 3387
    map = map || {};                                                                                                   // 3388
    PALETTES[name] = checkPaletteValid(name, map);                                                                     // 3389
    return themingProvider;                                                                                            // 3390
  }                                                                                                                    // 3391
                                                                                                                       // 3392
  // Returns an new object which is a copy of a given palette `name` with variables from                               // 3393
  // `map` overwritten                                                                                                 // 3394
  // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });                           // 3395
  function extendPalette(name, map) {                                                                                  // 3396
    return checkPaletteValid(name,  angular.extend({}, PALETTES[name] || {}, map) );                                   // 3397
  }                                                                                                                    // 3398
                                                                                                                       // 3399
  // Make sure that palette has all required hues                                                                      // 3400
  function checkPaletteValid(name, map) {                                                                              // 3401
    var missingColors = VALID_HUE_VALUES.filter(function(field) {                                                      // 3402
      return !map[field];                                                                                              // 3403
    });                                                                                                                // 3404
    if (missingColors.length) {                                                                                        // 3405
      throw new Error("Missing colors %1 in palette %2!"                                                               // 3406
                      .replace('%1', missingColors.join(', '))                                                         // 3407
                      .replace('%2', name));                                                                           // 3408
    }                                                                                                                  // 3409
                                                                                                                       // 3410
    return map;                                                                                                        // 3411
  }                                                                                                                    // 3412
                                                                                                                       // 3413
  // Register a theme (which is a collection of color palettes to use with various states                              // 3414
  // ie. warn, accent, primary )                                                                                       // 3415
  // Optionally inherit from an existing theme                                                                         // 3416
  // $mdThemingProvider.theme('custom-theme').primaryPalette('red');                                                   // 3417
  function registerTheme(name, inheritFrom) {                                                                          // 3418
    if (THEMES[name]) return THEMES[name];                                                                             // 3419
                                                                                                                       // 3420
    inheritFrom = inheritFrom || 'default';                                                                            // 3421
                                                                                                                       // 3422
    var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;                             // 3423
    var theme = new Theme(name);                                                                                       // 3424
                                                                                                                       // 3425
    if (parentTheme) {                                                                                                 // 3426
      angular.forEach(parentTheme.colors, function(color, colorType) {                                                 // 3427
        theme.colors[colorType] = {                                                                                    // 3428
          name: color.name,                                                                                            // 3429
          // Make sure a COPY of the hues is given to the child color,                                                 // 3430
          // not the same reference.                                                                                   // 3431
          hues: angular.extend({}, color.hues)                                                                         // 3432
        };                                                                                                             // 3433
      });                                                                                                              // 3434
    }                                                                                                                  // 3435
    THEMES[name] = theme;                                                                                              // 3436
                                                                                                                       // 3437
    return theme;                                                                                                      // 3438
  }                                                                                                                    // 3439
                                                                                                                       // 3440
  function Theme(name) {                                                                                               // 3441
    var self = this;                                                                                                   // 3442
    self.name = name;                                                                                                  // 3443
    self.colors = {};                                                                                                  // 3444
                                                                                                                       // 3445
    self.dark = setDark;                                                                                               // 3446
    setDark(false);                                                                                                    // 3447
                                                                                                                       // 3448
    function setDark(isDark) {                                                                                         // 3449
      isDark = arguments.length === 0 ? true : !!isDark;                                                               // 3450
                                                                                                                       // 3451
      // If no change, abort                                                                                           // 3452
      if (isDark === self.isDark) return;                                                                              // 3453
                                                                                                                       // 3454
      self.isDark = isDark;                                                                                            // 3455
                                                                                                                       // 3456
      self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;                                       // 3457
      self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;                                                // 3458
                                                                                                                       // 3459
      // Light and dark themes have different default hues.                                                            // 3460
      // Go through each existing color type for this theme, and for every                                             // 3461
      // hue value that is still the default hue value from the previous light/dark setting,                           // 3462
      // set it to the default hue value from the new light/dark setting.                                              // 3463
      var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;                                       // 3464
      var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;                                       // 3465
      angular.forEach(newDefaultHues, function(newDefaults, colorType) {                                               // 3466
        var color = self.colors[colorType];                                                                            // 3467
        var oldDefaults = oldDefaultHues[colorType];                                                                   // 3468
        if (color) {                                                                                                   // 3469
          for (var hueName in color.hues) {                                                                            // 3470
            if (color.hues[hueName] === oldDefaults[hueName]) {                                                        // 3471
              color.hues[hueName] = newDefaults[hueName];                                                              // 3472
            }                                                                                                          // 3473
          }                                                                                                            // 3474
        }                                                                                                              // 3475
      });                                                                                                              // 3476
                                                                                                                       // 3477
      return self;                                                                                                     // 3478
    }                                                                                                                  // 3479
                                                                                                                       // 3480
    THEME_COLOR_TYPES.forEach(function(colorType) {                                                                    // 3481
      var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];                             // 3482
      self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {                                       // 3483
        var color = self.colors[colorType] = {                                                                         // 3484
          name: paletteName,                                                                                           // 3485
          hues: angular.extend({}, defaultHues, hues)                                                                  // 3486
        };                                                                                                             // 3487
                                                                                                                       // 3488
        Object.keys(color.hues).forEach(function(name) {                                                               // 3489
          if (!defaultHues[name]) {                                                                                    // 3490
            throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4"                 // 3491
              .replace('%1', name)                                                                                     // 3492
              .replace('%2', self.name)                                                                                // 3493
              .replace('%3', paletteName)                                                                              // 3494
              .replace('%4', Object.keys(defaultHues).join(', '))                                                      // 3495
            );                                                                                                         // 3496
          }                                                                                                            // 3497
        });                                                                                                            // 3498
        Object.keys(color.hues).map(function(key) {                                                                    // 3499
          return color.hues[key];                                                                                      // 3500
        }).forEach(function(hueValue) {                                                                                // 3501
          if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {                                                              // 3502
            throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5"               // 3503
              .replace('%1', hueValue)                                                                                 // 3504
              .replace('%2', self.name)                                                                                // 3505
              .replace('%3', colorType)                                                                                // 3506
              .replace('%4', paletteName)                                                                              // 3507
              .replace('%5', VALID_HUE_VALUES.join(', '))                                                              // 3508
            );                                                                                                         // 3509
          }                                                                                                            // 3510
        });                                                                                                            // 3511
        return self;                                                                                                   // 3512
      };                                                                                                               // 3513
                                                                                                                       // 3514
      self[colorType + 'Color'] = function() {                                                                         // 3515
        var args = Array.prototype.slice.call(arguments);                                                              // 3516
        console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' +                        // 3517
                     'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');                               // 3518
        return self[colorType + 'Palette'].apply(self, args);                                                          // 3519
      };                                                                                                               // 3520
    });                                                                                                                // 3521
  }                                                                                                                    // 3522
                                                                                                                       // 3523
  /**                                                                                                                  // 3524
   * @ngdoc service                                                                                                    // 3525
   * @name $mdTheming                                                                                                  // 3526
   *                                                                                                                   // 3527
   * @description                                                                                                      // 3528
   *                                                                                                                   // 3529
   * Service that makes an element apply theming related classes to itself.                                            // 3530
   *                                                                                                                   // 3531
   * ```js                                                                                                             // 3532
   * app.directive('myFancyDirective', function($mdTheming) {                                                          // 3533
   *   return {                                                                                                        // 3534
   *     restrict: 'e',                                                                                                // 3535
   *     link: function(scope, el, attrs) {                                                                            // 3536
   *       $mdTheming(el);                                                                                             // 3537
   *     }                                                                                                             // 3538
   *   };                                                                                                              // 3539
   * });                                                                                                               // 3540
   * ```                                                                                                               // 3541
   * @param {el=} element to apply theming to                                                                          // 3542
   */                                                                                                                  // 3543
  /* @ngInject */                                                                                                      // 3544
  function ThemingService($rootScope, $log) {                                                                          // 3545
                                                                                                                       // 3546
    applyTheme.inherit = function(el, parent) {                                                                        // 3547
      var ctrl = parent.controller('mdTheme');                                                                         // 3548
                                                                                                                       // 3549
      var attrThemeValue = el.attr('md-theme-watch');                                                                  // 3550
      if ( (alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {                     // 3551
        var deregisterWatch = $rootScope.$watch(function() {                                                           // 3552
          return ctrl && ctrl.$mdTheme || defaultTheme;                                                                // 3553
        }, changeTheme);                                                                                               // 3554
        el.on('$destroy', deregisterWatch);                                                                            // 3555
      } else {                                                                                                         // 3556
        var theme = ctrl && ctrl.$mdTheme || defaultTheme;                                                             // 3557
        changeTheme(theme);                                                                                            // 3558
      }                                                                                                                // 3559
                                                                                                                       // 3560
      function changeTheme(theme) {                                                                                    // 3561
        if (!registered(theme)) {                                                                                      // 3562
          $log.warn('Attempted to use unregistered theme \'' + theme + '\'. ' +                                        // 3563
                    'Register it with $mdThemingProvider.theme().');                                                   // 3564
        }                                                                                                              // 3565
        var oldTheme = el.data('$mdThemeName');                                                                        // 3566
        if (oldTheme) el.removeClass('md-' + oldTheme +'-theme');                                                      // 3567
        el.addClass('md-' + theme + '-theme');                                                                         // 3568
        el.data('$mdThemeName', theme);                                                                                // 3569
      }                                                                                                                // 3570
    };                                                                                                                 // 3571
                                                                                                                       // 3572
    applyTheme.THEMES = angular.extend({}, THEMES);                                                                    // 3573
    applyTheme.defaultTheme = function() { return defaultTheme; };                                                     // 3574
    applyTheme.registered = registered;                                                                                // 3575
                                                                                                                       // 3576
    return applyTheme;                                                                                                 // 3577
                                                                                                                       // 3578
    function registered(themeName) {                                                                                   // 3579
      if (themeName === undefined || themeName === '') return true;                                                    // 3580
      return applyTheme.THEMES[themeName] !== undefined;                                                               // 3581
    }                                                                                                                  // 3582
                                                                                                                       // 3583
    function applyTheme(scope, el) {                                                                                   // 3584
      // Allow us to be invoked via a linking function signature.                                                      // 3585
      if (el === undefined) {                                                                                          // 3586
        el = scope;                                                                                                    // 3587
        scope = undefined;                                                                                             // 3588
      }                                                                                                                // 3589
      if (scope === undefined) {                                                                                       // 3590
        scope = $rootScope;                                                                                            // 3591
      }                                                                                                                // 3592
      applyTheme.inherit(el, el);                                                                                      // 3593
    }                                                                                                                  // 3594
  }                                                                                                                    // 3595
}                                                                                                                      // 3596
ThemingProvider.$inject = ["$mdColorPalette"];                                                                         // 3597
                                                                                                                       // 3598
function ThemingDirective($mdTheming, $interpolate, $log) {                                                            // 3599
  return {                                                                                                             // 3600
    priority: 100,                                                                                                     // 3601
    link: {                                                                                                            // 3602
      pre: function(scope, el, attrs) {                                                                                // 3603
        var ctrl = {                                                                                                   // 3604
          $setTheme: function(theme) {                                                                                 // 3605
            if (!$mdTheming.registered(theme)) {                                                                       // 3606
              $log.warn('attempted to use unregistered theme \'' + theme + '\'');                                      // 3607
            }                                                                                                          // 3608
            ctrl.$mdTheme = theme;                                                                                     // 3609
          }                                                                                                            // 3610
        };                                                                                                             // 3611
        el.data('$mdThemeController', ctrl);                                                                           // 3612
        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));                                                            // 3613
        attrs.$observe('mdTheme', ctrl.$setTheme);                                                                     // 3614
      }                                                                                                                // 3615
    }                                                                                                                  // 3616
  };                                                                                                                   // 3617
}                                                                                                                      // 3618
ThemingDirective.$inject = ["$mdTheming", "$interpolate", "$log"];                                                     // 3619
                                                                                                                       // 3620
function ThemableDirective($mdTheming) {                                                                               // 3621
  return $mdTheming;                                                                                                   // 3622
}                                                                                                                      // 3623
ThemableDirective.$inject = ["$mdTheming"];                                                                            // 3624
                                                                                                                       // 3625
function parseRules(theme, colorType, rules) {                                                                         // 3626
  checkValidPalette(theme, colorType);                                                                                 // 3627
                                                                                                                       // 3628
  rules = rules.replace(/THEME_NAME/g, theme.name);                                                                    // 3629
  var generatedRules = [];                                                                                             // 3630
  var color = theme.colors[colorType];                                                                                 // 3631
                                                                                                                       // 3632
  var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');                                                // 3633
  // Matches '{{ primary-color }}', etc                                                                                // 3634
  var hueRegex = new RegExp('(\'|")?{{\\s*(' + colorType + ')-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|\')?','g');    // 3635
  var simpleVariableRegex = /'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?\s*\}\}'?"?/g;               // 3636
  var palette = PALETTES[color.name];                                                                                  // 3637
                                                                                                                       // 3638
  // find and replace simple variables where we use a specific hue, not an entire palette                              // 3639
  // eg. "{{primary-100}}"                                                                                             // 3640
  //\(' + THEME_COLOR_TYPES.join('\|') + '\)'                                                                          // 3641
  rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity) {                                // 3642
    if (colorType === 'foreground') {                                                                                  // 3643
      if (hue == 'shadow') {                                                                                           // 3644
        return theme.foregroundShadow;                                                                                 // 3645
      } else {                                                                                                         // 3646
        return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];                                           // 3647
      }                                                                                                                // 3648
    }                                                                                                                  // 3649
    if (hue.indexOf('hue') === 0) {                                                                                    // 3650
      hue = theme.colors[colorType].hues[hue];                                                                         // 3651
    }                                                                                                                  // 3652
    return rgba( (PALETTES[ theme.colors[colorType].name ][hue] || '').value, opacity );                               // 3653
  });                                                                                                                  // 3654
                                                                                                                       // 3655
  // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)                            // 3656
  angular.forEach(color.hues, function(hueValue, hueName) {                                                            // 3657
    var newRule = rules                                                                                                // 3658
      .replace(hueRegex, function(match, _, colorType, hueType, opacity) {                                             // 3659
        return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);                           // 3660
      });                                                                                                              // 3661
    if (hueName !== 'default') {                                                                                       // 3662
      newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);                         // 3663
    }                                                                                                                  // 3664
    generatedRules.push(newRule);                                                                                      // 3665
  });                                                                                                                  // 3666
                                                                                                                       // 3667
  return generatedRules;                                                                                               // 3668
}                                                                                                                      // 3669
                                                                                                                       // 3670
// Generate our themes at run time given the state of THEMES and PALETTES                                              // 3671
function generateThemes($injector) {                                                                                   // 3672
                                                                                                                       // 3673
  var head = document.getElementsByTagName('head')[0];                                                                 // 3674
  var firstChild = head ? head.firstElementChild : null;                                                               // 3675
  var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';                                 // 3676
                                                                                                                       // 3677
  if ( !firstChild ) return;                                                                                           // 3678
  if (themeCss.length === 0) return; // no rules, so no point in running this expensive task                           // 3679
                                                                                                                       // 3680
  // Expose contrast colors for palettes to ensure that text is always readable                                        // 3681
  angular.forEach(PALETTES, sanitizePalette);                                                                          // 3682
                                                                                                                       // 3683
  // MD_THEME_CSS is a string generated by the build process that includes all the themable                            // 3684
  // components as templates                                                                                           // 3685
                                                                                                                       // 3686
  // Break the CSS into individual rules                                                                               // 3687
  var rulesByType = {};                                                                                                // 3688
  var rules = themeCss                                                                                                 // 3689
                  .split(/\}(?!(\}|'|"|;))/)                                                                           // 3690
                  .filter(function(rule) { return rule && rule.length; })                                              // 3691
                  .map(function(rule) { return rule.trim() + '}'; });                                                  // 3692
                                                                                                                       // 3693
                                                                                                                       // 3694
  var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');                                    // 3695
                                                                                                                       // 3696
  THEME_COLOR_TYPES.forEach(function(type) {                                                                           // 3697
    rulesByType[type] = '';                                                                                            // 3698
  });                                                                                                                  // 3699
                                                                                                                       // 3700
                                                                                                                       // 3701
  // Sort the rules based on type, allowing us to do color substitution on a per-type basis                            // 3702
  rules.forEach(function(rule) {                                                                                       // 3703
    var match = rule.match(ruleMatchRegex);                                                                            // 3704
    // First: test that if the rule has '.md-accent', it goes into the accent set of rules                             // 3705
    for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {                                                          // 3706
      if (rule.indexOf('.md-' + type) > -1) {                                                                          // 3707
        return rulesByType[type] += rule;                                                                              // 3708
      }                                                                                                                // 3709
    }                                                                                                                  // 3710
                                                                                                                       // 3711
    // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from                       // 3712
    // there                                                                                                           // 3713
    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {                                                                    // 3714
      if (rule.indexOf(type) > -1) {                                                                                   // 3715
        return rulesByType[type] += rule;                                                                              // 3716
      }                                                                                                                // 3717
    }                                                                                                                  // 3718
                                                                                                                       // 3719
    // Default to the primary array                                                                                    // 3720
    return rulesByType[DEFAULT_COLOR_TYPE] += rule;                                                                    // 3721
  });                                                                                                                  // 3722
                                                                                                                       // 3723
    // For each theme, use the color palettes specified for                                                            // 3724
    // `primary`, `warn` and `accent` to generate CSS rules.                                                           // 3725
                                                                                                                       // 3726
    angular.forEach(THEMES, function(theme) {                                                                          // 3727
      if ( !GENERATED[theme.name] ) {                                                                                  // 3728
                                                                                                                       // 3729
                                                                                                                       // 3730
        THEME_COLOR_TYPES.forEach(function(colorType) {                                                                // 3731
          var styleStrings = parseRules(theme, colorType, rulesByType[colorType]);                                     // 3732
          while (styleStrings.length) {                                                                                // 3733
            var style = document.createElement('style');                                                               // 3734
                style.setAttribute('type', 'text/css');                                                                // 3735
            style.appendChild(document.createTextNode(styleStrings.shift()));                                          // 3736
            head.insertBefore(style, firstChild);                                                                      // 3737
          }                                                                                                            // 3738
        });                                                                                                            // 3739
                                                                                                                       // 3740
                                                                                                                       // 3741
        if (theme.colors.primary.name == theme.colors.accent.name) {                                                   // 3742
          console.warn("$mdThemingProvider: Using the same palette for primary and" +                                  // 3743
                       " accent. This violates the material design spec.");                                            // 3744
        }                                                                                                              // 3745
                                                                                                                       // 3746
        GENERATED[theme.name] = true;                                                                                  // 3747
      }                                                                                                                // 3748
    });                                                                                                                // 3749
                                                                                                                       // 3750
                                                                                                                       // 3751
  // *************************                                                                                         // 3752
  // Internal functions                                                                                                // 3753
  // *************************                                                                                         // 3754
                                                                                                                       // 3755
  // The user specifies a 'default' contrast color as either light or dark,                                            // 3756
  // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)                    // 3757
  function sanitizePalette(palette) {                                                                                  // 3758
    var defaultContrast = palette.contrastDefaultColor;                                                                // 3759
    var lightColors = palette.contrastLightColors || [];                                                               // 3760
    var strongLightColors = palette.contrastStrongLightColors || [];                                                   // 3761
    var darkColors = palette.contrastDarkColors || [];                                                                 // 3762
                                                                                                                       // 3763
    // These colors are provided as space-separated lists                                                              // 3764
    if (typeof lightColors === 'string') lightColors = lightColors.split(' ');                                         // 3765
    if (typeof strongLightColors === 'string') strongLightColors = strongLightColors.split(' ');                       // 3766
    if (typeof darkColors === 'string') darkColors = darkColors.split(' ');                                            // 3767
                                                                                                                       // 3768
    // Cleanup after ourselves                                                                                         // 3769
    delete palette.contrastDefaultColor;                                                                               // 3770
    delete palette.contrastLightColors;                                                                                // 3771
    delete palette.contrastStrongLightColors;                                                                          // 3772
    delete palette.contrastDarkColors;                                                                                 // 3773
                                                                                                                       // 3774
    // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }                    // 3775
    angular.forEach(palette, function(hueValue, hueName) {                                                             // 3776
      if (angular.isObject(hueValue)) return; // Already converted                                                     // 3777
      // Map everything to rgb colors                                                                                  // 3778
      var rgbValue = colorToRgbaArray(hueValue);                                                                       // 3779
      if (!rgbValue) {                                                                                                 // 3780
        throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected."                  // 3781
                        .replace('%1', hueValue)                                                                       // 3782
                        .replace('%2', palette.name)                                                                   // 3783
                        .replace('%3', hueName));                                                                      // 3784
      }                                                                                                                // 3785
                                                                                                                       // 3786
      palette[hueName] = {                                                                                             // 3787
        value: rgbValue,                                                                                               // 3788
        contrast: getContrastColor()                                                                                   // 3789
      };                                                                                                               // 3790
      function getContrastColor() {                                                                                    // 3791
        if (defaultContrast === 'light') {                                                                             // 3792
          if (darkColors.indexOf(hueName) > -1) {                                                                      // 3793
            return DARK_CONTRAST_COLOR;                                                                                // 3794
          } else {                                                                                                     // 3795
            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR                               // 3796
              : LIGHT_CONTRAST_COLOR;                                                                                  // 3797
          }                                                                                                            // 3798
        } else {                                                                                                       // 3799
          if (lightColors.indexOf(hueName) > -1) {                                                                     // 3800
            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR                               // 3801
              : LIGHT_CONTRAST_COLOR;                                                                                  // 3802
          } else {                                                                                                     // 3803
            return DARK_CONTRAST_COLOR;                                                                                // 3804
          }                                                                                                            // 3805
        }                                                                                                              // 3806
      }                                                                                                                // 3807
    });                                                                                                                // 3808
  }                                                                                                                    // 3809
                                                                                                                       // 3810
                                                                                                                       // 3811
}                                                                                                                      // 3812
generateThemes.$inject = ["$injector"];                                                                                // 3813
                                                                                                                       // 3814
function checkValidPalette(theme, colorType) {                                                                         // 3815
  // If theme attempts to use a palette that doesnt exist, throw error                                                 // 3816
  if (!PALETTES[ (theme.colors[colorType] || {}).name ]) {                                                             // 3817
    throw new Error(                                                                                                   // 3818
      "You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3"                        // 3819
                    .replace('%1', theme.name)                                                                         // 3820
                    .replace('%2', colorType)                                                                          // 3821
                    .replace('%3', Object.keys(PALETTES).join(', '))                                                   // 3822
    );                                                                                                                 // 3823
  }                                                                                                                    // 3824
}                                                                                                                      // 3825
                                                                                                                       // 3826
function colorToRgbaArray(clr) {                                                                                       // 3827
  if (angular.isArray(clr) && clr.length == 3) return clr;                                                             // 3828
  if (/^rgb/.test(clr)) {                                                                                              // 3829
    return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, '').split(',').map(function(value, i) {                                // 3830
      return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);                                                     // 3831
    });                                                                                                                // 3832
  }                                                                                                                    // 3833
  if (clr.charAt(0) == '#') clr = clr.substring(1);                                                                    // 3834
  if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) return;                                                                   // 3835
                                                                                                                       // 3836
  var dig = clr.length / 3;                                                                                            // 3837
  var red = clr.substr(0, dig);                                                                                        // 3838
  var grn = clr.substr(dig, dig);                                                                                      // 3839
  var blu = clr.substr(dig * 2);                                                                                       // 3840
  if (dig === 1) {                                                                                                     // 3841
    red += red;                                                                                                        // 3842
    grn += grn;                                                                                                        // 3843
    blu += blu;                                                                                                        // 3844
  }                                                                                                                    // 3845
  return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];                                                    // 3846
}                                                                                                                      // 3847
                                                                                                                       // 3848
function rgba(rgbArray, opacity) {                                                                                     // 3849
  if ( !rgbArray ) return "rgb('0,0,0')";                                                                              // 3850
                                                                                                                       // 3851
  if (rgbArray.length == 4) {                                                                                          // 3852
    rgbArray = angular.copy(rgbArray);                                                                                 // 3853
    opacity ? rgbArray.pop() : opacity = rgbArray.pop();                                                               // 3854
  }                                                                                                                    // 3855
  return opacity && (typeof opacity == 'number' || (typeof opacity == 'string' && opacity.length)) ?                   // 3856
    'rgba(' + rgbArray.join(',') + ',' + opacity + ')' :                                                               // 3857
    'rgb(' + rgbArray.join(',') + ')';                                                                                 // 3858
}                                                                                                                      // 3859
                                                                                                                       // 3860
                                                                                                                       // 3861
})();                                                                                                                  // 3862
(function(){                                                                                                           // 3863
"use strict";                                                                                                          // 3864
                                                                                                                       // 3865
/**                                                                                                                    // 3866
 * @ngdoc module                                                                                                       // 3867
 * @name material.components.autocomplete                                                                              // 3868
 */                                                                                                                    // 3869
/*                                                                                                                     // 3870
 * @see js folder for autocomplete implementation                                                                      // 3871
 */                                                                                                                    // 3872
angular.module('material.components.autocomplete', [                                                                   // 3873
  'material.core',                                                                                                     // 3874
  'material.components.icon'                                                                                           // 3875
]);                                                                                                                    // 3876
                                                                                                                       // 3877
})();                                                                                                                  // 3878
(function(){                                                                                                           // 3879
"use strict";                                                                                                          // 3880
                                                                                                                       // 3881
/*                                                                                                                     // 3882
 * @ngdoc module                                                                                                       // 3883
 * @name material.components.backdrop                                                                                  // 3884
 * @description Backdrop                                                                                               // 3885
 */                                                                                                                    // 3886
                                                                                                                       // 3887
/**                                                                                                                    // 3888
 * @ngdoc directive                                                                                                    // 3889
 * @name mdBackdrop                                                                                                    // 3890
 * @module material.components.backdrop                                                                                // 3891
 *                                                                                                                     // 3892
 * @restrict E                                                                                                         // 3893
 *                                                                                                                     // 3894
 * @description                                                                                                        // 3895
 * `<md-backdrop>` is a backdrop element used by other components, such as dialog and bottom sheet.                    // 3896
 * Apply class `opaque` to make the backdrop use the theme backdrop color.                                             // 3897
 *                                                                                                                     // 3898
 */                                                                                                                    // 3899
                                                                                                                       // 3900
angular.module('material.components.backdrop', [                                                                       // 3901
  'material.core'                                                                                                      // 3902
])                                                                                                                     // 3903
  .directive('mdBackdrop', BackdropDirective);                                                                         // 3904
                                                                                                                       // 3905
function BackdropDirective($mdTheming) {                                                                               // 3906
  return $mdTheming;                                                                                                   // 3907
}                                                                                                                      // 3908
BackdropDirective.$inject = ["$mdTheming"];                                                                            // 3909
                                                                                                                       // 3910
})();                                                                                                                  // 3911
(function(){                                                                                                           // 3912
"use strict";                                                                                                          // 3913
                                                                                                                       // 3914
/**                                                                                                                    // 3915
 * @ngdoc module                                                                                                       // 3916
 * @name material.components.bottomSheet                                                                               // 3917
 * @description                                                                                                        // 3918
 * BottomSheet                                                                                                         // 3919
 */                                                                                                                    // 3920
angular.module('material.components.bottomSheet', [                                                                    // 3921
  'material.core',                                                                                                     // 3922
  'material.components.backdrop'                                                                                       // 3923
])                                                                                                                     // 3924
  .directive('mdBottomSheet', MdBottomSheetDirective)                                                                  // 3925
  .provider('$mdBottomSheet', MdBottomSheetProvider);                                                                  // 3926
                                                                                                                       // 3927
function MdBottomSheetDirective() {                                                                                    // 3928
  return {                                                                                                             // 3929
    restrict: 'E'                                                                                                      // 3930
  };                                                                                                                   // 3931
}                                                                                                                      // 3932
                                                                                                                       // 3933
/**                                                                                                                    // 3934
 * @ngdoc service                                                                                                      // 3935
 * @name $mdBottomSheet                                                                                                // 3936
 * @module material.components.bottomSheet                                                                             // 3937
 *                                                                                                                     // 3938
 * @description                                                                                                        // 3939
 * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.                               // 3940
 *                                                                                                                     // 3941
 * ## Restrictions                                                                                                     // 3942
 *                                                                                                                     // 3943
 * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.                                       // 3944
 * - Add the `md-grid` class to the bottom sheet for a grid layout.                                                    // 3945
 * - Add the `md-list` class to the bottom sheet for a list layout.                                                    // 3946
 *                                                                                                                     // 3947
 * @usage                                                                                                              // 3948
 * <hljs lang="html">                                                                                                  // 3949
 * <div ng-controller="MyController">                                                                                  // 3950
 *   <md-button ng-click="openBottomSheet()">                                                                          // 3951
 *     Open a Bottom Sheet!                                                                                            // 3952
 *   </md-button>                                                                                                      // 3953
 * </div>                                                                                                              // 3954
 * </hljs>                                                                                                             // 3955
 * <hljs lang="js">                                                                                                    // 3956
 * var app = angular.module('app', ['ngMaterial']);                                                                    // 3957
 * app.controller('MyController', function($scope, $mdBottomSheet) {                                                   // 3958
 *   $scope.openBottomSheet = function() {                                                                             // 3959
 *     $mdBottomSheet.show({                                                                                           // 3960
 *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'                                                         // 3961
 *     });                                                                                                             // 3962
 *   };                                                                                                                // 3963
 * });                                                                                                                 // 3964
 * </hljs>                                                                                                             // 3965
 */                                                                                                                    // 3966
                                                                                                                       // 3967
 /**                                                                                                                   // 3968
 * @ngdoc method                                                                                                       // 3969
 * @name $mdBottomSheet#show                                                                                           // 3970
 *                                                                                                                     // 3971
 * @description                                                                                                        // 3972
 * Show a bottom sheet with the specified options.                                                                     // 3973
 *                                                                                                                     // 3974
 * @param {object} options An options object, with the following properties:                                           // 3975
 *                                                                                                                     // 3976
 *   - `templateUrl` - `{string=}`: The url of an html template file that will                                         // 3977
 *   be used as the content of the bottom sheet. Restrictions: the template must                                       // 3978
 *   have an outer `md-bottom-sheet` element.                                                                          // 3979
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual                                         // 3980
 *   template string.                                                                                                  // 3981
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
 *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.            // 3983
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false     // 3984
 *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.                                 // 3985
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will                                     // 3986
 *   be used as names of values to inject into the controller. For example,                                            // 3987
 *   `locals: {three: 3}` would inject `three` into the controller with the value                                      // 3988
 *   of 3.                                                                                                             // 3989
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,                        // 3990
 *   the location of the click will be used as the starting point for the opening animation                            // 3991
 *   of the the dialog.                                                                                                // 3992
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values                                  // 3993
 *   and the bottom sheet will not open until the promises resolve.                                                    // 3994
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                                // 3995
 *   - `parent` - `{element=}`: The element to append the bottom sheet to. The `parent` may be a `function`, `string`, // 3996
 *   `object`, or null. Defaults to appending to the body of the root element (or the root element) of the application.
 *   e.g. angular.element(document.getElementById('content')) or "#content"                                            // 3998
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.              // 3999
 *     Default true.                                                                                                   // 4000
 *                                                                                                                     // 4001
 * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or                                   // 4002
 * rejected with `$mdBottomSheet.cancel()`.                                                                            // 4003
 */                                                                                                                    // 4004
                                                                                                                       // 4005
/**                                                                                                                    // 4006
 * @ngdoc method                                                                                                       // 4007
 * @name $mdBottomSheet#hide                                                                                           // 4008
 *                                                                                                                     // 4009
 * @description                                                                                                        // 4010
 * Hide the existing bottom sheet and resolve the promise returned from                                                // 4011
 * `$mdBottomSheet.show()`. This call will close the most recently opened/current bottomsheet (if any).                // 4012
 *                                                                                                                     // 4013
 * @param {*=} response An argument for the resolved promise.                                                          // 4014
 *                                                                                                                     // 4015
 */                                                                                                                    // 4016
                                                                                                                       // 4017
/**                                                                                                                    // 4018
 * @ngdoc method                                                                                                       // 4019
 * @name $mdBottomSheet#cancel                                                                                         // 4020
 *                                                                                                                     // 4021
 * @description                                                                                                        // 4022
 * Hide the existing bottom sheet and reject the promise returned from                                                 // 4023
 * `$mdBottomSheet.show()`.                                                                                            // 4024
 *                                                                                                                     // 4025
 * @param {*=} response An argument for the rejected promise.                                                          // 4026
 *                                                                                                                     // 4027
 */                                                                                                                    // 4028
                                                                                                                       // 4029
function MdBottomSheetProvider($$interimElementProvider) {                                                             // 4030
  // how fast we need to flick down to close the sheet, pixels/ms                                                      // 4031
  var CLOSING_VELOCITY = 0.5;                                                                                          // 4032
  var PADDING = 80; // same as css                                                                                     // 4033
                                                                                                                       // 4034
  bottomSheetDefaults.$inject = ["$animate", "$mdConstant", "$mdUtil", "$timeout", "$compile", "$mdTheming", "$mdBottomSheet", "$rootElement", "$mdGesture"];
  return $$interimElementProvider('$mdBottomSheet')                                                                    // 4036
    .setDefaults({                                                                                                     // 4037
      methods: ['disableParentScroll', 'escapeToClose', 'targetEvent'],                                                // 4038
      options: bottomSheetDefaults                                                                                     // 4039
    });                                                                                                                // 4040
                                                                                                                       // 4041
  /* @ngInject */                                                                                                      // 4042
  function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $timeout, $compile, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {
    var backdrop;                                                                                                      // 4044
                                                                                                                       // 4045
    return {                                                                                                           // 4046
      themable: true,                                                                                                  // 4047
      targetEvent: null,                                                                                               // 4048
      onShow: onShow,                                                                                                  // 4049
      onRemove: onRemove,                                                                                              // 4050
      escapeToClose: true,                                                                                             // 4051
      disableParentScroll: true                                                                                        // 4052
    };                                                                                                                 // 4053
                                                                                                                       // 4054
                                                                                                                       // 4055
    function onShow(scope, element, options) {                                                                         // 4056
                                                                                                                       // 4057
      element = $mdUtil.extractElementByName(element, 'md-bottom-sheet');                                              // 4058
                                                                                                                       // 4059
      // Add a backdrop that will close on click                                                                       // 4060
      backdrop = $compile('<md-backdrop class="md-opaque md-bottom-sheet-backdrop">')(scope);                          // 4061
      backdrop.on('click', function() {                                                                                // 4062
        $timeout($mdBottomSheet.cancel);                                                                               // 4063
      });                                                                                                              // 4064
      $mdTheming.inherit(backdrop, options.parent);                                                                    // 4065
                                                                                                                       // 4066
      $animate.enter(backdrop, options.parent, null);                                                                  // 4067
                                                                                                                       // 4068
      var bottomSheet = new BottomSheet(element, options.parent);                                                      // 4069
      options.bottomSheet = bottomSheet;                                                                               // 4070
                                                                                                                       // 4071
      // Give up focus on calling item                                                                                 // 4072
      options.targetEvent && angular.element(options.targetEvent.target).blur();                                       // 4073
      $mdTheming.inherit(bottomSheet.element, options.parent);                                                         // 4074
                                                                                                                       // 4075
      if (options.disableParentScroll) {                                                                               // 4076
        options.lastOverflow = options.parent.css('overflow');                                                         // 4077
        options.parent.css('overflow', 'hidden');                                                                      // 4078
      }                                                                                                                // 4079
                                                                                                                       // 4080
      return $animate.enter(bottomSheet.element, options.parent)                                                       // 4081
        .then(function() {                                                                                             // 4082
          var focusable = angular.element(                                                                             // 4083
            element[0].querySelector('button') ||                                                                      // 4084
            element[0].querySelector('a') ||                                                                           // 4085
            element[0].querySelector('[ng-click]')                                                                     // 4086
          );                                                                                                           // 4087
          focusable.focus();                                                                                           // 4088
                                                                                                                       // 4089
          if (options.escapeToClose) {                                                                                 // 4090
            options.rootElementKeyupCallback = function(e) {                                                           // 4091
              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {                                                         // 4092
                $timeout($mdBottomSheet.cancel);                                                                       // 4093
              }                                                                                                        // 4094
            };                                                                                                         // 4095
            $rootElement.on('keyup', options.rootElementKeyupCallback);                                                // 4096
          }                                                                                                            // 4097
        });                                                                                                            // 4098
                                                                                                                       // 4099
    }                                                                                                                  // 4100
                                                                                                                       // 4101
    function onRemove(scope, element, options) {                                                                       // 4102
                                                                                                                       // 4103
      var bottomSheet = options.bottomSheet;                                                                           // 4104
                                                                                                                       // 4105
      $animate.leave(backdrop);                                                                                        // 4106
      return $animate.leave(bottomSheet.element).then(function() {                                                     // 4107
        if (options.disableParentScroll) {                                                                             // 4108
          options.parent.css('overflow', options.lastOverflow);                                                        // 4109
          delete options.lastOverflow;                                                                                 // 4110
        }                                                                                                              // 4111
                                                                                                                       // 4112
        bottomSheet.cleanup();                                                                                         // 4113
                                                                                                                       // 4114
        // Restore focus                                                                                               // 4115
        options.targetEvent && angular.element(options.targetEvent.target).focus();                                    // 4116
      });                                                                                                              // 4117
    }                                                                                                                  // 4118
                                                                                                                       // 4119
    /**                                                                                                                // 4120
     * BottomSheet class to apply bottom-sheet behavior to an element                                                  // 4121
     */                                                                                                                // 4122
    function BottomSheet(element, parent) {                                                                            // 4123
      var deregister = $mdGesture.register(parent, 'drag', { horizontal: false });                                     // 4124
      parent.on('$md.dragstart', onDragStart)                                                                          // 4125
        .on('$md.drag', onDrag)                                                                                        // 4126
        .on('$md.dragend', onDragEnd);                                                                                 // 4127
                                                                                                                       // 4128
      return {                                                                                                         // 4129
        element: element,                                                                                              // 4130
        cleanup: function cleanup() {                                                                                  // 4131
          deregister();                                                                                                // 4132
          parent.off('$md.dragstart', onDragStart)                                                                     // 4133
            .off('$md.drag', onDrag)                                                                                   // 4134
            .off('$md.dragend', onDragEnd);                                                                            // 4135
        }                                                                                                              // 4136
      };                                                                                                               // 4137
                                                                                                                       // 4138
      function onDragStart(ev) {                                                                                       // 4139
        // Disable transitions on transform so that it feels fast                                                      // 4140
        element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');                                                       // 4141
      }                                                                                                                // 4142
                                                                                                                       // 4143
      function onDrag(ev) {                                                                                            // 4144
        var transform = ev.pointer.distanceY;                                                                          // 4145
        if (transform < 5) {                                                                                           // 4146
          // Slow down drag when trying to drag up, and stop after PADDING                                             // 4147
          transform = Math.max(-PADDING, transform / 2);                                                               // 4148
        }                                                                                                              // 4149
        element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');                    // 4150
      }                                                                                                                // 4151
                                                                                                                       // 4152
      function onDragEnd(ev) {                                                                                         // 4153
        if (ev.pointer.distanceY > 0 &&                                                                                // 4154
            (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {                        // 4155
          var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;                                 // 4156
          var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);                     // 4157
          element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');                                 // 4158
          $timeout($mdBottomSheet.cancel);                                                                             // 4159
        } else {                                                                                                       // 4160
          element.css($mdConstant.CSS.TRANSITION_DURATION, '');                                                        // 4161
          element.css($mdConstant.CSS.TRANSFORM, '');                                                                  // 4162
        }                                                                                                              // 4163
      }                                                                                                                // 4164
    }                                                                                                                  // 4165
                                                                                                                       // 4166
  }                                                                                                                    // 4167
                                                                                                                       // 4168
}                                                                                                                      // 4169
MdBottomSheetProvider.$inject = ["$$interimElementProvider"];                                                          // 4170
                                                                                                                       // 4171
})();                                                                                                                  // 4172
(function(){                                                                                                           // 4173
"use strict";                                                                                                          // 4174
                                                                                                                       // 4175
/**                                                                                                                    // 4176
 * @ngdoc module                                                                                                       // 4177
 * @name material.components.button                                                                                    // 4178
 * @description                                                                                                        // 4179
 *                                                                                                                     // 4180
 * Button                                                                                                              // 4181
 */                                                                                                                    // 4182
angular                                                                                                                // 4183
    .module('material.components.button', [ 'material.core' ])                                                         // 4184
    .directive('mdButton', MdButtonDirective);                                                                         // 4185
                                                                                                                       // 4186
/**                                                                                                                    // 4187
 * @ngdoc directive                                                                                                    // 4188
 * @name mdButton                                                                                                      // 4189
 * @module material.components.button                                                                                  // 4190
 *                                                                                                                     // 4191
 * @restrict E                                                                                                         // 4192
 *                                                                                                                     // 4193
 * @description                                                                                                        // 4194
 * `<md-button>` is a button directive with optional ink ripples (default enabled).                                    // 4195
 *                                                                                                                     // 4196
 * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will                  // 4197
 * become a `<button>` element. As per the [Material Design specifications](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the FAB button background is filled with the accent color [by default]. The primary color palette may be used with  // 4199
 * the `md-primary` class.                                                                                             // 4200
 *                                                                                                                     // 4201
 * @param {boolean=} md-no-ink If present, disable ripple ink effects.                                                 // 4202
 * @param {expression=} ng-disabled En/Disable based on the expression                                                 // 4203
 * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`         // 4204
 * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.             // 4205
 * If no default text is found, a warning will be logged.                                                              // 4206
 *                                                                                                                     // 4207
 * @usage                                                                                                              // 4208
 *                                                                                                                     // 4209
 * Regular buttons:                                                                                                    // 4210
 *                                                                                                                     // 4211
 * <hljs lang="html">                                                                                                  // 4212
 *  <md-button> Flat Button </md-button>                                                                               // 4213
 *  <md-button href="http://google.com"> Flat link </md-button>                                                        // 4214
 *  <md-button class="md-raised"> Raised Button </md-button>                                                           // 4215
 *  <md-button ng-disabled="true"> Disabled Button </md-button>                                                        // 4216
 *  <md-button>                                                                                                        // 4217
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 4218
 *    Register Now                                                                                                     // 4219
 *  </md-button>                                                                                                       // 4220
 * </hljs>                                                                                                             // 4221
 *                                                                                                                     // 4222
 * FAB buttons:                                                                                                        // 4223
 *                                                                                                                     // 4224
 * <hljs lang="html">                                                                                                  // 4225
 *  <md-button class="md-fab" aria-label="FAB">                                                                        // 4226
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 4227
 *  </md-button>                                                                                                       // 4228
 *  <!-- mini-FAB -->                                                                                                  // 4229
 *  <md-button class="md-fab md-mini" aria-label="Mini FAB">                                                           // 4230
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 4231
 *  </md-button>                                                                                                       // 4232
 *  <!-- Button with SVG Icon -->                                                                                      // 4233
 *  <md-button class="md-icon-button" aria-label="Custom Icon Button">                                                 // 4234
 *    <md-icon md-svg-icon="path/to/your.svg"></md-icon>                                                               // 4235
 *  </md-button>                                                                                                       // 4236
 * </hljs>                                                                                                             // 4237
 */                                                                                                                    // 4238
function MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {                                        // 4239
                                                                                                                       // 4240
  return {                                                                                                             // 4241
    restrict: 'EA',                                                                                                    // 4242
    replace: true,                                                                                                     // 4243
    transclude: true,                                                                                                  // 4244
    template: getTemplate,                                                                                             // 4245
    link: postLink                                                                                                     // 4246
  };                                                                                                                   // 4247
                                                                                                                       // 4248
  function isAnchor(attr) {                                                                                            // 4249
    return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);
  }                                                                                                                    // 4251
                                                                                                                       // 4252
  function getTemplate(element, attr) {                                                                                // 4253
    return isAnchor(attr) ?                                                                                            // 4254
           '<a class="md-button" ng-transclude></a>' :                                                                 // 4255
           '<button class="md-button" ng-transclude></button>';                                                        // 4256
  }                                                                                                                    // 4257
                                                                                                                       // 4258
  function postLink(scope, element, attr) {                                                                            // 4259
    var node = element[0];                                                                                             // 4260
    $mdTheming(element);                                                                                               // 4261
    $mdButtonInkRipple.attach(scope, element);                                                                         // 4262
                                                                                                                       // 4263
    var elementHasText = node.textContent.trim();                                                                      // 4264
    if (!elementHasText) {                                                                                             // 4265
      $mdAria.expect(element, 'aria-label');                                                                           // 4266
    }                                                                                                                  // 4267
                                                                                                                       // 4268
    // For anchor elements, we have to set tabindex manually when the                                                  // 4269
    // element is disabled                                                                                             // 4270
    if (isAnchor(attr) && angular.isDefined(attr.ngDisabled) ) {                                                       // 4271
      scope.$watch(attr.ngDisabled, function(isDisabled) {                                                             // 4272
        element.attr('tabindex', isDisabled ? -1 : 0);                                                                 // 4273
      });                                                                                                              // 4274
    }                                                                                                                  // 4275
                                                                                                                       // 4276
    // disabling click event when disabled is true                                                                     // 4277
    element.on('click', function(e){                                                                                   // 4278
      if (attr.disabled === true) {                                                                                    // 4279
        e.preventDefault();                                                                                            // 4280
        e.stopImmediatePropagation();                                                                                  // 4281
      }                                                                                                                // 4282
    });                                                                                                                // 4283
                                                                                                                       // 4284
    // restrict focus styles to the keyboard                                                                           // 4285
    scope.mouseActive = false;                                                                                         // 4286
    element.on('mousedown', function() {                                                                               // 4287
        scope.mouseActive = true;                                                                                      // 4288
        $timeout(function(){                                                                                           // 4289
          scope.mouseActive = false;                                                                                   // 4290
        }, 100);                                                                                                       // 4291
      })                                                                                                               // 4292
      .on('focus', function() {                                                                                        // 4293
        if(scope.mouseActive === false) { element.addClass('md-focused'); }                                            // 4294
      })                                                                                                               // 4295
      .on('blur', function() { element.removeClass('md-focused'); });                                                  // 4296
  }                                                                                                                    // 4297
                                                                                                                       // 4298
}                                                                                                                      // 4299
MdButtonDirective.$inject = ["$mdButtonInkRipple", "$mdTheming", "$mdAria", "$timeout"];                               // 4300
                                                                                                                       // 4301
})();                                                                                                                  // 4302
(function(){                                                                                                           // 4303
"use strict";                                                                                                          // 4304
                                                                                                                       // 4305
/**                                                                                                                    // 4306
 * @ngdoc module                                                                                                       // 4307
 * @name material.components.card                                                                                      // 4308
 *                                                                                                                     // 4309
 * @description                                                                                                        // 4310
 * Card components.                                                                                                    // 4311
 */                                                                                                                    // 4312
angular.module('material.components.card', [                                                                           // 4313
  'material.core'                                                                                                      // 4314
])                                                                                                                     // 4315
  .directive('mdCard', mdCardDirective);                                                                               // 4316
                                                                                                                       // 4317
                                                                                                                       // 4318
                                                                                                                       // 4319
/**                                                                                                                    // 4320
 * @ngdoc directive                                                                                                    // 4321
 * @name mdCard                                                                                                        // 4322
 * @module material.components.card                                                                                    // 4323
 *                                                                                                                     // 4324
 * @restrict E                                                                                                         // 4325
 *                                                                                                                     // 4326
 * @description                                                                                                        // 4327
 * The `<md-card>` directive is a container element used within `<md-content>` containers.                             // 4328
 *                                                                                                                     // 4329
 * An image included as a direct descendant will fill the card's width, while the `<md-card-content>`                  // 4330
 * container will wrap text content and provide padding. An `<md-card-footer>` element can be                          // 4331
 * optionally included to put content flush against the bottom edge of the card.                                       // 4332
 *                                                                                                                     // 4333
 * Action buttons can be included in an element with the `.md-actions` class, also used in `md-dialog`.                // 4334
 * You can then position buttons using layout attributes.                                                              // 4335
 *                                                                                                                     // 4336
 * Cards have constant width and variable heights; where the maximum height is limited to what can                     // 4337
 * fit within a single view on a platform, but it can temporarily expand as needed.                                    // 4338
 *                                                                                                                     // 4339
 * @usage                                                                                                              // 4340
 * ###Card with optional footer                                                                                        // 4341
 * <hljs lang="html">                                                                                                  // 4342
 * <md-card>                                                                                                           // 4343
 *  <img src="card-image.png" class="md-card-image" alt="image caption">                                               // 4344
 *  <md-card-content>                                                                                                  // 4345
 *    <h2>Card headline</h2>                                                                                           // 4346
 *    <p>Card content</p>                                                                                              // 4347
 *  </md-card-content>                                                                                                 // 4348
 *  <md-card-footer>                                                                                                   // 4349
 *    Card footer                                                                                                      // 4350
 *  </md-card-footer>                                                                                                  // 4351
 * </md-card>                                                                                                          // 4352
 * </hljs>                                                                                                             // 4353
 *                                                                                                                     // 4354
 * ###Card with actions                                                                                                // 4355
 * <hljs lang="html">                                                                                                  // 4356
 * <md-card>                                                                                                           // 4357
 *  <img src="card-image.png" class="md-card-image" alt="image caption">                                               // 4358
 *  <md-card-content>                                                                                                  // 4359
 *    <h2>Card headline</h2>                                                                                           // 4360
 *    <p>Card content</p>                                                                                              // 4361
 *  </md-card-content>                                                                                                 // 4362
 *  <div class="md-actions" layout="row" layout-align="end center">                                                    // 4363
 *    <md-button>Action 1</md-button>                                                                                  // 4364
 *    <md-button>Action 2</md-button>                                                                                  // 4365
 *  </div>                                                                                                             // 4366
 * </md-card>                                                                                                          // 4367
 * </hljs>                                                                                                             // 4368
 *                                                                                                                     // 4369
 */                                                                                                                    // 4370
function mdCardDirective($mdTheming) {                                                                                 // 4371
  return {                                                                                                             // 4372
    restrict: 'E',                                                                                                     // 4373
    link: function($scope, $element, $attr) {                                                                          // 4374
      $mdTheming($element);                                                                                            // 4375
    }                                                                                                                  // 4376
  };                                                                                                                   // 4377
}                                                                                                                      // 4378
mdCardDirective.$inject = ["$mdTheming"];                                                                              // 4379
                                                                                                                       // 4380
})();                                                                                                                  // 4381
(function(){                                                                                                           // 4382
"use strict";                                                                                                          // 4383
                                                                                                                       // 4384
/**                                                                                                                    // 4385
 * @ngdoc module                                                                                                       // 4386
 * @name material.components.checkbox                                                                                  // 4387
 * @description Checkbox module!                                                                                       // 4388
 */                                                                                                                    // 4389
angular                                                                                                                // 4390
  .module('material.components.checkbox', ['material.core'])                                                           // 4391
  .directive('mdCheckbox', MdCheckboxDirective);                                                                       // 4392
                                                                                                                       // 4393
/**                                                                                                                    // 4394
 * @ngdoc directive                                                                                                    // 4395
 * @name mdCheckbox                                                                                                    // 4396
 * @module material.components.checkbox                                                                                // 4397
 * @restrict E                                                                                                         // 4398
 *                                                                                                                     // 4399
 * @description                                                                                                        // 4400
 * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *                                                                                                                     // 4402
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 4403
 * the checkbox is in the accent color by default. The primary color palette may be used with                          // 4404
 * the `md-primary` class.                                                                                             // 4405
 *                                                                                                                     // 4406
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 4407
 * @param {string=} name Property name of the form under which the control is published.                               // 4408
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.                   // 4409
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.              // 4410
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects                                    // 4412
 * @param {string=} aria-label Adds label to checkbox for accessibility.                                               // 4413
 * Defaults to checkbox's text. If no default text is found, a warning will be logged.                                 // 4414
 *                                                                                                                     // 4415
 * @usage                                                                                                              // 4416
 * <hljs lang="html">                                                                                                  // 4417
 * <md-checkbox ng-model="isChecked" aria-label="Finished?">                                                           // 4418
 *   Finished ?                                                                                                        // 4419
 * </md-checkbox>                                                                                                      // 4420
 *                                                                                                                     // 4421
 * <md-checkbox md-no-ink ng-model="hasInk" aria-label="No Ink Effects">                                               // 4422
 *   No Ink Effects                                                                                                    // 4423
 * </md-checkbox>                                                                                                      // 4424
 *                                                                                                                     // 4425
 * <md-checkbox ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">                                        // 4426
 *   Disabled                                                                                                          // 4427
 * </md-checkbox>                                                                                                      // 4428
 *                                                                                                                     // 4429
 * </hljs>                                                                                                             // 4430
 *                                                                                                                     // 4431
 */                                                                                                                    // 4432
function MdCheckboxDirective(inputDirective, $mdInkRipple, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {      // 4433
  inputDirective = inputDirective[0];                                                                                  // 4434
  var CHECKED_CSS = 'md-checked';                                                                                      // 4435
                                                                                                                       // 4436
  return {                                                                                                             // 4437
    restrict: 'E',                                                                                                     // 4438
    transclude: true,                                                                                                  // 4439
    require: '?ngModel',                                                                                               // 4440
    priority:210, // Run before ngAria                                                                                 // 4441
    template:                                                                                                          // 4442
      '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +                                              // 4443
        '<div class="md-icon"></div>' +                                                                                // 4444
      '</div>' +                                                                                                       // 4445
      '<div ng-transclude class="md-label"></div>',                                                                    // 4446
    compile: compile                                                                                                   // 4447
  };                                                                                                                   // 4448
                                                                                                                       // 4449
  // **********************************************************                                                        // 4450
  // Private Methods                                                                                                   // 4451
  // **********************************************************                                                        // 4452
                                                                                                                       // 4453
  function compile (tElement, tAttrs) {                                                                                // 4454
                                                                                                                       // 4455
    tAttrs.type = 'checkbox';                                                                                          // 4456
    tAttrs.tabindex = tAttrs.tabindex || '0';                                                                          // 4457
    tElement.attr('role', tAttrs.type);                                                                                // 4458
                                                                                                                       // 4459
    return function postLink(scope, element, attr, ngModelCtrl) {                                                      // 4460
      ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();                                                              // 4461
      $mdTheming(element);                                                                                             // 4462
                                                                                                                       // 4463
      if (attr.ngChecked) {                                                                                            // 4464
        scope.$watch(                                                                                                  // 4465
            scope.$eval.bind(scope, attr.ngChecked),                                                                   // 4466
            ngModelCtrl.$setViewValue.bind(ngModelCtrl)                                                                // 4467
        );                                                                                                             // 4468
      }                                                                                                                // 4469
      $$watchExpr('ngDisabled', 'tabindex', {                                                                          // 4470
        true: '-1',                                                                                                    // 4471
        false: attr.tabindex                                                                                           // 4472
      });                                                                                                              // 4473
      $mdAria.expectWithText(element, 'aria-label');                                                                   // 4474
                                                                                                                       // 4475
      // Reuse the original input[type=checkbox] directive from Angular core.                                          // 4476
      // This is a bit hacky as we need our own event listener and own render                                          // 4477
      // function.                                                                                                     // 4478
      inputDirective.link.pre(scope, {                                                                                 // 4479
        on: angular.noop,                                                                                              // 4480
        0: {}                                                                                                          // 4481
      }, attr, [ngModelCtrl]);                                                                                         // 4482
                                                                                                                       // 4483
      scope.mouseActive = false;                                                                                       // 4484
      element.on('click', listener)                                                                                    // 4485
        .on('keypress', keypressHandler)                                                                               // 4486
        .on('mousedown', function() {                                                                                  // 4487
          scope.mouseActive = true;                                                                                    // 4488
          $timeout(function(){                                                                                         // 4489
            scope.mouseActive = false;                                                                                 // 4490
          }, 100);                                                                                                     // 4491
        })                                                                                                             // 4492
        .on('focus', function() {                                                                                      // 4493
          if(scope.mouseActive === false) { element.addClass('md-focused'); }                                          // 4494
        })                                                                                                             // 4495
        .on('blur', function() { element.removeClass('md-focused'); });                                                // 4496
                                                                                                                       // 4497
      ngModelCtrl.$render = render;                                                                                    // 4498
                                                                                                                       // 4499
      function $$watchExpr(expr, htmlAttr, valueOpts) {                                                                // 4500
        if (attr[expr]) {                                                                                              // 4501
          scope.$watch(attr[expr], function(val) {                                                                     // 4502
            if (valueOpts[val]) {                                                                                      // 4503
              element.attr(htmlAttr, valueOpts[val]);                                                                  // 4504
            }                                                                                                          // 4505
          });                                                                                                          // 4506
        }                                                                                                              // 4507
      }                                                                                                                // 4508
                                                                                                                       // 4509
      function keypressHandler(ev) {                                                                                   // 4510
        var keyCode = ev.which || ev.keyCode;                                                                          // 4511
        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {                        // 4512
          ev.preventDefault();                                                                                         // 4513
          if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }                                     // 4514
          listener(ev);                                                                                                // 4515
        }                                                                                                              // 4516
      }                                                                                                                // 4517
      function listener(ev) {                                                                                          // 4518
        if (element[0].hasAttribute('disabled')) return;                                                               // 4519
                                                                                                                       // 4520
        scope.$apply(function() {                                                                                      // 4521
          // Toggle the checkbox value...                                                                              // 4522
          var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;                                     // 4523
                                                                                                                       // 4524
          ngModelCtrl.$setViewValue( viewValue, ev && ev.type);                                                        // 4525
          ngModelCtrl.$render();                                                                                       // 4526
        });                                                                                                            // 4527
      }                                                                                                                // 4528
                                                                                                                       // 4529
      function render() {                                                                                              // 4530
        if(ngModelCtrl.$viewValue) {                                                                                   // 4531
          element.addClass(CHECKED_CSS);                                                                               // 4532
        } else {                                                                                                       // 4533
          element.removeClass(CHECKED_CSS);                                                                            // 4534
        }                                                                                                              // 4535
      }                                                                                                                // 4536
    };                                                                                                                 // 4537
  }                                                                                                                    // 4538
}                                                                                                                      // 4539
MdCheckboxDirective.$inject = ["inputDirective", "$mdInkRipple", "$mdAria", "$mdConstant", "$mdTheming", "$mdUtil", "$timeout"];
                                                                                                                       // 4541
})();                                                                                                                  // 4542
(function(){                                                                                                           // 4543
"use strict";                                                                                                          // 4544
                                                                                                                       // 4545
/**                                                                                                                    // 4546
 * @ngdoc module                                                                                                       // 4547
 * @name material.components.chips                                                                                     // 4548
 */                                                                                                                    // 4549
/*                                                                                                                     // 4550
 * @see js folder for chips implementation                                                                             // 4551
 */                                                                                                                    // 4552
angular.module('material.components.chips', [                                                                          // 4553
  'material.core',                                                                                                     // 4554
  'material.components.autocomplete'                                                                                   // 4555
]);                                                                                                                    // 4556
                                                                                                                       // 4557
})();                                                                                                                  // 4558
(function(){                                                                                                           // 4559
"use strict";                                                                                                          // 4560
                                                                                                                       // 4561
/**                                                                                                                    // 4562
 * @ngdoc module                                                                                                       // 4563
 * @name material.components.content                                                                                   // 4564
 *                                                                                                                     // 4565
 * @description                                                                                                        // 4566
 * Scrollable content                                                                                                  // 4567
 */                                                                                                                    // 4568
angular.module('material.components.content', [                                                                        // 4569
  'material.core'                                                                                                      // 4570
])                                                                                                                     // 4571
  .directive('mdContent', mdContentDirective);                                                                         // 4572
                                                                                                                       // 4573
/**                                                                                                                    // 4574
 * @ngdoc directive                                                                                                    // 4575
 * @name mdContent                                                                                                     // 4576
 * @module material.components.content                                                                                 // 4577
 *                                                                                                                     // 4578
 * @restrict E                                                                                                         // 4579
 *                                                                                                                     // 4580
 * @description                                                                                                        // 4581
 * The `<md-content>` directive is a container element useful for scrollable content                                   // 4582
 *                                                                                                                     // 4583
 * @usage                                                                                                              // 4584
 *                                                                                                                     // 4585
 * - Add the `[layout-padding]` attribute to make the content padded.                                                  // 4586
 *                                                                                                                     // 4587
 * <hljs lang="html">                                                                                                  // 4588
 *  <md-content layout-padding>                                                                                        // 4589
 *      Lorem ipsum dolor sit amet, ne quod novum mei.                                                                 // 4590
 *  </md-content>                                                                                                      // 4591
 * </hljs>                                                                                                             // 4592
 *                                                                                                                     // 4593
 */                                                                                                                    // 4594
                                                                                                                       // 4595
function mdContentDirective($mdTheming) {                                                                              // 4596
  return {                                                                                                             // 4597
    restrict: 'E',                                                                                                     // 4598
    controller: ['$scope', '$element', ContentController],                                                             // 4599
    link: function(scope, element, attr) {                                                                             // 4600
      var node = element[0];                                                                                           // 4601
                                                                                                                       // 4602
      $mdTheming(element);                                                                                             // 4603
      scope.$broadcast('$mdContentLoaded', element);                                                                   // 4604
                                                                                                                       // 4605
      iosScrollFix(element[0]);                                                                                        // 4606
    }                                                                                                                  // 4607
  };                                                                                                                   // 4608
                                                                                                                       // 4609
  function ContentController($scope, $element) {                                                                       // 4610
    this.$scope = $scope;                                                                                              // 4611
    this.$element = $element;                                                                                          // 4612
  }                                                                                                                    // 4613
}                                                                                                                      // 4614
mdContentDirective.$inject = ["$mdTheming"];                                                                           // 4615
                                                                                                                       // 4616
function iosScrollFix(node) {                                                                                          // 4617
  // IOS FIX:                                                                                                          // 4618
  // If we scroll where there is no more room for the webview to scroll,                                               // 4619
  // by default the webview itself will scroll up and down, this looks really                                          // 4620
  // bad.  So if we are scrolling to the very top or bottom, add/subtract one                                          // 4621
  angular.element(node).on('$md.pressdown', function(ev) {                                                             // 4622
    // Only touch events                                                                                               // 4623
    if (ev.pointer.type !== 't') return;                                                                               // 4624
    // Don't let a child content's touchstart ruin it for us.                                                          // 4625
    if (ev.$materialScrollFixed) return;                                                                               // 4626
    ev.$materialScrollFixed = true;                                                                                    // 4627
                                                                                                                       // 4628
    if (node.scrollTop === 0) {                                                                                        // 4629
      node.scrollTop = 1;                                                                                              // 4630
    } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {                                             // 4631
      node.scrollTop -= 1;                                                                                             // 4632
    }                                                                                                                  // 4633
  });                                                                                                                  // 4634
}                                                                                                                      // 4635
                                                                                                                       // 4636
})();                                                                                                                  // 4637
(function(){                                                                                                           // 4638
"use strict";                                                                                                          // 4639
                                                                                                                       // 4640
/**                                                                                                                    // 4641
 * @ngdoc module                                                                                                       // 4642
 * @name material.components.dialog                                                                                    // 4643
 */                                                                                                                    // 4644
angular.module('material.components.dialog', [                                                                         // 4645
  'material.core',                                                                                                     // 4646
  'material.components.backdrop'                                                                                       // 4647
])                                                                                                                     // 4648
  .directive('mdDialog', MdDialogDirective)                                                                            // 4649
  .provider('$mdDialog', MdDialogProvider);                                                                            // 4650
                                                                                                                       // 4651
function MdDialogDirective($$rAF, $mdTheming) {                                                                        // 4652
  return {                                                                                                             // 4653
    restrict: 'E',                                                                                                     // 4654
    link: function(scope, element, attr) {                                                                             // 4655
      $mdTheming(element);                                                                                             // 4656
      $$rAF(function() {                                                                                               // 4657
        var content = element[0].querySelector('md-dialog-content');                                                   // 4658
        if (content && content.scrollHeight > content.clientHeight) {                                                  // 4659
          element.addClass('md-content-overflow');                                                                     // 4660
        }                                                                                                              // 4661
      });                                                                                                              // 4662
    }                                                                                                                  // 4663
  };                                                                                                                   // 4664
}                                                                                                                      // 4665
MdDialogDirective.$inject = ["$$rAF", "$mdTheming"];                                                                   // 4666
                                                                                                                       // 4667
/**                                                                                                                    // 4668
 * @ngdoc service                                                                                                      // 4669
 * @name $mdDialog                                                                                                     // 4670
 * @module material.components.dialog                                                                                  // 4671
 *                                                                                                                     // 4672
 * @description                                                                                                        // 4673
 * `$mdDialog` opens a dialog over the app to inform users about critical information or require                       // 4674
 *  them to make decisions. There are two approaches for setup: a simple promise API                                   // 4675
 *  and regular object syntax.                                                                                         // 4676
 *                                                                                                                     // 4677
 * ## Restrictions                                                                                                     // 4678
 *                                                                                                                     // 4679
 * - The dialog is always given an isolate scope.                                                                      // 4680
 * - The dialog's template must have an outer `<md-dialog>` element.                                                   // 4681
 *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use                                    // 4682
 *   an element with class `md-actions` for the dialog's actions.                                                      // 4683
 * - Dialogs must cover the entire application to keep interactions inside of them.                                    // 4684
 * Use the `parent` option to change where dialogs are appended.                                                       // 4685
 *                                                                                                                     // 4686
 * ## Sizing                                                                                                           // 4687
 * - Complex dialogs can be sized with `flex="percentage"`, i.e. `flex="66"`.                                          // 4688
 * - Default max-width is 80% of the `rootElement` or `parent`.                                                        // 4689
 *                                                                                                                     // 4690
 * @usage                                                                                                              // 4691
 * <hljs lang="html">                                                                                                  // 4692
 * <div  ng-app="demoApp" ng-controller="EmployeeController">                                                          // 4693
 *   <div>                                                                                                             // 4694
 *     <md-button ng-click="showAlert()" class="md-raised md-warn">                                                    // 4695
 *       Employee Alert!                                                                                               // 4696
 *       </md-button>                                                                                                  // 4697
 *   </div>                                                                                                            // 4698
 *   <div>                                                                                                             // 4699
 *     <md-button ng-click="showDialog($event)" class="md-raised">                                                     // 4700
 *       Custom Dialog                                                                                                 // 4701
 *       </md-button>                                                                                                  // 4702
 *   </div>                                                                                                            // 4703
 *   <div>                                                                                                             // 4704
 *     <md-button ng-click="closeAlert()" ng-disabled="!hasAlert()" class="md-raised">                                 // 4705
 *       Close Alert                                                                                                   // 4706
 *     </md-button>                                                                                                    // 4707
 *   </div>                                                                                                            // 4708
 *   <div>                                                                                                             // 4709
 *     <md-button ng-click="showGreeting($event)" class="md-raised md-primary" >                                       // 4710
 *       Greet Employee                                                                                                // 4711
 *       </md-button>                                                                                                  // 4712
 *   </div>                                                                                                            // 4713
 * </div>                                                                                                              // 4714
 * </hljs>                                                                                                             // 4715
 *                                                                                                                     // 4716
 * ### JavaScript: object syntax                                                                                       // 4717
 * <hljs lang="js">                                                                                                    // 4718
 * (function(angular, undefined){                                                                                      // 4719
 *   "use strict";                                                                                                     // 4720
 *                                                                                                                     // 4721
 *   angular                                                                                                           // 4722
 *    .module('demoApp', ['ngMaterial'])                                                                               // 4723
 *    .controller('AppCtrl', AppController);                                                                           // 4724
 *                                                                                                                     // 4725
 *   function AppController($scope, $mdDialog) {                                                                       // 4726
 *     var alert;                                                                                                      // 4727
 *     $scope.showAlert = showAlert;                                                                                   // 4728
 *     $scope.showDialog = showDialog;                                                                                 // 4729
 *     $scope.items = [1, 2, 3];                                                                                       // 4730
 *                                                                                                                     // 4731
 *     // Internal method                                                                                              // 4732
 *     function showAlert() {                                                                                          // 4733
 *       alert = $mdDialog.alert({                                                                                     // 4734
 *         title: 'Attention',                                                                                         // 4735
 *         content: 'This is an example of how easy dialogs can be!',                                                  // 4736
 *         ok: 'Close'                                                                                                 // 4737
 *       });                                                                                                           // 4738
 *                                                                                                                     // 4739
 *       $mdDialog                                                                                                     // 4740
 *         .show( alert )                                                                                              // 4741
 *         .finally(function() {                                                                                       // 4742
 *           alert = undefined;                                                                                        // 4743
 *         });                                                                                                         // 4744
 *     }                                                                                                               // 4745
 *                                                                                                                     // 4746
 *     function showDialog($event) {                                                                                   // 4747
 *        var parentEl = angular.element(document.body);                                                               // 4748
 *        $mdDialog.show({                                                                                             // 4749
 *          parent: parentEl,                                                                                          // 4750
 *          targetEvent: $event,                                                                                       // 4751
 *          template:                                                                                                  // 4752
 *            '<md-dialog aria-label="List dialog">' +                                                                 // 4753
 *            '  <md-dialog-content>'+                                                                                 // 4754
 *            '    <md-list>'+                                                                                         // 4755
 *            '      <md-list-item ng-repeat="item in items">'+                                                        // 4756
 *            '       <p>Number {{item}}</p>' +                                                                        // 4757
 *            '      </md-item>'+                                                                                      // 4758
 *            '    </md-list>'+                                                                                        // 4759
 *            '  </md-dialog-content>' +                                                                               // 4760
 *            '  <div class="md-actions">' +                                                                           // 4761
 *            '    <md-button ng-click="closeDialog()" class="md-primary">' +                                          // 4762
 *            '      Close Dialog' +                                                                                   // 4763
 *            '    </md-button>' +                                                                                     // 4764
 *            '  </div>' +                                                                                             // 4765
 *            '</md-dialog>',                                                                                          // 4766
 *          locals: {                                                                                                  // 4767
 *            items: $scope.items                                                                                      // 4768
 *          },                                                                                                         // 4769
 *          controller: DialogController                                                                               // 4770
 *       });                                                                                                           // 4771
 *       function DialogController(scope, $mdDialog, items) {                                                          // 4772
 *         scope.items = items;                                                                                        // 4773
 *         scope.closeDialog = function() {                                                                            // 4774
 *           $mdDialog.hide();                                                                                         // 4775
 *         }                                                                                                           // 4776
 *       }                                                                                                             // 4777
 *     }                                                                                                               // 4778
 *                                                                                                                     // 4779
 * })(angular);                                                                                                        // 4780
 * </hljs>                                                                                                             // 4781
 *                                                                                                                     // 4782
 * ### JavaScript: promise API syntax, custom dialog template                                                          // 4783
 * <hljs lang="js">                                                                                                    // 4784
 * (function(angular, undefined){                                                                                      // 4785
 *   "use strict";                                                                                                     // 4786
 *                                                                                                                     // 4787
 *   angular                                                                                                           // 4788
 *     .module('demoApp', ['ngMaterial'])                                                                              // 4789
 *     .controller('EmployeeController', EmployeeEditor)                                                               // 4790
 *     .controller('GreetingController', GreetingController);                                                          // 4791
 *                                                                                                                     // 4792
 *   // Fictitious Employee Editor to show how to use simple and complex dialogs.                                      // 4793
 *                                                                                                                     // 4794
 *   function EmployeeEditor($scope, $mdDialog) {                                                                      // 4795
 *     var alert;                                                                                                      // 4796
 *                                                                                                                     // 4797
 *     $scope.showAlert = showAlert;                                                                                   // 4798
 *     $scope.closeAlert = closeAlert;                                                                                 // 4799
 *     $scope.showGreeting = showCustomGreeting;                                                                       // 4800
 *                                                                                                                     // 4801
 *     $scope.hasAlert = function() { return !!alert };                                                                // 4802
 *     $scope.userName = $scope.userName || 'Bobby';                                                                   // 4803
 *                                                                                                                     // 4804
 *     // Dialog #1 - Show simple alert dialog and cache                                                               // 4805
 *     // reference to dialog instance                                                                                 // 4806
 *                                                                                                                     // 4807
 *     function showAlert() {                                                                                          // 4808
 *       alert = $mdDialog.alert()                                                                                     // 4809
 *         .title('Attention, ' + $scope.userName)                                                                     // 4810
 *         .content('This is an example of how easy dialogs can be!')                                                  // 4811
 *         .ok('Close');                                                                                               // 4812
 *                                                                                                                     // 4813
 *       $mdDialog                                                                                                     // 4814
 *           .show( alert )                                                                                            // 4815
 *           .finally(function() {                                                                                     // 4816
 *             alert = undefined;                                                                                      // 4817
 *           });                                                                                                       // 4818
 *     }                                                                                                               // 4819
 *                                                                                                                     // 4820
 *     // Close the specified dialog instance and resolve with 'finished' flag                                         // 4821
 *     // Normally this is not needed, just use '$mdDialog.hide()' to close                                            // 4822
 *     // the most recent dialog popup.                                                                                // 4823
 *                                                                                                                     // 4824
 *     function closeAlert() {                                                                                         // 4825
 *       $mdDialog.hide( alert, "finished" );                                                                          // 4826
 *       alert = undefined;                                                                                            // 4827
 *     }                                                                                                               // 4828
 *                                                                                                                     // 4829
 *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.                                         // 4830
 *                                                                                                                     // 4831
 *     function showCustomGreeting($event) {                                                                           // 4832
 *         $mdDialog.show({                                                                                            // 4833
 *           targetEvent: $event,                                                                                      // 4834
 *           template:                                                                                                 // 4835
 *             '<md-dialog>' +                                                                                         // 4836
 *                                                                                                                     // 4837
 *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +                                      // 4838
 *                                                                                                                     // 4839
 *             '  <div class="md-actions">' +                                                                          // 4840
 *             '    <md-button ng-click="closeDialog()" class="md-primary">' +                                         // 4841
 *             '      Close Greeting' +                                                                                // 4842
 *             '    </md-button>' +                                                                                    // 4843
 *             '  </div>' +                                                                                            // 4844
 *             '</md-dialog>',                                                                                         // 4845
 *           controller: 'GreetingController',                                                                         // 4846
 *           onComplete: afterShowAnimation,                                                                           // 4847
 *           locals: { employee: $scope.userName }                                                                     // 4848
 *         });                                                                                                         // 4849
 *                                                                                                                     // 4850
 *         // When the 'enter' animation finishes...                                                                   // 4851
 *                                                                                                                     // 4852
 *         function afterShowAnimation(scope, element, options) {                                                      // 4853
 *            // post-show code here: DOM element focus, etc.                                                          // 4854
 *         }                                                                                                           // 4855
 *     }                                                                                                               // 4856
 *                                                                                                                     // 4857
 *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog                                     // 4858
 *     //             Here we used ng-controller="GreetingController as vm" and                                        // 4859
 *     //             $scope.vm === <controller instance>                                                              // 4860
 *                                                                                                                     // 4861
 *     function showCustomGreeting() {                                                                                 // 4862
 *                                                                                                                     // 4863
 *        $mdDialog.show({                                                                                             // 4864
 *           clickOutsideToClose: true,                                                                                // 4865
 *                                                                                                                     // 4866
 *           scope: $scope,        // use parent scope in template                                                     // 4867
 *           preserveScope: true,  // do not forget this if use parent scope                                           // 4868
                                                                                                                       // 4869
 *           // Since GreetingController is instantiated with ControllerAs syntax                                      // 4870
 *           // AND we are passing the parent '$scope' to the dialog, we MUST                                          // 4871
 *           // use 'vm.<xxx>' in the template markup                                                                  // 4872
 *                                                                                                                     // 4873
 *           template: '<md-dialog>' +                                                                                 // 4874
 *                     '  <md-dialog-content>' +                                                                       // 4875
 *                     '     Hi There {{vm.employee}}' +                                                               // 4876
 *                     '  </md-dialog-content>' +                                                                      // 4877
 *                     '</md-dialog>',                                                                                 // 4878
 *                                                                                                                     // 4879
 *           controller: function DialogController($scope, $mdDialog) {                                                // 4880
 *             $scope.closeDialog = function() {                                                                       // 4881
 *               $mdDialog.hide();                                                                                     // 4882
 *             }                                                                                                       // 4883
 *           }                                                                                                         // 4884
 *        });                                                                                                          // 4885
 *     }                                                                                                               // 4886
 *                                                                                                                     // 4887
 *   }                                                                                                                 // 4888
 *                                                                                                                     // 4889
 *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog                            // 4890
 *                                                                                                                     // 4891
 *   function GreetingController($scope, $mdDialog, employee) {                                                        // 4892
 *     // Assigned from construction <code>locals</code> options...                                                    // 4893
 *     $scope.employee = employee;                                                                                     // 4894
 *                                                                                                                     // 4895
 *     $scope.closeDialog = function() {                                                                               // 4896
 *       // Easily hides most recent dialog shown...                                                                   // 4897
 *       // no specific instance reference is needed.                                                                  // 4898
 *       $mdDialog.hide();                                                                                             // 4899
 *     };                                                                                                              // 4900
 *   }                                                                                                                 // 4901
 *                                                                                                                     // 4902
 * })(angular);                                                                                                        // 4903
 * </hljs>                                                                                                             // 4904
 */                                                                                                                    // 4905
                                                                                                                       // 4906
 /**                                                                                                                   // 4907
 * @ngdoc method                                                                                                       // 4908
 * @name $mdDialog#alert                                                                                               // 4909
 *                                                                                                                     // 4910
 * @description                                                                                                        // 4911
 * Builds a preconfigured dialog with the specified message.                                                           // 4912
 *                                                                                                                     // 4913
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:                                       // 4914
 *                                                                                                                     // 4915
 * - $mdDialogPreset#title(string) - sets title to string                                                              // 4916
 * - $mdDialogPreset#content(string) - sets content / message to string                                                // 4917
 * - $mdDialogPreset#ok(string) - sets okay button text to string                                                      // 4918
 * - $mdDialogPreset#theme(string) - sets the theme of the dialog                                                      // 4919
 *                                                                                                                     // 4920
 */                                                                                                                    // 4921
                                                                                                                       // 4922
 /**                                                                                                                   // 4923
 * @ngdoc method                                                                                                       // 4924
 * @name $mdDialog#confirm                                                                                             // 4925
 *                                                                                                                     // 4926
 * @description                                                                                                        // 4927
 * Builds a preconfigured dialog with the specified message. You can call show and the promise returned                // 4928
 * will be resolved only if the user clicks the confirm action on the dialog.                                          // 4929
 *                                                                                                                     // 4930
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:                                       // 4931
 *                                                                                                                     // 4932
 * Additionally, it supports the following methods:                                                                    // 4933
 *                                                                                                                     // 4934
 * - $mdDialogPreset#title(string) - sets title to string                                                              // 4935
 * - $mdDialogPreset#content(string) - sets content / message to string                                                // 4936
 * - $mdDialogPreset#ok(string) - sets okay button text to string                                                      // 4937
 * - $mdDialogPreset#cancel(string) - sets cancel button text to string                                                // 4938
 * - $mdDialogPreset#theme(string) - sets the theme of the dialog                                                      // 4939
 *                                                                                                                     // 4940
 */                                                                                                                    // 4941
                                                                                                                       // 4942
/**                                                                                                                    // 4943
 * @ngdoc method                                                                                                       // 4944
 * @name $mdDialog#show                                                                                                // 4945
 *                                                                                                                     // 4946
 * @description                                                                                                        // 4947
 * Show a dialog with the specified options.                                                                           // 4948
 *                                                                                                                     // 4949
 * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and                    // 4950
 * `confirm()`, or an options object with the following properties:                                                    // 4951
 *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content                             // 4952
 *   of the dialog.                                                                                                    // 4953
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual template string.                        // 4954
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,                        // 4955
 *     the location of the click will be used as the starting point for the opening animation                          // 4956
 *     of the the dialog.                                                                                              // 4957
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,                    // 4958
 *     it will create a new isolate scope.                                                                             // 4959
 *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.                  // 4960
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false     // 4961
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.                    // 4962
 *     Default true.                                                                                                   // 4963
 *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.                     // 4964
 *     Default true.                                                                                                   // 4965
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to                          // 4966
 *     close it. Default false.                                                                                        // 4967
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.                          // 4968
 *     Default true.                                                                                                   // 4969
 *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if                     // 4970
 *     focusing some other way, as focus management is required for dialogs to be accessible.                          // 4971
 *     Defaults to true.                                                                                               // 4972
 *   - `controller` - `{string=}`: The controller to associate with the dialog. The controller                         // 4973
 *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.                         // 4974
 *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names                    // 4975
 *     of values to inject into the controller. For example, `locals: {three: 3}` would inject                         // 4976
 *     `three` into the controller, with the value 3. If `bindToController` is true, they will be                      // 4977
 *     copied to the controller instead.                                                                               // 4978
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.                     // 4979
 *     These values will not be available until after initialization.                                                  // 4980
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the                         // 4981
 *     dialog will not open until all of the promises resolve.                                                         // 4982
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                                // 4983
 *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending                             // 4984
 *     to the root element of the application.                                                                         // 4985
 *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is                        // 4986
 *     finished.                                                                                                       // 4987
 *                                                                                                                     // 4988
 * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or                                        // 4989
 * rejected with `$mdDialog.cancel()`.                                                                                 // 4990
 */                                                                                                                    // 4991
                                                                                                                       // 4992
/**                                                                                                                    // 4993
 * @ngdoc method                                                                                                       // 4994
 * @name $mdDialog#hide                                                                                                // 4995
 *                                                                                                                     // 4996
 * @description                                                                                                        // 4997
 * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.                                   // 4998
 *                                                                                                                     // 4999
 * @param {*=} response An argument for the resolved promise.                                                          // 5000
 */                                                                                                                    // 5001
                                                                                                                       // 5002
/**                                                                                                                    // 5003
 * @ngdoc method                                                                                                       // 5004
 * @name $mdDialog#cancel                                                                                              // 5005
 *                                                                                                                     // 5006
 * @description                                                                                                        // 5007
 * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.                                    // 5008
 *                                                                                                                     // 5009
 * @param {*=} response An argument for the rejected promise.                                                          // 5010
 */                                                                                                                    // 5011
                                                                                                                       // 5012
function MdDialogProvider($$interimElementProvider) {                                                                  // 5013
                                                                                                                       // 5014
  var alertDialogMethods = ['title', 'content', 'ariaLabel', 'ok'];                                                    // 5015
                                                                                                                       // 5016
  advancedDialogOptions.$inject = ["$mdDialog", "$mdTheming"];                                                         // 5017
  dialogDefaultOptions.$inject = ["$mdAria", "$document", "$mdUtil", "$mdConstant", "$mdTheming", "$mdDialog", "$timeout", "$rootElement", "$animate", "$$rAF", "$q"];
  return $$interimElementProvider('$mdDialog')                                                                         // 5019
    .setDefaults({                                                                                                     // 5020
      methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent', 'parent'],
      options: dialogDefaultOptions                                                                                    // 5022
    })                                                                                                                 // 5023
    .addPreset('alert', {                                                                                              // 5024
      methods: ['title', 'content', 'ariaLabel', 'ok', 'theme'],                                                       // 5025
      options: advancedDialogOptions                                                                                   // 5026
    })                                                                                                                 // 5027
    .addPreset('confirm', {                                                                                            // 5028
      methods: ['title', 'content', 'ariaLabel', 'ok', 'cancel', 'theme'],                                             // 5029
      options: advancedDialogOptions                                                                                   // 5030
    });                                                                                                                // 5031
                                                                                                                       // 5032
  /* @ngInject */                                                                                                      // 5033
  function advancedDialogOptions($mdDialog, $mdTheming) {                                                              // 5034
    return {                                                                                                           // 5035
      template: [                                                                                                      // 5036
        '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}">',                               // 5037
          '<md-dialog-content role="document" tabIndex="-1">',                                                         // 5038
            '<h2 class="md-title">{{ dialog.title }}</h2>',                                                            // 5039
            '<p>{{ dialog.content }}</p>',                                                                             // 5040
          '</md-dialog-content>',                                                                                      // 5041
          '<div class="md-actions">',                                                                                  // 5042
            '<md-button ng-if="dialog.$type == \'confirm\'"' +                                                         // 5043
                      ' ng-click="dialog.abort()" class="md-primary">',                                                // 5044
              '{{ dialog.cancel }}',                                                                                   // 5045
            '</md-button>',                                                                                            // 5046
            '<md-button ng-click="dialog.hide()" class="md-primary">',                                                 // 5047
              '{{ dialog.ok }}',                                                                                       // 5048
            '</md-button>',                                                                                            // 5049
          '</div>',                                                                                                    // 5050
        '</md-dialog>'                                                                                                 // 5051
      ].join(''),                                                                                                      // 5052
      controller: function mdDialogCtrl() {                                                                            // 5053
        this.hide = function() {                                                                                       // 5054
          $mdDialog.hide(true);                                                                                        // 5055
        };                                                                                                             // 5056
        this.abort = function() {                                                                                      // 5057
          $mdDialog.cancel();                                                                                          // 5058
        };                                                                                                             // 5059
      },                                                                                                               // 5060
      controllerAs: 'dialog',                                                                                          // 5061
      bindToController: true,                                                                                          // 5062
      theme: $mdTheming.defaultTheme()                                                                                 // 5063
    };                                                                                                                 // 5064
  }                                                                                                                    // 5065
                                                                                                                       // 5066
  /* @ngInject */                                                                                                      // 5067
  function dialogDefaultOptions($mdAria, $document, $mdUtil, $mdConstant, $mdTheming, $mdDialog, $timeout, $rootElement, $animate, $$rAF, $q) {
    return {                                                                                                           // 5069
      hasBackdrop: true,                                                                                               // 5070
      isolateScope: true,                                                                                              // 5071
      onShow: onShow,                                                                                                  // 5072
      onRemove: onRemove,                                                                                              // 5073
      clickOutsideToClose: false,                                                                                      // 5074
      escapeToClose: true,                                                                                             // 5075
      targetEvent: null,                                                                                               // 5076
      focusOnOpen: true,                                                                                               // 5077
      disableParentScroll: true,                                                                                       // 5078
      transformTemplate: function(template) {                                                                          // 5079
        return '<div class="md-dialog-container">' + template + '</div>';                                              // 5080
      }                                                                                                                // 5081
    };                                                                                                                 // 5082
                                                                                                                       // 5083
    function trapFocus(ev) {                                                                                           // 5084
      var dialog = document.querySelector('md-dialog');                                                                // 5085
                                                                                                                       // 5086
      if (dialog && !dialog.contains(ev.target)) {                                                                     // 5087
        ev.stopImmediatePropagation();                                                                                 // 5088
        dialog.focus();                                                                                                // 5089
      }                                                                                                                // 5090
    }                                                                                                                  // 5091
                                                                                                                       // 5092
    // On show method for dialogs                                                                                      // 5093
    function onShow(scope, element, options) {                                                                         // 5094
      angular.element($document[0].body).addClass('md-dialog-is-showing');                                             // 5095
      element = $mdUtil.extractElementByName(element, 'md-dialog');                                                    // 5096
                                                                                                                       // 5097
      // Incase the user provides a raw dom element, always wrap it in jqLite                                          // 5098
      options.parent = angular.element(options.parent);                                                                // 5099
                                                                                                                       // 5100
      options.popInTarget = angular.element((options.targetEvent || {}).target);                                       // 5101
      var closeButton = findCloseButton();                                                                             // 5102
                                                                                                                       // 5103
      if (options.hasBackdrop) {                                                                                       // 5104
        // Fix for IE 10                                                                                               // 5105
        var computeFrom = (options.parent[0] == $document[0].body && $document[0].documentElement                      // 5106
                           && $document[0].documentElement.scrollTop) ? angular.element($document[0].documentElement) : options.parent;
        var parentOffset = computeFrom.prop('scrollTop');                                                              // 5108
        options.backdrop = angular.element('<md-backdrop class="md-dialog-backdrop md-opaque">');                      // 5109
        options.backdrop.css('top', parentOffset +'px');                                                               // 5110
        $mdTheming.inherit(options.backdrop, options.parent);                                                          // 5111
        $animate.enter(options.backdrop, options.parent);                                                              // 5112
        element.css('top', parentOffset +'px');                                                                        // 5113
      }                                                                                                                // 5114
                                                                                                                       // 5115
      var role = 'dialog',                                                                                             // 5116
          elementToFocus = closeButton;                                                                                // 5117
                                                                                                                       // 5118
      if (options.$type === 'alert') {                                                                                 // 5119
        role = 'alertdialog';                                                                                          // 5120
        elementToFocus = element.find('md-dialog-content');                                                            // 5121
      }                                                                                                                // 5122
                                                                                                                       // 5123
      configureAria(element.find('md-dialog'), role, options);                                                         // 5124
                                                                                                                       // 5125
      document.addEventListener('focus', trapFocus, true);                                                             // 5126
                                                                                                                       // 5127
      if (options.disableParentScroll) {                                                                               // 5128
        options.lastOverflow = options.parent.css('overflow');                                                         // 5129
        options.parent.css('overflow', 'hidden');                                                                      // 5130
      }                                                                                                                // 5131
                                                                                                                       // 5132
      return dialogPopIn(                                                                                              // 5133
        element,                                                                                                       // 5134
        options.parent,                                                                                                // 5135
        options.popInTarget && options.popInTarget.length && options.popInTarget                                       // 5136
      )                                                                                                                // 5137
      .then(function() {                                                                                               // 5138
                                                                                                                       // 5139
        applyAriaToSiblings(element, true);                                                                            // 5140
                                                                                                                       // 5141
        if (options.escapeToClose) {                                                                                   // 5142
          options.rootElementKeyupCallback = function(e) {                                                             // 5143
            if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {                                                           // 5144
              $timeout($mdDialog.cancel);                                                                              // 5145
            }                                                                                                          // 5146
          };                                                                                                           // 5147
          $rootElement.on('keyup', options.rootElementKeyupCallback);                                                  // 5148
        }                                                                                                              // 5149
                                                                                                                       // 5150
        if (options.clickOutsideToClose) {                                                                             // 5151
          options.dialogClickOutsideCallback = function(ev) {                                                          // 5152
            // Only close if we click the flex container outside the backdrop                                          // 5153
            if (ev.target === element[0]) {                                                                            // 5154
              $timeout($mdDialog.cancel);                                                                              // 5155
            }                                                                                                          // 5156
          };                                                                                                           // 5157
          element.on('click', options.dialogClickOutsideCallback);                                                     // 5158
        }                                                                                                              // 5159
                                                                                                                       // 5160
        if (options.focusOnOpen) {                                                                                     // 5161
          elementToFocus.focus();                                                                                      // 5162
        }                                                                                                              // 5163
      });                                                                                                              // 5164
                                                                                                                       // 5165
                                                                                                                       // 5166
      function findCloseButton() {                                                                                     // 5167
        //If no element with class dialog-close, try to find the last                                                  // 5168
        //button child in md-actions and assume it is a close button                                                   // 5169
        var closeButton = element[0].querySelector('.dialog-close');                                                   // 5170
        if (!closeButton) {                                                                                            // 5171
          var actionButtons = element[0].querySelectorAll('.md-actions button');                                       // 5172
          closeButton = actionButtons[ actionButtons.length - 1 ];                                                     // 5173
        }                                                                                                              // 5174
        return angular.element(closeButton);                                                                           // 5175
      }                                                                                                                // 5176
                                                                                                                       // 5177
    }                                                                                                                  // 5178
                                                                                                                       // 5179
    // On remove function for all dialogs                                                                              // 5180
    function onRemove(scope, element, options) {                                                                       // 5181
      angular.element($document[0].body).removeClass('md-dialog-is-showing');                                          // 5182
                                                                                                                       // 5183
      if (options.backdrop) {                                                                                          // 5184
        $animate.leave(options.backdrop);                                                                              // 5185
      }                                                                                                                // 5186
      if (options.disableParentScroll) {                                                                               // 5187
        options.parent.css('overflow', options.lastOverflow);                                                          // 5188
        delete options.lastOverflow;                                                                                   // 5189
      }                                                                                                                // 5190
      if (options.escapeToClose) {                                                                                     // 5191
        $rootElement.off('keyup', options.rootElementKeyupCallback);                                                   // 5192
      }                                                                                                                // 5193
      if (options.clickOutsideToClose) {                                                                               // 5194
        element.off('click', options.dialogClickOutsideCallback);                                                      // 5195
      }                                                                                                                // 5196
                                                                                                                       // 5197
      applyAriaToSiblings(element, false);                                                                             // 5198
                                                                                                                       // 5199
      document.removeEventListener('focus', trapFocus, true);                                                          // 5200
                                                                                                                       // 5201
      return dialogPopOut(                                                                                             // 5202
        element,                                                                                                       // 5203
        options.parent,                                                                                                // 5204
        options.popInTarget && options.popInTarget.length && options.popInTarget                                       // 5205
      ).then(function() {                                                                                              // 5206
        element.remove();                                                                                              // 5207
        options.popInTarget && options.popInTarget.focus();                                                            // 5208
      });                                                                                                              // 5209
                                                                                                                       // 5210
    }                                                                                                                  // 5211
                                                                                                                       // 5212
    /**                                                                                                                // 5213
     * Inject ARIA-specific attributes appropriate for Dialogs                                                         // 5214
     */                                                                                                                // 5215
    function configureAria(element, role, options) {                                                                   // 5216
                                                                                                                       // 5217
      element.attr({                                                                                                   // 5218
        'role': role,                                                                                                  // 5219
        'tabIndex': '-1'                                                                                               // 5220
      });                                                                                                              // 5221
                                                                                                                       // 5222
      var dialogContent = element.find('md-dialog-content');                                                           // 5223
      if (dialogContent.length === 0){                                                                                 // 5224
        dialogContent = element;                                                                                       // 5225
      }                                                                                                                // 5226
                                                                                                                       // 5227
      var dialogId = element.attr('id') || ('dialog_' + $mdUtil.nextUid());                                            // 5228
      dialogContent.attr('id', dialogId);                                                                              // 5229
      element.attr('aria-describedby', dialogId);                                                                      // 5230
                                                                                                                       // 5231
      if (options.ariaLabel) {                                                                                         // 5232
        $mdAria.expect(element, 'aria-label', options.ariaLabel);                                                      // 5233
      }                                                                                                                // 5234
      else {                                                                                                           // 5235
        $mdAria.expectAsync(element, 'aria-label', function() {                                                        // 5236
          var words = dialogContent.text().split(/\s+/);                                                               // 5237
          if (words.length > 3) words = words.slice(0,3).concat('...');                                                // 5238
          return words.join(' ');                                                                                      // 5239
        });                                                                                                            // 5240
      }                                                                                                                // 5241
    }                                                                                                                  // 5242
    /**                                                                                                                // 5243
     * Utility function to filter out raw DOM nodes                                                                    // 5244
     */                                                                                                                // 5245
    function isNodeOneOf(elem, nodeTypeArray) {                                                                        // 5246
      if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {                                                               // 5247
        return true;                                                                                                   // 5248
      }                                                                                                                // 5249
    }                                                                                                                  // 5250
    /**                                                                                                                // 5251
     * Walk DOM to apply or remove aria-hidden on sibling nodes                                                        // 5252
     * and parent sibling nodes                                                                                        // 5253
     *                                                                                                                 // 5254
     * Prevents screen reader interaction behind modal window                                                          // 5255
     * on swipe interfaces                                                                                             // 5256
     */                                                                                                                // 5257
    function applyAriaToSiblings(element, value) {                                                                     // 5258
      var attribute = 'aria-hidden';                                                                                   // 5259
                                                                                                                       // 5260
      // get raw DOM node                                                                                              // 5261
      element = element[0];                                                                                            // 5262
                                                                                                                       // 5263
      function walkDOM(element) {                                                                                      // 5264
        while (element.parentNode) {                                                                                   // 5265
          if (element === document.body) {                                                                             // 5266
            return;                                                                                                    // 5267
          }                                                                                                            // 5268
          var children = element.parentNode.children;                                                                  // 5269
          for (var i = 0; i < children.length; i++) {                                                                  // 5270
            // skip over child if it is an ascendant of the dialog                                                     // 5271
            // or a script or style tag                                                                                // 5272
            if (element !== children[i] && !isNodeOneOf(children[i], ['SCRIPT', 'STYLE'])) {                           // 5273
              children[i].setAttribute(attribute, value);                                                              // 5274
            }                                                                                                          // 5275
          }                                                                                                            // 5276
                                                                                                                       // 5277
          walkDOM(element = element.parentNode);                                                                       // 5278
        }                                                                                                              // 5279
      }                                                                                                                // 5280
      walkDOM(element);                                                                                                // 5281
    }                                                                                                                  // 5282
                                                                                                                       // 5283
    function dialogPopIn(container, parentElement, clickElement) {                                                     // 5284
      var dialogEl = container.find('md-dialog');                                                                      // 5285
                                                                                                                       // 5286
      parentElement.append(container);                                                                                 // 5287
      transformToClickElement(dialogEl, clickElement);                                                                 // 5288
                                                                                                                       // 5289
      $$rAF(function() {                                                                                               // 5290
        dialogEl.addClass('transition-in')                                                                             // 5291
          .css($mdConstant.CSS.TRANSFORM, '');                                                                         // 5292
      });                                                                                                              // 5293
                                                                                                                       // 5294
      return $mdUtil.transitionEndPromise(dialogEl);                                                                   // 5295
    }                                                                                                                  // 5296
                                                                                                                       // 5297
    function dialogPopOut(container, parentElement, clickElement) {                                                    // 5298
      var dialogEl = container.find('md-dialog');                                                                      // 5299
                                                                                                                       // 5300
      dialogEl.addClass('transition-out').removeClass('transition-in');                                                // 5301
      transformToClickElement(dialogEl, clickElement);                                                                 // 5302
                                                                                                                       // 5303
      return $mdUtil.transitionEndPromise(dialogEl);                                                                   // 5304
    }                                                                                                                  // 5305
                                                                                                                       // 5306
    function transformToClickElement(dialogEl, clickElement) {                                                         // 5307
      if (clickElement) {                                                                                              // 5308
        var clickRect = clickElement[0].getBoundingClientRect();                                                       // 5309
        var dialogRect = dialogEl[0].getBoundingClientRect();                                                          // 5310
                                                                                                                       // 5311
        var scaleX = Math.min(0.5, clickRect.width / dialogRect.width);                                                // 5312
        var scaleY = Math.min(0.5, clickRect.height / dialogRect.height);                                              // 5313
                                                                                                                       // 5314
        dialogEl.css($mdConstant.CSS.TRANSFORM, 'translate3d(' +                                                       // 5315
          (-dialogRect.left + clickRect.left + clickRect.width/2 - dialogRect.width/2) + 'px,' +                       // 5316
          (-dialogRect.top + clickRect.top + clickRect.height/2 - dialogRect.height/2) + 'px,' +                       // 5317
          '0) scale(' + scaleX + ',' + scaleY + ')'                                                                    // 5318
        );                                                                                                             // 5319
      }                                                                                                                // 5320
    }                                                                                                                  // 5321
                                                                                                                       // 5322
    function dialogTransitionEnd(dialogEl) {                                                                           // 5323
      var deferred = $q.defer();                                                                                       // 5324
      dialogEl.on($mdConstant.CSS.TRANSITIONEND, finished);                                                            // 5325
      function finished(ev) {                                                                                          // 5326
        //Make sure this transitionend didn't bubble up from a child                                                   // 5327
        if (ev.target === dialogEl[0]) {                                                                               // 5328
          dialogEl.off($mdConstant.CSS.TRANSITIONEND, finished);                                                       // 5329
          deferred.resolve();                                                                                          // 5330
        }                                                                                                              // 5331
      }                                                                                                                // 5332
      return deferred.promise;                                                                                         // 5333
    }                                                                                                                  // 5334
                                                                                                                       // 5335
  }                                                                                                                    // 5336
}                                                                                                                      // 5337
MdDialogProvider.$inject = ["$$interimElementProvider"];                                                               // 5338
                                                                                                                       // 5339
})();                                                                                                                  // 5340
(function(){                                                                                                           // 5341
"use strict";                                                                                                          // 5342
                                                                                                                       // 5343
/**                                                                                                                    // 5344
 * @ngdoc module                                                                                                       // 5345
 * @name material.components.divider                                                                                   // 5346
 * @description Divider module!                                                                                        // 5347
 */                                                                                                                    // 5348
angular.module('material.components.divider', [                                                                        // 5349
  'material.core'                                                                                                      // 5350
])                                                                                                                     // 5351
  .directive('mdDivider', MdDividerDirective);                                                                         // 5352
                                                                                                                       // 5353
/**                                                                                                                    // 5354
 * @ngdoc directive                                                                                                    // 5355
 * @name mdDivider                                                                                                     // 5356
 * @module material.components.divider                                                                                 // 5357
 * @restrict E                                                                                                         // 5358
 *                                                                                                                     // 5359
 * @description                                                                                                        // 5360
 * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.
 *                                                                                                                     // 5362
 * @param {boolean=} md-inset Add this attribute to activate the inset divider style.                                  // 5363
 * @usage                                                                                                              // 5364
 * <hljs lang="html">                                                                                                  // 5365
 * <md-divider></md-divider>                                                                                           // 5366
 *                                                                                                                     // 5367
 * <md-divider md-inset></md-divider>                                                                                  // 5368
 * </hljs>                                                                                                             // 5369
 *                                                                                                                     // 5370
 */                                                                                                                    // 5371
function MdDividerDirective($mdTheming) {                                                                              // 5372
  return {                                                                                                             // 5373
    restrict: 'E',                                                                                                     // 5374
    link: $mdTheming                                                                                                   // 5375
  };                                                                                                                   // 5376
}                                                                                                                      // 5377
MdDividerDirective.$inject = ["$mdTheming"];                                                                           // 5378
                                                                                                                       // 5379
})();                                                                                                                  // 5380
(function(){                                                                                                           // 5381
"use strict";                                                                                                          // 5382
                                                                                                                       // 5383
/**                                                                                                                    // 5384
 * @ngdoc module                                                                                                       // 5385
 * @name material.components.gridList                                                                                  // 5386
 */                                                                                                                    // 5387
angular.module('material.components.gridList', ['material.core'])                                                      // 5388
       .directive('mdGridList', GridListDirective)                                                                     // 5389
       .directive('mdGridTile', GridTileDirective)                                                                     // 5390
       .directive('mdGridTileFooter', GridTileCaptionDirective)                                                        // 5391
       .directive('mdGridTileHeader', GridTileCaptionDirective)                                                        // 5392
       .factory('$mdGridLayout', GridLayoutFactory);                                                                   // 5393
                                                                                                                       // 5394
/**                                                                                                                    // 5395
 * @ngdoc directive                                                                                                    // 5396
 * @name mdGridList                                                                                                    // 5397
 * @module material.components.gridList                                                                                // 5398
 * @restrict E                                                                                                         // 5399
 * @description                                                                                                        // 5400
 * Grid lists are an alternative to standard list views. Grid lists are distinct                                       // 5401
 * from grids used for layouts and other visual presentations.                                                         // 5402
 *                                                                                                                     // 5403
 * A grid list is best suited to presenting a homogenous data type, typically                                          // 5404
 * images, and is optimized for visual comprehension and differentiating between                                       // 5405
 * like data types.                                                                                                    // 5406
 *                                                                                                                     // 5407
 * A grid list is a continuous element consisting of tessellated, regular                                              // 5408
 * subdivisions called cells that contain tiles (`md-grid-tile`).                                                      // 5409
 *                                                                                                                     // 5410
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png"
 *    style="width: 300px; height: auto; margin-right: 16px;" alt="Concept of grid explained visually">                // 5412
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png"
 *    style="width: 300px; height: auto;" alt="Grid concepts legend">                                                  // 5414
 *                                                                                                                     // 5415
 * Cells are arrayed vertically and horizontally within the grid.                                                      // 5416
 *                                                                                                                     // 5417
 * Tiles hold content and can span one or more cells vertically or horizontally.                                       // 5418
 *                                                                                                                     // 5419
 * ### Responsive Attributes                                                                                           // 5420
 *                                                                                                                     // 5421
 * The `md-grid-list` directive supports "responsive" attributes, which allow                                          // 5422
 * different `md-cols`, `md-gutter` and `md-row-height` values depending on the                                        // 5423
 * currently matching media query (as defined in `$mdConstant.MEDIA`).                                                 // 5424
 *                                                                                                                     // 5425
 * In order to set a responsive attribute, first define the fallback value with                                        // 5426
 * the standard attribute name, then add additional attributes with the                                                // 5427
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`                                          // 5428
 * (ie. `md-cols-lg="8"`)                                                                                              // 5429
 *                                                                                                                     // 5430
 * @param {number} md-cols Number of columns in the grid.                                                              // 5431
 * @param {string} md-row-height One of                                                                                // 5432
 * <ul>                                                                                                                // 5433
 *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>                                                     // 5434
 *   <li>`{width}:{height}` - Ratio of width to height (eg.                                                            // 5435
 *   `md-row-height="16:9"`)</li>                                                                                      // 5436
 *   <li>`"fit"` - Height will be determined by subdividing the available                                              // 5437
 *   height by the number of rows</li>                                                                                 // 5438
 * </ul>                                                                                                               // 5439
 * @param {string=} md-gutter The amount of space between tiles in CSS units                                           // 5440
 *     (default 1px)                                                                                                   // 5441
 * @param {expression=} md-on-layout Expression to evaluate after layout. Event                                        // 5442
 *     object is available as `$event`, and contains performance information.                                          // 5443
 *                                                                                                                     // 5444
 * @usage                                                                                                              // 5445
 * Basic:                                                                                                              // 5446
 * <hljs lang="html">                                                                                                  // 5447
 * <md-grid-list md-cols="5" md-gutter="1em" md-row-height="4:3">                                                      // 5448
 *   <md-grid-tile></md-grid-tile>                                                                                     // 5449
 * </md-grid-list>                                                                                                     // 5450
 * </hljs>                                                                                                             // 5451
 *                                                                                                                     // 5452
 * Fixed-height rows:                                                                                                  // 5453
 * <hljs lang="html">                                                                                                  // 5454
 * <md-grid-list md-cols="4" md-row-height="200px" ...>                                                                // 5455
 *   <md-grid-tile></md-grid-tile>                                                                                     // 5456
 * </md-grid-list>                                                                                                     // 5457
 * </hljs>                                                                                                             // 5458
 *                                                                                                                     // 5459
 * Fit rows:                                                                                                           // 5460
 * <hljs lang="html">                                                                                                  // 5461
 * <md-grid-list md-cols="4" md-row-height="fit" style="height: 400px;" ...>                                           // 5462
 *   <md-grid-tile></md-grid-tile>                                                                                     // 5463
 * </md-grid-list>                                                                                                     // 5464
 * </hljs>                                                                                                             // 5465
 *                                                                                                                     // 5466
 * Using responsive attributes:                                                                                        // 5467
 * <hljs lang="html">                                                                                                  // 5468
 * <md-grid-list                                                                                                       // 5469
 *     md-cols-sm="2"                                                                                                  // 5470
 *     md-cols-md="4"                                                                                                  // 5471
 *     md-cols-lg="8"                                                                                                  // 5472
 *     md-cols-gt-lg="12"                                                                                              // 5473
 *     ...>                                                                                                            // 5474
 *   <md-grid-tile></md-grid-tile>                                                                                     // 5475
 * </md-grid-list>                                                                                                     // 5476
 * </hljs>                                                                                                             // 5477
 */                                                                                                                    // 5478
function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {                                       // 5479
  return {                                                                                                             // 5480
    restrict: 'E',                                                                                                     // 5481
    controller: GridListController,                                                                                    // 5482
    scope: {                                                                                                           // 5483
      mdOnLayout: '&'                                                                                                  // 5484
    },                                                                                                                 // 5485
    link: postLink                                                                                                     // 5486
  };                                                                                                                   // 5487
                                                                                                                       // 5488
  function postLink(scope, element, attrs, ctrl) {                                                                     // 5489
    // Apply semantics                                                                                                 // 5490
    element.attr('role', 'list');                                                                                      // 5491
                                                                                                                       // 5492
    // Provide the controller with a way to trigger layouts.                                                           // 5493
    ctrl.layoutDelegate = layoutDelegate;                                                                              // 5494
                                                                                                                       // 5495
    var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout),                                                  // 5496
        unwatchAttrs = watchMedia();                                                                                   // 5497
      scope.$on('$destroy', unwatchMedia);                                                                             // 5498
                                                                                                                       // 5499
    /**                                                                                                                // 5500
     * Watches for changes in media, invalidating layout as necessary.                                                 // 5501
     */                                                                                                                // 5502
    function watchMedia() {                                                                                            // 5503
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 5504
        $mdMedia(mediaName); // initialize                                                                             // 5505
        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])                                                                // 5506
            .addListener(invalidateLayout);                                                                            // 5507
      }                                                                                                                // 5508
      return $mdMedia.watchResponsiveAttributes(                                                                       // 5509
          ['md-cols', 'md-row-height'], attrs, layoutIfMediaMatch);                                                    // 5510
    }                                                                                                                  // 5511
                                                                                                                       // 5512
    function unwatchMedia() {                                                                                          // 5513
      ctrl.layoutDelegate = angular.noop;                                                                              // 5514
                                                                                                                       // 5515
      unwatchAttrs();                                                                                                  // 5516
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 5517
        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])                                                                // 5518
            .removeListener(invalidateLayout);                                                                         // 5519
      }                                                                                                                // 5520
    }                                                                                                                  // 5521
                                                                                                                       // 5522
    /**                                                                                                                // 5523
     * Performs grid layout if the provided mediaName matches the currently                                            // 5524
     * active media type.                                                                                              // 5525
     */                                                                                                                // 5526
    function layoutIfMediaMatch(mediaName) {                                                                           // 5527
      if (mediaName == null) {                                                                                         // 5528
        // TODO(shyndman): It would be nice to only layout if we have                                                  // 5529
        // instances of attributes using this media type                                                               // 5530
        ctrl.invalidateLayout();                                                                                       // 5531
      } else if ($mdMedia(mediaName)) {                                                                                // 5532
        ctrl.invalidateLayout();                                                                                       // 5533
      }                                                                                                                // 5534
    }                                                                                                                  // 5535
                                                                                                                       // 5536
    var lastLayoutProps;                                                                                               // 5537
                                                                                                                       // 5538
    /**                                                                                                                // 5539
     * Invokes the layout engine, and uses its results to lay out our                                                  // 5540
     * tile elements.                                                                                                  // 5541
     *                                                                                                                 // 5542
     * @param {boolean} tilesInvalidated Whether tiles have been                                                       // 5543
     *    added/removed/moved since the last layout. This is to avoid situations                                       // 5544
     *    where tiles are replaced with properties identical to their removed                                          // 5545
     *    counterparts.                                                                                                // 5546
     */                                                                                                                // 5547
    function layoutDelegate(tilesInvalidated) {                                                                        // 5548
      var tiles = getTileElements();                                                                                   // 5549
      var props = {                                                                                                    // 5550
        tileSpans: getTileSpans(tiles),                                                                                // 5551
        colCount: getColumnCount(),                                                                                    // 5552
        rowMode: getRowMode(),                                                                                         // 5553
        rowHeight: getRowHeight(),                                                                                     // 5554
        gutter: getGutter()                                                                                            // 5555
      };                                                                                                               // 5556
                                                                                                                       // 5557
      if (!tilesInvalidated && angular.equals(props, lastLayoutProps)) {                                               // 5558
        return;                                                                                                        // 5559
      }                                                                                                                // 5560
                                                                                                                       // 5561
      var performance =                                                                                                // 5562
        $mdGridLayout(props.colCount, props.tileSpans, tiles)                                                          // 5563
          .map(function(tilePositions, rowCount) {                                                                     // 5564
            return {                                                                                                   // 5565
              grid: {                                                                                                  // 5566
                element: element,                                                                                      // 5567
                style: getGridStyle(props.colCount, rowCount,                                                          // 5568
                    props.gutter, props.rowMode, props.rowHeight)                                                      // 5569
              },                                                                                                       // 5570
              tiles: tilePositions.map(function(ps, i) {                                                               // 5571
                return {                                                                                               // 5572
                  element: angular.element(tiles[i]),                                                                  // 5573
                  style: getTileStyle(ps.position, ps.spans,                                                           // 5574
                      props.colCount, props.rowCount,                                                                  // 5575
                      props.gutter, props.rowMode, props.rowHeight)                                                    // 5576
                }                                                                                                      // 5577
              })                                                                                                       // 5578
            }                                                                                                          // 5579
          })                                                                                                           // 5580
          .reflow()                                                                                                    // 5581
          .performance();                                                                                              // 5582
                                                                                                                       // 5583
      // Report layout                                                                                                 // 5584
      scope.mdOnLayout({                                                                                               // 5585
        $event: {                                                                                                      // 5586
          performance: performance                                                                                     // 5587
        }                                                                                                              // 5588
      });                                                                                                              // 5589
                                                                                                                       // 5590
      lastLayoutProps = props;                                                                                         // 5591
    }                                                                                                                  // 5592
                                                                                                                       // 5593
    // Use $interpolate to do some simple string interpolation as a convenience.                                       // 5594
                                                                                                                       // 5595
    var startSymbol = $interpolate.startSymbol();                                                                      // 5596
    var endSymbol = $interpolate.endSymbol();                                                                          // 5597
                                                                                                                       // 5598
    // Returns an expression wrapped in the interpolator's start and end symbols.                                      // 5599
    function expr(exprStr) {                                                                                           // 5600
      return startSymbol + exprStr + endSymbol;                                                                        // 5601
    }                                                                                                                  // 5602
                                                                                                                       // 5603
    // The amount of space a single 1x1 tile would take up (either width or height), used as                           // 5604
    // a basis for other calculations. This consists of taking the base size percent (as would be                      // 5605
    // if evenly dividing the size between cells), and then subtracting the size of one gutter.                        // 5606
    // However, since there are no gutters on the edges, each tile only uses a fration                                 // 5607
    // (gutterShare = numGutters / numCells) of the gutter size. (Imagine having one gutter per                        // 5608
    // tile, and then breaking up the extra gutter on the edge evenly among the cells).                                // 5609
    var UNIT = $interpolate(expr('share') + '% - (' + expr('gutter') + ' * ' + expr('gutterShare') + ')');             // 5610
                                                                                                                       // 5611
    // The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.                        // 5612
    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the                             // 5613
    // row/column (offset).                                                                                            // 5614
    var POSITION  = $interpolate('calc((' + expr('unit') + ' + ' + expr('gutter') + ') * ' + expr('offset') + ')');    // 5615
                                                                                                                       // 5616
    // The actual size of a tile, e.g., width or height, taking rowSpan or colSpan into account.                       // 5617
    // This is computed by multiplying the base unit by the rowSpan/colSpan, and then adding back                      // 5618
    // in the space that the gutter would normally have used (which was already accounted for in                       // 5619
    // the base unit calculation).                                                                                     // 5620
    var DIMENSION = $interpolate('calc((' + expr('unit') + ') * ' + expr('span') + ' + (' + expr('span') + ' - 1) * ' + expr('gutter') + ')');
                                                                                                                       // 5622
    /**                                                                                                                // 5623
     * Gets the styles applied to a tile element described by the given parameters.                                    // 5624
     * @param {{row: number, col: number}} position The row and column indices of the tile.                            // 5625
     * @param {{row: number, col: number}} spans The rowSpan and colSpan of the tile.                                  // 5626
     * @param {number} colCount The number of columns.                                                                 // 5627
     * @param {number} rowCount The number of rows.                                                                    // 5628
     * @param {string} gutter The amount of space between tiles. This will be something like                           // 5629
     *     '5px' or '2em'.                                                                                             // 5630
     * @param {string} rowMode The row height mode. Can be one of:                                                     // 5631
     *     'fixed': all rows have a fixed size, given by rowHeight,                                                    // 5632
     *     'ratio': row height defined as a ratio to width, or                                                         // 5633
     *     'fit': fit to the grid-list element height, divinding evenly among rows.                                    // 5634
     * @param {string|number} rowHeight The height of a row. This is only used for 'fixed' mode and                    // 5635
     *     for 'ratio' mode. For 'ratio' mode, this is the *ratio* of width-to-height (e.g., 0.75).                    // 5636
     * @returns {Object} Map of CSS properties to be applied to the style element. Will define                         // 5637
     *     values for top, left, width, height, marginTop, and paddingTop.                                             // 5638
     */                                                                                                                // 5639
    function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {                           // 5640
      // TODO(shyndman): There are style caching opportunities here.                                                   // 5641
                                                                                                                       // 5642
      // Percent of the available horizontal space that one column takes up.                                           // 5643
      var hShare = (1 / colCount) * 100;                                                                               // 5644
                                                                                                                       // 5645
      // Fraction of the gutter size that each column takes up.                                                        // 5646
      var hGutterShare = (colCount - 1) / colCount;                                                                    // 5647
                                                                                                                       // 5648
      // Base horizontal size of a column.                                                                             // 5649
      var hUnit = UNIT({share: hShare, gutterShare: hGutterShare, gutter: gutter});                                    // 5650
                                                                                                                       // 5651
      // The width and horizontal position of each tile is always calculated the same way, but the                     // 5652
      // height and vertical position depends on the rowMode.                                                          // 5653
      var style = {                                                                                                    // 5654
        left: POSITION({ unit: hUnit, offset: position.col, gutter: gutter }),                                         // 5655
        width: DIMENSION({ unit: hUnit, span: spans.col, gutter: gutter }),                                            // 5656
        // resets                                                                                                      // 5657
        paddingTop: '',                                                                                                // 5658
        marginTop: '',                                                                                                 // 5659
        top: '',                                                                                                       // 5660
        height: ''                                                                                                     // 5661
      };                                                                                                               // 5662
                                                                                                                       // 5663
      switch (rowMode) {                                                                                               // 5664
        case 'fixed':                                                                                                  // 5665
          // In fixed mode, simply use the given rowHeight.                                                            // 5666
          style.top = POSITION({ unit: rowHeight, offset: position.row, gutter: gutter });                             // 5667
          style.height = DIMENSION({ unit: rowHeight, span: spans.row, gutter: gutter });                              // 5668
          break;                                                                                                       // 5669
                                                                                                                       // 5670
        case 'ratio':                                                                                                  // 5671
          // Percent of the available vertical space that one row takes up. Here, rowHeight holds                      // 5672
          // the ratio value. For example, if the width:height ratio is 4:3, rowHeight = 1.333.                        // 5673
          var vShare = hShare / rowHeight;                                                                             // 5674
                                                                                                                       // 5675
          // Base veritcal size of a row.                                                                              // 5676
          var vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });                              // 5677
                                                                                                                       // 5678
          // padidngTop and marginTop are used to maintain the given aspect ratio, as                                  // 5679
          // a percentage-based value for these properties is applied to the *width* of the                            // 5680
          // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties                                // 5681
          style.paddingTop = DIMENSION({ unit: vUnit, span: spans.row, gutter: gutter});                               // 5682
          style.marginTop = POSITION({ unit: vUnit, offset: position.row, gutter: gutter });                           // 5683
          break;                                                                                                       // 5684
                                                                                                                       // 5685
        case 'fit':                                                                                                    // 5686
          // Fraction of the gutter size that each column takes up.                                                    // 5687
          var vGutterShare = (rowCount - 1) / rowCount;                                                                // 5688
                                                                                                                       // 5689
          // Percent of the available vertical space that one row takes up.                                            // 5690
          var vShare = (1 / rowCount) * 100;                                                                           // 5691
                                                                                                                       // 5692
          // Base vertical size of a row.                                                                              // 5693
          var vUnit = UNIT({share: vShare, gutterShare: vGutterShare, gutter: gutter});                                // 5694
                                                                                                                       // 5695
          style.top = POSITION({unit: vUnit, offset: position.row, gutter: gutter});                                   // 5696
          style.height = DIMENSION({unit: vUnit, span: spans.row, gutter: gutter});                                    // 5697
          break;                                                                                                       // 5698
      }                                                                                                                // 5699
                                                                                                                       // 5700
      return style;                                                                                                    // 5701
    }                                                                                                                  // 5702
                                                                                                                       // 5703
    function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {                                            // 5704
      var style = {                                                                                                    // 5705
        height: '',                                                                                                    // 5706
        paddingBottom: ''                                                                                              // 5707
      };                                                                                                               // 5708
                                                                                                                       // 5709
      switch(rowMode) {                                                                                                // 5710
        case 'fixed':                                                                                                  // 5711
          style.height = DIMENSION({ unit: rowHeight, span: rowCount, gutter: gutter });                               // 5712
          break;                                                                                                       // 5713
                                                                                                                       // 5714
        case 'ratio':                                                                                                  // 5715
          // rowHeight is width / height                                                                               // 5716
          var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,                                           // 5717
              hShare = (1 / colCount) * 100,                                                                           // 5718
              vShare = hShare * (1 / rowHeight),                                                                       // 5719
              vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });                              // 5720
                                                                                                                       // 5721
          style.paddingBottom = DIMENSION({ unit: vUnit, span: rowCount, gutter: gutter});                             // 5722
          break;                                                                                                       // 5723
                                                                                                                       // 5724
        case 'fit':                                                                                                    // 5725
          // noop, as the height is user set                                                                           // 5726
          break;                                                                                                       // 5727
      }                                                                                                                // 5728
                                                                                                                       // 5729
      return style;                                                                                                    // 5730
    }                                                                                                                  // 5731
                                                                                                                       // 5732
    function getTileElements() {                                                                                       // 5733
      return [].filter.call(element.children(), function(ele) {                                                        // 5734
        return ele.tagName == 'MD-GRID-TILE';                                                                          // 5735
      });                                                                                                              // 5736
    }                                                                                                                  // 5737
                                                                                                                       // 5738
    /**                                                                                                                // 5739
     * Gets an array of objects containing the rowspan and colspan for each tile.                                      // 5740
     * @returns {Array<{row: number, col: number}>}                                                                    // 5741
     */                                                                                                                // 5742
    function getTileSpans(tileElements) {                                                                              // 5743
      return [].map.call(tileElements, function(ele) {                                                                 // 5744
        var ctrl = angular.element(ele).controller('mdGridTile');                                                      // 5745
        return {                                                                                                       // 5746
          row: parseInt(                                                                                               // 5747
              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-rowspan'), 10) || 1,                                    // 5748
          col: parseInt(                                                                                               // 5749
              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-colspan'), 10) || 1                                     // 5750
        };                                                                                                             // 5751
      });                                                                                                              // 5752
    }                                                                                                                  // 5753
                                                                                                                       // 5754
    function getColumnCount() {                                                                                        // 5755
      var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);                                  // 5756
      if (isNaN(colCount)) {                                                                                           // 5757
        throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';                       // 5758
      }                                                                                                                // 5759
      return colCount;                                                                                                 // 5760
    }                                                                                                                  // 5761
                                                                                                                       // 5762
    function getGutter() {                                                                                             // 5763
      return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);                               // 5764
    }                                                                                                                  // 5765
                                                                                                                       // 5766
    function getRowHeight() {                                                                                          // 5767
      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');                                         // 5768
      switch (getRowMode()) {                                                                                          // 5769
        case 'fixed':                                                                                                  // 5770
          return applyDefaultUnit(rowHeight);                                                                          // 5771
        case 'ratio':                                                                                                  // 5772
          var whRatio = rowHeight.split(':');                                                                          // 5773
          return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);                                                      // 5774
        case 'fit':                                                                                                    // 5775
          return 0; // N/A                                                                                             // 5776
      }                                                                                                                // 5777
    }                                                                                                                  // 5778
                                                                                                                       // 5779
    function getRowMode() {                                                                                            // 5780
      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');                                         // 5781
      if (rowHeight == 'fit') {                                                                                        // 5782
        return 'fit';                                                                                                  // 5783
      } else if (rowHeight.indexOf(':') !== -1) {                                                                      // 5784
        return 'ratio';                                                                                                // 5785
      } else {                                                                                                         // 5786
        return 'fixed';                                                                                                // 5787
      }                                                                                                                // 5788
    }                                                                                                                  // 5789
                                                                                                                       // 5790
    function applyDefaultUnit(val) {                                                                                   // 5791
      return /\D$/.test(val) ? val : val + 'px';                                                                       // 5792
    }                                                                                                                  // 5793
  }                                                                                                                    // 5794
}                                                                                                                      // 5795
GridListDirective.$inject = ["$interpolate", "$mdConstant", "$mdGridLayout", "$mdMedia"];                              // 5796
                                                                                                                       // 5797
/* @ngInject */                                                                                                        // 5798
function GridListController($timeout) {                                                                                // 5799
  this.layoutInvalidated = false;                                                                                      // 5800
  this.tilesInvalidated = false;                                                                                       // 5801
  this.$timeout_ = $timeout;                                                                                           // 5802
  this.layoutDelegate = angular.noop;                                                                                  // 5803
}                                                                                                                      // 5804
GridListController.$inject = ["$timeout"];                                                                             // 5805
                                                                                                                       // 5806
GridListController.prototype = {                                                                                       // 5807
  invalidateTiles: function() {                                                                                        // 5808
    this.tilesInvalidated = true;                                                                                      // 5809
    this.invalidateLayout();                                                                                           // 5810
  },                                                                                                                   // 5811
                                                                                                                       // 5812
  invalidateLayout: function() {                                                                                       // 5813
    if (this.layoutInvalidated) {                                                                                      // 5814
      return;                                                                                                          // 5815
    }                                                                                                                  // 5816
    this.layoutInvalidated = true;                                                                                     // 5817
    this.$timeout_(angular.bind(this, this.layout));                                                                   // 5818
  },                                                                                                                   // 5819
                                                                                                                       // 5820
  layout: function() {                                                                                                 // 5821
    try {                                                                                                              // 5822
      this.layoutDelegate(this.tilesInvalidated);                                                                      // 5823
    } finally {                                                                                                        // 5824
      this.layoutInvalidated = false;                                                                                  // 5825
      this.tilesInvalidated = false;                                                                                   // 5826
    }                                                                                                                  // 5827
  }                                                                                                                    // 5828
};                                                                                                                     // 5829
                                                                                                                       // 5830
                                                                                                                       // 5831
/* @ngInject */                                                                                                        // 5832
function GridLayoutFactory($mdUtil) {                                                                                  // 5833
  var defaultAnimator = GridTileAnimator;                                                                              // 5834
                                                                                                                       // 5835
  /**                                                                                                                  // 5836
   * Set the reflow animator callback                                                                                  // 5837
   */                                                                                                                  // 5838
  GridLayout.animateWith = function(customAnimator) {                                                                  // 5839
    defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;                         // 5840
  };                                                                                                                   // 5841
                                                                                                                       // 5842
  return GridLayout;                                                                                                   // 5843
                                                                                                                       // 5844
  /**                                                                                                                  // 5845
   * Publish layout function                                                                                           // 5846
   */                                                                                                                  // 5847
  function GridLayout(colCount, tileSpans) {                                                                           // 5848
      var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;                                               // 5849
                                                                                                                       // 5850
      layoutTime = $mdUtil.time(function() {                                                                           // 5851
        layoutInfo = calculateGridFor(colCount, tileSpans);                                                            // 5852
      });                                                                                                              // 5853
                                                                                                                       // 5854
      return self = {                                                                                                  // 5855
                                                                                                                       // 5856
        /**                                                                                                            // 5857
         * An array of objects describing each tile's position in the grid.                                            // 5858
         */                                                                                                            // 5859
        layoutInfo: function() {                                                                                       // 5860
          return layoutInfo;                                                                                           // 5861
        },                                                                                                             // 5862
                                                                                                                       // 5863
        /**                                                                                                            // 5864
         * Maps grid positioning to an element and a set of styles using the                                           // 5865
         * provided updateFn.                                                                                          // 5866
         */                                                                                                            // 5867
        map: function(updateFn) {                                                                                      // 5868
          mapTime = $mdUtil.time(function() {                                                                          // 5869
            var info = self.layoutInfo();                                                                              // 5870
            gridStyles = updateFn(info.positioning, info.rowCount);                                                    // 5871
          });                                                                                                          // 5872
          return self;                                                                                                 // 5873
        },                                                                                                             // 5874
                                                                                                                       // 5875
        /**                                                                                                            // 5876
         * Default animator simply sets the element.css( <styles> ). An alternate                                      // 5877
         * animator can be provided as an argument. The function has the following                                     // 5878
         * signature:                                                                                                  // 5879
         *                                                                                                             // 5880
         *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)        // 5881
         */                                                                                                            // 5882
        reflow: function(animatorFn) {                                                                                 // 5883
          reflowTime = $mdUtil.time(function() {                                                                       // 5884
            var animator = animatorFn || defaultAnimator;                                                              // 5885
            animator(gridStyles.grid, gridStyles.tiles);                                                               // 5886
          });                                                                                                          // 5887
          return self;                                                                                                 // 5888
        },                                                                                                             // 5889
                                                                                                                       // 5890
        /**                                                                                                            // 5891
         * Timing for the most recent layout run.                                                                      // 5892
         */                                                                                                            // 5893
        performance: function() {                                                                                      // 5894
          return {                                                                                                     // 5895
            tileCount: tileSpans.length,                                                                               // 5896
            layoutTime: layoutTime,                                                                                    // 5897
            mapTime: mapTime,                                                                                          // 5898
            reflowTime: reflowTime,                                                                                    // 5899
            totalTime: layoutTime + mapTime + reflowTime                                                               // 5900
          };                                                                                                           // 5901
        }                                                                                                              // 5902
      };                                                                                                               // 5903
    }                                                                                                                  // 5904
                                                                                                                       // 5905
  /**                                                                                                                  // 5906
   * Default Gridlist animator simple sets the css for each element;                                                   // 5907
   * NOTE: any transitions effects must be manually set in the CSS.                                                    // 5908
   * e.g.                                                                                                              // 5909
   *                                                                                                                   // 5910
   *  md-grid-tile {                                                                                                   // 5911
   *    transition: all 700ms ease-out 50ms;                                                                           // 5912
   *  }                                                                                                                // 5913
   *                                                                                                                   // 5914
   */                                                                                                                  // 5915
  function GridTileAnimator(grid, tiles) {                                                                             // 5916
    grid.element.css(grid.style);                                                                                      // 5917
    tiles.forEach(function(t) {                                                                                        // 5918
      t.element.css(t.style);                                                                                          // 5919
    })                                                                                                                 // 5920
  }                                                                                                                    // 5921
                                                                                                                       // 5922
  /**                                                                                                                  // 5923
   * Calculates the positions of tiles.                                                                                // 5924
   *                                                                                                                   // 5925
   * The algorithm works as follows:                                                                                   // 5926
   *    An Array<Number> with length colCount (spaceTracker) keeps track of                                            // 5927
   *    available tiling positions, where elements of value 0 represents an                                            // 5928
   *    empty position. Space for a tile is reserved by finding a sequence of                                          // 5929
   *    0s with length <= than the tile's colspan. When such a space has been                                          // 5930
   *    found, the occupied tile positions are incremented by the tile's                                               // 5931
   *    rowspan value, as these positions have become unavailable for that                                             // 5932
   *    many rows.                                                                                                     // 5933
   *                                                                                                                   // 5934
   *    If the end of a row has been reached without finding space for the                                             // 5935
   *    tile, spaceTracker's elements are each decremented by 1 to a minimum                                           // 5936
   *    of 0. Rows are searched in this fashion until space is found.                                                  // 5937
   */                                                                                                                  // 5938
  function calculateGridFor(colCount, tileSpans) {                                                                     // 5939
    var curCol = 0,                                                                                                    // 5940
        curRow = 0,                                                                                                    // 5941
        spaceTracker = newSpaceTracker();                                                                              // 5942
                                                                                                                       // 5943
    return {                                                                                                           // 5944
      positioning: tileSpans.map(function(spans, i) {                                                                  // 5945
        return {                                                                                                       // 5946
          spans: spans,                                                                                                // 5947
          position: reserveSpace(spans, i)                                                                             // 5948
        };                                                                                                             // 5949
      }),                                                                                                              // 5950
      rowCount: curRow + Math.max.apply(Math, spaceTracker)                                                            // 5951
    };                                                                                                                 // 5952
                                                                                                                       // 5953
    function reserveSpace(spans, i) {                                                                                  // 5954
      if (spans.col > colCount) {                                                                                      // 5955
        throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' +                                              // 5956
            '(' + spans.col + ') that exceeds the column count ' +                                                     // 5957
            '(' + colCount + ')';                                                                                      // 5958
      }                                                                                                                // 5959
                                                                                                                       // 5960
      var start = 0,                                                                                                   // 5961
          end = 0;                                                                                                     // 5962
                                                                                                                       // 5963
      // TODO(shyndman): This loop isn't strictly necessary if you can                                                 // 5964
      // determine the minimum number of rows before a space opens up. To do                                           // 5965
      // this, recognize that you've iterated across an entire row looking for                                         // 5966
      // space, and if so fast-forward by the minimum rowSpan count. Repeat                                            // 5967
      // until the required space opens up.                                                                            // 5968
      while (end - start < spans.col) {                                                                                // 5969
        if (curCol >= colCount) {                                                                                      // 5970
          nextRow();                                                                                                   // 5971
          continue;                                                                                                    // 5972
        }                                                                                                              // 5973
                                                                                                                       // 5974
        start = spaceTracker.indexOf(0, curCol);                                                                       // 5975
        if (start === -1 || (end = findEnd(start + 1)) === -1) {                                                       // 5976
          start = end = 0;                                                                                             // 5977
          nextRow();                                                                                                   // 5978
          continue;                                                                                                    // 5979
        }                                                                                                              // 5980
                                                                                                                       // 5981
        curCol = end + 1;                                                                                              // 5982
      }                                                                                                                // 5983
                                                                                                                       // 5984
      adjustRow(start, spans.col, spans.row);                                                                          // 5985
      curCol = start + spans.col;                                                                                      // 5986
                                                                                                                       // 5987
      return {                                                                                                         // 5988
        col: start,                                                                                                    // 5989
        row: curRow                                                                                                    // 5990
      };                                                                                                               // 5991
    }                                                                                                                  // 5992
                                                                                                                       // 5993
    function nextRow() {                                                                                               // 5994
      curCol = 0;                                                                                                      // 5995
      curRow++;                                                                                                        // 5996
      adjustRow(0, colCount, -1); // Decrement row spans by one                                                        // 5997
    }                                                                                                                  // 5998
                                                                                                                       // 5999
    function adjustRow(from, cols, by) {                                                                               // 6000
      for (var i = from; i < from + cols; i++) {                                                                       // 6001
        spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);                                                           // 6002
      }                                                                                                                // 6003
    }                                                                                                                  // 6004
                                                                                                                       // 6005
    function findEnd(start) {                                                                                          // 6006
      var i;                                                                                                           // 6007
      for (i = start; i < spaceTracker.length; i++) {                                                                  // 6008
        if (spaceTracker[i] !== 0) {                                                                                   // 6009
          return i;                                                                                                    // 6010
        }                                                                                                              // 6011
      }                                                                                                                // 6012
                                                                                                                       // 6013
      if (i === spaceTracker.length) {                                                                                 // 6014
        return i;                                                                                                      // 6015
      }                                                                                                                // 6016
    }                                                                                                                  // 6017
                                                                                                                       // 6018
    function newSpaceTracker() {                                                                                       // 6019
      var tracker = [];                                                                                                // 6020
      for (var i = 0; i < colCount; i++) {                                                                             // 6021
        tracker.push(0);                                                                                               // 6022
      }                                                                                                                // 6023
      return tracker;                                                                                                  // 6024
    }                                                                                                                  // 6025
  }                                                                                                                    // 6026
}                                                                                                                      // 6027
GridLayoutFactory.$inject = ["$mdUtil"];                                                                               // 6028
                                                                                                                       // 6029
/**                                                                                                                    // 6030
 * @ngdoc directive                                                                                                    // 6031
 * @name mdGridTile                                                                                                    // 6032
 * @module material.components.gridList                                                                                // 6033
 * @restrict E                                                                                                         // 6034
 * @description                                                                                                        // 6035
 * Tiles contain the content of an `md-grid-list`. They span one or more grid                                          // 6036
 * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to                                         // 6037
 * display secondary content.                                                                                          // 6038
 *                                                                                                                     // 6039
 * ### Responsive Attributes                                                                                           // 6040
 *                                                                                                                     // 6041
 * The `md-grid-tile` directive supports "responsive" attributes, which allow                                          // 6042
 * different `md-rowspan` and `md-colspan` values depending on the currently                                           // 6043
 * matching media query (as defined in `$mdConstant.MEDIA`).                                                           // 6044
 *                                                                                                                     // 6045
 * In order to set a responsive attribute, first define the fallback value with                                        // 6046
 * the standard attribute name, then add additional attributes with the                                                // 6047
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`                                          // 6048
 * (ie. `md-colspan-sm="4"`)                                                                                           // 6049
 *                                                                                                                     // 6050
 * @param {number=} md-colspan The number of columns to span (default 1). Cannot                                       // 6051
 *    exceed the number of columns in the grid. Supports interpolation.                                                // 6052
 * @param {number=} md-rowspan The number of rows to span (default 1). Supports                                        // 6053
 *     interpolation.                                                                                                  // 6054
 *                                                                                                                     // 6055
 * @usage                                                                                                              // 6056
 * With header:                                                                                                        // 6057
 * <hljs lang="html">                                                                                                  // 6058
 * <md-grid-tile>                                                                                                      // 6059
 *   <md-grid-tile-header>                                                                                             // 6060
 *     <h3>This is a header</h3>                                                                                       // 6061
 *   </md-grid-tile-header>                                                                                            // 6062
 * </md-grid-tile>                                                                                                     // 6063
 * </hljs>                                                                                                             // 6064
 *                                                                                                                     // 6065
 * With footer:                                                                                                        // 6066
 * <hljs lang="html">                                                                                                  // 6067
 * <md-grid-tile>                                                                                                      // 6068
 *   <md-grid-tile-footer>                                                                                             // 6069
 *     <h3>This is a footer</h3>                                                                                       // 6070
 *   </md-grid-tile-footer>                                                                                            // 6071
 * </md-grid-tile>                                                                                                     // 6072
 * </hljs>                                                                                                             // 6073
 *                                                                                                                     // 6074
 * Spanning multiple rows/columns:                                                                                     // 6075
 * <hljs lang="html">                                                                                                  // 6076
 * <md-grid-tile md-colspan="2" md-rowspan="3">                                                                        // 6077
 * </md-grid-tile>                                                                                                     // 6078
 * </hljs>                                                                                                             // 6079
 *                                                                                                                     // 6080
 * Responsive attributes:                                                                                              // 6081
 * <hljs lang="html">                                                                                                  // 6082
 * <md-grid-tile md-colspan="1" md-colspan-sm="3" md-colspan-md="5">                                                   // 6083
 * </md-grid-tile>                                                                                                     // 6084
 * </hljs>                                                                                                             // 6085
 */                                                                                                                    // 6086
function GridTileDirective($mdMedia) {                                                                                 // 6087
  return {                                                                                                             // 6088
    restrict: 'E',                                                                                                     // 6089
    require: '^mdGridList',                                                                                            // 6090
    template: '<figure ng-transclude></figure>',                                                                       // 6091
    transclude: true,                                                                                                  // 6092
    scope: {},                                                                                                         // 6093
    // Simple controller that exposes attributes to the grid directive                                                 // 6094
    controller: ["$attrs", function($attrs) {                                                                          // 6095
      this.$attrs = $attrs;                                                                                            // 6096
    }],                                                                                                                // 6097
    link: postLink                                                                                                     // 6098
  };                                                                                                                   // 6099
                                                                                                                       // 6100
  function postLink(scope, element, attrs, gridCtrl) {                                                                 // 6101
    // Apply semantics                                                                                                 // 6102
    element.attr('role', 'listitem');                                                                                  // 6103
                                                                                                                       // 6104
    // If our colspan or rowspan changes, trigger a layout                                                             // 6105
    var unwatchAttrs = $mdMedia.watchResponsiveAttributes(['md-colspan', 'md-rowspan'],                                // 6106
        attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));                                                     // 6107
                                                                                                                       // 6108
    // Tile registration/deregistration                                                                                // 6109
    gridCtrl.invalidateTiles();                                                                                        // 6110
    scope.$on('$destroy', function() {                                                                                 // 6111
      unwatchAttrs();                                                                                                  // 6112
      gridCtrl.invalidateLayout();                                                                                     // 6113
    });                                                                                                                // 6114
                                                                                                                       // 6115
    if (angular.isDefined(scope.$parent.$index)) {                                                                     // 6116
      scope.$watch(function() { return scope.$parent.$index; },                                                        // 6117
        function indexChanged(newIdx, oldIdx) {                                                                        // 6118
          if (newIdx === oldIdx) {                                                                                     // 6119
            return;                                                                                                    // 6120
          }                                                                                                            // 6121
          gridCtrl.invalidateTiles();                                                                                  // 6122
        });                                                                                                            // 6123
    }                                                                                                                  // 6124
  }                                                                                                                    // 6125
}                                                                                                                      // 6126
GridTileDirective.$inject = ["$mdMedia"];                                                                              // 6127
                                                                                                                       // 6128
                                                                                                                       // 6129
function GridTileCaptionDirective() {                                                                                  // 6130
  return {                                                                                                             // 6131
    template: '<figcaption ng-transclude></figcaption>',                                                               // 6132
    transclude: true                                                                                                   // 6133
  };                                                                                                                   // 6134
}                                                                                                                      // 6135
                                                                                                                       // 6136
})();                                                                                                                  // 6137
(function(){                                                                                                           // 6138
"use strict";                                                                                                          // 6139
                                                                                                                       // 6140
/**                                                                                                                    // 6141
 * @ngdoc module                                                                                                       // 6142
 * @name material.components.icon                                                                                      // 6143
 * @description                                                                                                        // 6144
 * Icon                                                                                                                // 6145
 */                                                                                                                    // 6146
angular.module('material.components.icon', [                                                                           // 6147
    'material.core'                                                                                                    // 6148
  ])                                                                                                                   // 6149
  .directive('mdIcon', mdIconDirective);                                                                               // 6150
                                                                                                                       // 6151
/**                                                                                                                    // 6152
 * @ngdoc directive                                                                                                    // 6153
 * @name mdIcon                                                                                                        // 6154
 * @module material.components.icon                                                                                    // 6155
 *                                                                                                                     // 6156
 * @restrict E                                                                                                         // 6157
 *                                                                                                                     // 6158
 * @description                                                                                                        // 6159
 * The `<md-icon />` directive is an markup element useful for showing an icon based on a font-icon                    // 6160
 * or a SVG. Icons are view-only elements that should not be used directly as buttons; instead nest a `<md-icon />`    // 6161
 * inside a `md-button` to add hover and click features.                                                               // 6162
 *                                                                                                                     // 6163
 * When using SVGs, both external SVGs (via URLs) or sets of SVGs [from icon sets] can be                              // 6164
 * easily loaded and used.When use font-icons, developers must following three (3) simple steps:                       // 6165
 *                                                                                                                     // 6166
 * <ol>                                                                                                                // 6167
 * <li>Load the font library. e.g.<br/>                                                                                // 6168
 *    &lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons"                                          // 6169
 *    rel="stylesheet"&gt;                                                                                             // 6170
 * </li>                                                                                                               // 6171
 * <li> Use either (a) font-icon class names or (b) font ligatures to render the font glyph by using its textual name</li>
 * <li> Use &lt;md-icon md-font-icon="classname" /&gt; or <br/>                                                        // 6173
 *     use &lt;md-icon md-font-library="library_style_name"&gt; textual_name &lt;/md-icon&gt; or <br/>                 // 6174
 *     use &lt;md-icon md-font-library="library_style_name"&gt; numerical_character_reference &lt;/md-icon&gt;         // 6175
 * </li>                                                                                                               // 6176
 * </ol>                                                                                                               // 6177
 *                                                                                                                     // 6178
 * Full details for these steps can be found:                                                                          // 6179
 *                                                                                                                     // 6180
 * <ul>                                                                                                                // 6181
 * <li>http://google.github.io/material-design-icons/</li>                                                             // 6182
 * <li>http://google.github.io/material-design-icons/#icon-font-for-the-web</li>                                       // 6183
 * </ul>                                                                                                               // 6184
 *                                                                                                                     // 6185
 * The Material Design icon style <code>.material-icons</code> and the icon font references are published in           // 6186
 * Material Design Icons:                                                                                              // 6187
 *                                                                                                                     // 6188
 * <ul>                                                                                                                // 6189
 * <li>http://www.google.com/design/icons/</li>                                                                        // 6190
 * <li>https://www.google.com/design/icons/#ic_accessibility</li>                                                      // 6191
 * </ul>                                                                                                               // 6192
 *                                                                                                                     // 6193
 * <h2 id="material_design_icons">Material Design Icons</h2>                                                           // 6194
 * Using the Material Design Icon-Selector, developers can easily and quickly search for a Material Design font-icon and
 * determine its textual name and character reference code. Click on any icon to see the slide-up information          // 6196
 * panel with details regarding a SVG download or information on the font-icon usage.                                  // 6197
 *                                                                                                                     // 6198
 * <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank" style="border-bottom:none;">        // 6199
 * <img src="https://cloud.githubusercontent.com/assets/210413/7902490/fe8dd14c-0780-11e5-98fb-c821cc6475e6.png"       // 6200
 *      alt="Material Design Icon-Selector" style="max-width:75%;padding-left:10%">                                    // 6201
 * </a>                                                                                                                // 6202
 *                                                                                                                     // 6203
 * <span class="image_caption">                                                                                        // 6204
 *  Click on the image above to link to the                                                                            // 6205
 *  <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank">Material Design Icon-Selector</a>. // 6206
 * </span>                                                                                                             // 6207
 *                                                                                                                     // 6208
 * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used                     // 6209
 * to render the icon. Requires the fonts and the named CSS styles to be preloaded.                                    // 6210
 * @param {string} md-font-library String name of CSS icon associated with the font-face will be used                  // 6211
 * to render the icon. Requires the fonts and the named CSS styles to be preloaded.                                    // 6212
 * @param {string} md-svg-src String URL [or expression ] used to load, cache, and display an external SVG.            // 6213
 * @param {string} md-svg-icon String name used for lookup of the icon from the internal cache; interpolated strings or
 * expressions may also be used. Specific set names can be used with the syntax `<set name>:<icon name>`.<br/><br/>    // 6215
 * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.             // 6216
 * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon                            // 6217
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no alt on the icon                    // 6218
 * nor a label on the parent element, a warning will be logged to the console.                                         // 6219
 *                                                                                                                     // 6220
 * @usage                                                                                                              // 6221
 * When using SVGs:                                                                                                    // 6222
 * <hljs lang="html">                                                                                                  // 6223
 *                                                                                                                     // 6224
 *  <!-- Icon ID; may contain optional icon set prefix; icons must registered using $mdIconProvider -->                // 6225
 *  <md-icon md-svg-icon="social:android"    alt="android " ></md-icon>                                                // 6226
 *                                                                                                                     // 6227
 *  <!-- Icon urls; may be preloaded in templateCache -->                                                              // 6228
 *  <md-icon md-svg-src="/android.svg"       alt="android " ></md-icon>                                                // 6229
 *  <md-icon md-svg-src="{{ getAndroid() }}" alt="android " ></md-icon>                                                // 6230
 *                                                                                                                     // 6231
 * </hljs>                                                                                                             // 6232
 *                                                                                                                     // 6233
 * Use the <code>$mdIconProvider</code> to configure your application with                                             // 6234
 * svg iconsets.                                                                                                       // 6235
 *                                                                                                                     // 6236
 * <hljs lang="js">                                                                                                    // 6237
 *  angular.module('appSvgIconSets', ['ngMaterial'])                                                                   // 6238
 *    .controller('DemoCtrl', function($scope) {})                                                                     // 6239
 *    .config(function($mdIconProvider) {                                                                              // 6240
 *      $mdIconProvider                                                                                                // 6241
 *         .iconSet('social', 'img/icons/sets/social-icons.svg', 24)                                                   // 6242
 *         .defaultIconSet('img/icons/sets/core-icons.svg', 24);                                                       // 6243
 *     });                                                                                                             // 6244
 * </hljs>                                                                                                             // 6245
 *                                                                                                                     // 6246
 *                                                                                                                     // 6247
 * When using Font Icons with classnames:                                                                              // 6248
 * <hljs lang="html">                                                                                                  // 6249
 *                                                                                                                     // 6250
 *  <md-icon md-font-icon="android" alt="android" ></md-icon>                                                          // 6251
 *  <md-icon md-font-icon="fa-magic" class="fa" alt="magic wand"></md-icon>                                            // 6252
 *                                                                                                                     // 6253
 * </hljs>                                                                                                             // 6254
 *                                                                                                                     // 6255
 * When using Font Icons with ligatures:                                                                               // 6256
 * <hljs lang="html">                                                                                                  // 6257
 *                                                                                                                     // 6258
 *  <md-icon md-font-library="material-icons">face</md-icon>                                                           // 6259
 *  <md-icon md-font-library="material-icons">#xE87C;</md-icon>                                                        // 6260
 *  <md-icon md-font-library="material-icons" class="md-light md-48">face</md-icon>                                    // 6261
 *                                                                                                                     // 6262
 * </hljs>                                                                                                             // 6263
 *                                                                                                                     // 6264
 *                                                                                                                     // 6265
 */                                                                                                                    // 6266
function mdIconDirective($mdIcon, $mdTheming, $mdAria, $interpolate ) {                                                // 6267
                                                                                                                       // 6268
  return {                                                                                                             // 6269
    scope: {                                                                                                           // 6270
      fontLib: '@mdFontLibrary',                                                                                       // 6271
      fontIcon: '@mdFontIcon',                                                                                         // 6272
      svgIcon: '@mdSvgIcon',                                                                                           // 6273
      svgSrc: '@mdSvgSrc'                                                                                              // 6274
    },                                                                                                                 // 6275
    restrict: 'E',                                                                                                     // 6276
    transclude:true,                                                                                                   // 6277
    template: getTemplate,                                                                                             // 6278
    link: postLink                                                                                                     // 6279
  };                                                                                                                   // 6280
                                                                                                                       // 6281
  function getTemplate(element, attr) {                                                                                // 6282
    var hasAttrValue = function(key) { return attr[key] && attr[key].length      };                                    // 6283
    var attrValue    = function(key) { return hasAttrValue(key) ? attr[key] : '' };                                    // 6284
                                                                                                                       // 6285
    // If using font-icons, transclude the ligature or NRCs                                                            // 6286
    var tmpl = hasAttrValue('mdFontIcon')    ? '<span class="md-font {{classNames}}" ng-class="fontIcon"></span>' :    // 6287
               hasAttrValue('mdFontLibrary') ? '<span ng-transclude></span>' : '';                                     // 6288
                                                                                                                       // 6289
    // Transpose the mdFontLibrary name to the list of classnames                                                      // 6290
    // For example, Material Icons expects classnames like `.material-icons.md-48` instead of `.material-icons .md-48` // 6291
                                                                                                                       // 6292
    var names = (attrValue('mdFontLibrary')  + ' ' +  attrValue('class')).trim();                                      // 6293
    element.attr('class',names);                                                                                       // 6294
                                                                                                                       // 6295
    return $interpolate( tmpl )({ classNames: names });                                                                // 6296
  }                                                                                                                    // 6297
                                                                                                                       // 6298
                                                                                                                       // 6299
  /**                                                                                                                  // 6300
   * Directive postLink                                                                                                // 6301
   * Supports embedded SVGs, font-icons, & external SVGs                                                               // 6302
   */                                                                                                                  // 6303
  function postLink(scope, element, attr) {                                                                            // 6304
    $mdTheming(element);                                                                                               // 6305
                                                                                                                       // 6306
    // If using a font-icon, then the textual name of the icon itself                                                  // 6307
    // provides the aria-label.                                                                                        // 6308
                                                                                                                       // 6309
    var ariaLabel = attr.alt || scope.fontIcon || scope.svgIcon;                                                       // 6310
    var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');                                 // 6311
                                                                                                                       // 6312
    if ( !attr.mdFontLibrary ) {                                                                                       // 6313
      if (attr.alt != '' && !parentsHaveText() ) {                                                                     // 6314
        $mdAria.expect(element, 'aria-label', ariaLabel);                                                              // 6315
        $mdAria.expect(element, 'role', 'img');                                                                        // 6316
      } else {                                                                                                         // 6317
        // Hide from the accessibility layer.                                                                          // 6318
        $mdAria.expect(element, 'aria-hidden', 'true');                                                                // 6319
      }                                                                                                                // 6320
    }                                                                                                                  // 6321
                                                                                                                       // 6322
    if (attrName) {                                                                                                    // 6323
      // Use either pre-configured SVG or URL source, respectively.                                                    // 6324
      attr.$observe(attrName, function(attrVal) {                                                                      // 6325
                                                                                                                       // 6326
        element.empty();                                                                                               // 6327
        if (attrVal) {                                                                                                 // 6328
          $mdIcon(attrVal).then(function(svg) {                                                                        // 6329
            element.append(svg);                                                                                       // 6330
          });                                                                                                          // 6331
        }                                                                                                              // 6332
                                                                                                                       // 6333
      });                                                                                                              // 6334
    }                                                                                                                  // 6335
    function parentsHaveText() {                                                                                       // 6336
      var parent = element.parent();                                                                                   // 6337
      if (parent.attr('aria-label') || parent.text()) {                                                                // 6338
        return true;                                                                                                   // 6339
      }                                                                                                                // 6340
      else if(parent.parent().attr('aria-label') || parent.parent().text()) {                                          // 6341
        return true;                                                                                                   // 6342
      }                                                                                                                // 6343
      return false;                                                                                                    // 6344
    }                                                                                                                  // 6345
  }                                                                                                                    // 6346
}                                                                                                                      // 6347
mdIconDirective.$inject = ["$mdIcon", "$mdTheming", "$mdAria", "$interpolate"];                                        // 6348
                                                                                                                       // 6349
})();                                                                                                                  // 6350
(function(){                                                                                                           // 6351
"use strict";                                                                                                          // 6352
                                                                                                                       // 6353
  angular                                                                                                              // 6354
    .module('material.components.icon' )                                                                               // 6355
    .provider('$mdIcon', MdIconProvider);                                                                              // 6356
                                                                                                                       // 6357
  /**                                                                                                                  // 6358
    * @ngdoc service                                                                                                   // 6359
    * @name $mdIconProvider                                                                                            // 6360
    * @module material.components.icon                                                                                 // 6361
    *                                                                                                                  // 6362
    * @description                                                                                                     // 6363
    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow                // 6364
    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`            // 6365
    * directives are compiled.                                                                                         // 6366
    *                                                                                                                  // 6367
    * Loading of the actual svg files are deferred to on-demand requests and are loaded                                // 6368
    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,              // 6369
    * the `$mdIcon` service searches its registry for the associated source URL;                                       // 6370
    * that URL is used to on-demand load and parse the SVG dynamically.                                                // 6371
    *                                                                                                                  // 6372
    * @usage                                                                                                           // 6373
    * <hljs lang="js">                                                                                                 // 6374
    *   app.config(function($mdIconProvider) {                                                                         // 6375
    *                                                                                                                  // 6376
    *     // Configure URLs for icons specified by [set:]id.                                                           // 6377
    *                                                                                                                  // 6378
    *     $mdIconProvider                                                                                              // 6379
    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons                        // 6380
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs                          // 6381
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)                         // 6382
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set                            // 6383
    *   });                                                                                                            // 6384
    * </hljs>                                                                                                          // 6385
    *                                                                                                                  // 6386
    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime    // 6387
    * **startup** process (shown below):                                                                               // 6388
    *                                                                                                                  // 6389
    * <hljs lang="js">                                                                                                 // 6390
    *   app.config(function($mdIconProvider) {                                                                         // 6391
    *                                                                                                                  // 6392
    *     // Register a default set of SVG icon definitions                                                            // 6393
    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')                                                           // 6394
    *                                                                                                                  // 6395
    *   })                                                                                                             // 6396
    *   .run(function($http, $templateCache){                                                                          // 6397
    *                                                                                                                  // 6398
    *     // Pre-fetch icons sources by URL and cache in the $templateCache...                                         // 6399
    *     // subsequent $http calls will look there first.                                                             // 6400
    *                                                                                                                  // 6401
    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];                                                  // 6402
    *                                                                                                                  // 6403
    *     angular.forEach(urls, function(url) {                                                                        // 6404
    *       $http.get(url, {cache: $templateCache});                                                                   // 6405
    *     });                                                                                                          // 6406
    *                                                                                                                  // 6407
    *   });                                                                                                            // 6408
    *                                                                                                                  // 6409
    * </hljs>                                                                                                          // 6410
    *                                                                                                                  // 6411
    * NOTE: the loaded SVG data is subsequently cached internally for future requests.                                 // 6412
    *                                                                                                                  // 6413
    */                                                                                                                 // 6414
                                                                                                                       // 6415
   /**                                                                                                                 // 6416
    * @ngdoc method                                                                                                    // 6417
    * @name $mdIconProvider#icon                                                                                       // 6418
    *                                                                                                                  // 6419
    * @description                                                                                                     // 6420
    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.            // 6421
    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`                               // 6422
    *                                                                                                                  // 6423
    * @param {string} id Icon name/id used to register the icon                                                        // 6424
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 6425
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 6426
    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons              // 6427
    * in the icon set must be the same size. Default size is 24.                                                       // 6428
    *                                                                                                                  // 6429
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 6430
    *                                                                                                                  // 6431
    * @usage                                                                                                           // 6432
    * <hljs lang="js">                                                                                                 // 6433
    *   app.config(function($mdIconProvider) {                                                                         // 6434
    *                                                                                                                  // 6435
    *     // Configure URLs for icons specified by [set:]id.                                                           // 6436
    *                                                                                                                  // 6437
    *     $mdIconProvider                                                                                              // 6438
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)                         // 6439
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set                            // 6440
    *   });                                                                                                            // 6441
    * </hljs>                                                                                                          // 6442
    *                                                                                                                  // 6443
    */                                                                                                                 // 6444
   /**                                                                                                                 // 6445
    * @ngdoc method                                                                                                    // 6446
    * @name $mdIconProvider#iconSet                                                                                    // 6447
    *                                                                                                                  // 6448
    * @description                                                                                                     // 6449
    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition                 // 6450
    * has an icon id. Individual icons can be subsequently retrieved from this cached set using                        // 6451
    * `$mdIcon(<icon set name>:<icon name>)`                                                                           // 6452
    *                                                                                                                  // 6453
    * @param {string} id Icon name/id used to register the iconset                                                     // 6454
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 6455
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 6456
    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons              // 6457
    * in the icon set must be the same size. Default size is 24.                                                       // 6458
    *                                                                                                                  // 6459
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 6460
    *                                                                                                                  // 6461
    *                                                                                                                  // 6462
    * @usage                                                                                                           // 6463
    * <hljs lang="js">                                                                                                 // 6464
    *   app.config(function($mdIconProvider) {                                                                         // 6465
    *                                                                                                                  // 6466
    *     // Configure URLs for icons specified by [set:]id.                                                           // 6467
    *                                                                                                                  // 6468
    *     $mdIconProvider                                                                                              // 6469
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set                                  // 6470
    *   });                                                                                                            // 6471
    * </hljs>                                                                                                          // 6472
    *                                                                                                                  // 6473
    */                                                                                                                 // 6474
   /**                                                                                                                 // 6475
    * @ngdoc method                                                                                                    // 6476
    * @name $mdIconProvider#defaultIconSet                                                                             // 6477
    *                                                                                                                  // 6478
    * @description                                                                                                     // 6479
    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,                        // 6480
    * subsequent lookups of icons will failover to search this 'default' icon set.                                     // 6481
    * Icon can be retrieved from this cached, default set using `$mdIcon(<name>)`                                      // 6482
    *                                                                                                                  // 6483
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 6484
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 6485
    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons              // 6486
    * in the icon set must be the same size. Default size is 24.                                                       // 6487
    *                                                                                                                  // 6488
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 6489
    *                                                                                                                  // 6490
    * @usage                                                                                                           // 6491
    * <hljs lang="js">                                                                                                 // 6492
    *   app.config(function($mdIconProvider) {                                                                         // 6493
    *                                                                                                                  // 6494
    *     // Configure URLs for icons specified by [set:]id.                                                           // 6495
    *                                                                                                                  // 6496
    *     $mdIconProvider                                                                                              // 6497
    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set                                 // 6498
    *   });                                                                                                            // 6499
    * </hljs>                                                                                                          // 6500
    *                                                                                                                  // 6501
    */                                                                                                                 // 6502
   /**                                                                                                                 // 6503
    * @ngdoc method                                                                                                    // 6504
    * @name $mdIconProvider#defaultIconSize                                                                            // 6505
    *                                                                                                                  // 6506
    * @description                                                                                                     // 6507
    * While `<md-icon />` markup can also be style with sizing CSS, this method configures                             // 6508
    * the default width **and** height used for all icons; unless overridden by specific CSS.                          // 6509
    * The default sizing is (24px, 24px).                                                                              // 6510
    *                                                                                                                  // 6511
    * @param {string} iconSize Number indicating the width and height of the icons in the set. All icons               // 6512
    * in the icon set must be the same size. Default size is 24.                                                       // 6513
    *                                                                                                                  // 6514
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 6515
    *                                                                                                                  // 6516
    * @usage                                                                                                           // 6517
    * <hljs lang="js">                                                                                                 // 6518
    *   app.config(function($mdIconProvider) {                                                                         // 6519
    *                                                                                                                  // 6520
    *     // Configure URLs for icons specified by [set:]id.                                                           // 6521
    *                                                                                                                  // 6522
    *     $mdIconProvider                                                                                              // 6523
    *          .defaultIconSize(36)   // Register a default icon size (width == height)                                // 6524
    *   });                                                                                                            // 6525
    * </hljs>                                                                                                          // 6526
    *                                                                                                                  // 6527
    */                                                                                                                 // 6528
                                                                                                                       // 6529
 var config = {                                                                                                        // 6530
   defaultIconSize: 24                                                                                                 // 6531
 };                                                                                                                    // 6532
                                                                                                                       // 6533
 function MdIconProvider() { }                                                                                         // 6534
                                                                                                                       // 6535
 MdIconProvider.prototype = {                                                                                          // 6536
   icon : function icon(id, url, iconSize) {                                                                           // 6537
     if ( id.indexOf(':') == -1 ) id = '$default:' + id;                                                               // 6538
                                                                                                                       // 6539
     config[id] = new ConfigurationItem(url, iconSize );                                                               // 6540
     return this;                                                                                                      // 6541
   },                                                                                                                  // 6542
                                                                                                                       // 6543
   iconSet : function iconSet(id, url, iconSize) {                                                                     // 6544
     config[id] = new ConfigurationItem(url, iconSize );                                                               // 6545
     return this;                                                                                                      // 6546
   },                                                                                                                  // 6547
                                                                                                                       // 6548
   defaultIconSet : function defaultIconSet(url, iconSize) {                                                           // 6549
     var setName = '$default';                                                                                         // 6550
                                                                                                                       // 6551
     if ( !config[setName] ) {                                                                                         // 6552
       config[setName] = new ConfigurationItem(url, iconSize );                                                        // 6553
     }                                                                                                                 // 6554
                                                                                                                       // 6555
     config[setName].iconSize = iconSize || config.defaultIconSize;                                                    // 6556
                                                                                                                       // 6557
     return this;                                                                                                      // 6558
   },                                                                                                                  // 6559
                                                                                                                       // 6560
   defaultIconSize : function defaultIconSize(iconSize) {                                                              // 6561
     config.defaultIconSize = iconSize;                                                                                // 6562
     return this;                                                                                                      // 6563
   },                                                                                                                  // 6564
                                                                                                                       // 6565
   preloadIcons: function ($templateCache) {                                                                           // 6566
     var iconProvider = this;                                                                                          // 6567
     var svgRegistry = [                                                                                               // 6568
       {                                                                                                               // 6569
         id : 'md-tabs-arrow',                                                                                         // 6570
         url: 'md-tabs-arrow.svg',                                                                                     // 6571
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
       },                                                                                                              // 6573
       {                                                                                                               // 6574
         id : 'md-close',                                                                                              // 6575
         url: 'md-close.svg',                                                                                          // 6576
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
       },                                                                                                              // 6578
       {                                                                                                               // 6579
         id:  'md-cancel',                                                                                             // 6580
         url: 'md-cancel.svg',                                                                                         // 6581
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
       },                                                                                                              // 6583
       {                                                                                                               // 6584
         id:  'md-menu',                                                                                               // 6585
         url: 'md-menu.svg',                                                                                           // 6586
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 100 100"><path d="M 50 0 L 100 14 L 92 80 L 50 100 L 8 80 L 0 14 Z" fill="#b2b2b2"></path><path d="M 50 5 L 6 18 L 13.5 77 L 50 94 Z" fill="#E42939"></path><path d="M 50 5 L 94 18 L 86.5 77 L 50 94 Z" fill="#B72833"></path><path d="M 50 7 L 83 75 L 72 75 L 65 59 L 50 59 L 50 50 L 61 50 L 50 26 Z" fill="#b2b2b2"></path><path d="M 50 7 L 17 75 L 28 75 L 35 59 L 50 59 L 50 50 L 39 50 L 50 26 Z" fill="#fff"></path></svg>'
       },                                                                                                              // 6588
       {                                                                                                               // 6589
         id:  'md-toggle-arrow',                                                                                       // 6590
         url: 'md-toggle-arrow-svg',                                                                                   // 6591
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'
       }                                                                                                               // 6593
     ];                                                                                                                // 6594
                                                                                                                       // 6595
     svgRegistry.forEach(function(asset){                                                                              // 6596
       iconProvider.icon(asset.id,  asset.url);                                                                        // 6597
       $templateCache.put(asset.url, asset.svg);                                                                       // 6598
     });                                                                                                               // 6599
                                                                                                                       // 6600
   },                                                                                                                  // 6601
                                                                                                                       // 6602
   $get : ['$http', '$q', '$log', '$templateCache', function($http, $q, $log, $templateCache) {                        // 6603
     this.preloadIcons($templateCache);                                                                                // 6604
     return new MdIconService(config, $http, $q, $log, $templateCache);                                                // 6605
   }]                                                                                                                  // 6606
 };                                                                                                                    // 6607
                                                                                                                       // 6608
   /**                                                                                                                 // 6609
    *  Configuration item stored in the Icon registry; used for lookups                                                // 6610
    *  to load if not already cached in the `loaded` cache                                                             // 6611
    */                                                                                                                 // 6612
   function ConfigurationItem(url, iconSize) {                                                                         // 6613
     this.url = url;                                                                                                   // 6614
     this.iconSize = iconSize || config.defaultIconSize;                                                               // 6615
   }                                                                                                                   // 6616
                                                                                                                       // 6617
 /**                                                                                                                   // 6618
  * @ngdoc service                                                                                                     // 6619
  * @name $mdIcon                                                                                                      // 6620
  * @module material.components.icon                                                                                   // 6621
  *                                                                                                                    // 6622
  * @description                                                                                                       // 6623
  * The `$mdIcon` service is a function used to lookup SVG icons.                                                      // 6624
  *                                                                                                                    // 6625
  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element
  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is
  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.                                     // 6628
  *                                                                                                                    // 6629
  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured // 6630
  * using the `$mdIconProvider`.                                                                                       // 6631
  *                                                                                                                    // 6632
  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.   // 6633
  *                                                                                                                    // 6634
  * @usage                                                                                                             // 6635
  * <hljs lang="js">                                                                                                   // 6636
  * function SomeDirective($mdIcon) {                                                                                  // 6637
  *                                                                                                                    // 6638
  *   // See if the icon has already been loaded, if not                                                               // 6639
  *   // then lookup the icon from the registry cache, load and cache                                                  // 6640
  *   // it for future requests.                                                                                       // 6641
  *   // NOTE: ID queries require configuration with $mdIconProvider                                                   // 6642
  *                                                                                                                    // 6643
  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });                                        // 6644
  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });                                        // 6645
  *                                                                                                                    // 6646
  *   // Load and cache the external SVG using a URL                                                                   // 6647
  *                                                                                                                    // 6648
  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {                                                         // 6649
  *     element.append(iconEl);                                                                                        // 6650
  *   });                                                                                                              // 6651
  * };                                                                                                                 // 6652
  * </hljs>                                                                                                            // 6653
  *                                                                                                                    // 6654
  * NOTE: The `<md-icon />  ` directive internally uses the `$mdIcon` service to query, loaded, and instantiate        // 6655
  * SVG DOM elements.                                                                                                  // 6656
  */                                                                                                                   // 6657
 function MdIconService(config, $http, $q, $log, $templateCache) {                                                     // 6658
   var iconCache = {};                                                                                                 // 6659
   var urlRegex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;                  // 6660
                                                                                                                       // 6661
   Icon.prototype = { clone : cloneSVG, prepare: prepareAndStyle };                                                    // 6662
                                                                                                                       // 6663
   return function getIcon(id) {                                                                                       // 6664
     id = id || '';                                                                                                    // 6665
                                                                                                                       // 6666
     // If already loaded and cached, use a clone of the cached icon.                                                  // 6667
     // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.                       // 6668
                                                                                                                       // 6669
     if ( iconCache[id]         ) return $q.when( iconCache[id].clone() );                                             // 6670
     if ( urlRegex.test(id)     ) return loadByURL(id).then( cacheIcon(id) );                                          // 6671
     if ( id.indexOf(':') == -1 ) id = '$default:' + id;                                                               // 6672
                                                                                                                       // 6673
     return loadByID(id)                                                                                               // 6674
         .catch(loadFromIconSet)                                                                                       // 6675
         .catch(announceIdNotFound)                                                                                    // 6676
         .catch(announceNotFound)                                                                                      // 6677
         .then( cacheIcon(id) );                                                                                       // 6678
   };                                                                                                                  // 6679
                                                                                                                       // 6680
   /**                                                                                                                 // 6681
    * Prepare and cache the loaded icon for the specified `id`                                                         // 6682
    */                                                                                                                 // 6683
   function cacheIcon( id ) {                                                                                          // 6684
                                                                                                                       // 6685
     return function updateCache( icon ) {                                                                             // 6686
       iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);                                               // 6687
                                                                                                                       // 6688
       return iconCache[id].clone();                                                                                   // 6689
     };                                                                                                                // 6690
   }                                                                                                                   // 6691
                                                                                                                       // 6692
   /**                                                                                                                 // 6693
    * Lookup the configuration in the registry, if !registered throw an error                                          // 6694
    * otherwise load the icon [on-demand] using the registered URL.                                                    // 6695
    *                                                                                                                  // 6696
    */                                                                                                                 // 6697
   function loadByID(id) {                                                                                             // 6698
     var iconConfig = config[id];                                                                                      // 6699
                                                                                                                       // 6700
     return !iconConfig ? $q.reject(id) : loadByURL(iconConfig.url).then(function(icon) {                              // 6701
       return new Icon(icon, iconConfig);                                                                              // 6702
     });                                                                                                               // 6703
   }                                                                                                                   // 6704
                                                                                                                       // 6705
   /**                                                                                                                 // 6706
    *    Loads the file as XML and uses querySelector( <id> ) to find                                                  // 6707
    *    the desired node...                                                                                           // 6708
    */                                                                                                                 // 6709
   function loadFromIconSet(id) {                                                                                      // 6710
     var setName = id.substring(0, id.lastIndexOf(':')) || '$default';                                                 // 6711
     var iconSetConfig = config[setName];                                                                              // 6712
                                                                                                                       // 6713
     return !iconSetConfig ? $q.reject(id) : loadByURL(iconSetConfig.url).then(extractFromSet);                        // 6714
                                                                                                                       // 6715
     function extractFromSet(set) {                                                                                    // 6716
       var iconName = id.slice(id.lastIndexOf(':') + 1);                                                               // 6717
       var icon = set.querySelector('#' + iconName);                                                                   // 6718
       return !icon ? $q.reject(id) : new Icon(icon, iconSetConfig);                                                   // 6719
     }                                                                                                                 // 6720
   }                                                                                                                   // 6721
                                                                                                                       // 6722
   /**                                                                                                                 // 6723
    * Load the icon by URL (may use the $templateCache).                                                               // 6724
    * Extract the data for later conversion to Icon                                                                    // 6725
    */                                                                                                                 // 6726
   function loadByURL(url) {                                                                                           // 6727
     return $http                                                                                                      // 6728
       .get(url, { cache: $templateCache })                                                                            // 6729
       .then(function(response) {                                                                                      // 6730
         return angular.element('<div>').append(response.data).find('svg')[0];                                         // 6731
       });                                                                                                             // 6732
   }                                                                                                                   // 6733
                                                                                                                       // 6734
   /**                                                                                                                 // 6735
    * User did not specify a URL and the ID has not been registered with the $mdIcon                                   // 6736
    * registry                                                                                                         // 6737
    */                                                                                                                 // 6738
   function announceIdNotFound(id) {                                                                                   // 6739
     var msg;                                                                                                          // 6740
                                                                                                                       // 6741
     if (angular.isString(id)) {                                                                                       // 6742
       msg = 'icon ' + id + ' not found';                                                                              // 6743
       $log.warn(msg);                                                                                                 // 6744
     }                                                                                                                 // 6745
                                                                                                                       // 6746
     return $q.reject(msg || id);                                                                                      // 6747
   }                                                                                                                   // 6748
                                                                                                                       // 6749
   /**                                                                                                                 // 6750
    * Catch HTTP or generic errors not related to incorrect icon IDs.                                                  // 6751
    */                                                                                                                 // 6752
   function announceNotFound(err) {                                                                                    // 6753
     var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);                              // 6754
     $log.warn(msg);                                                                                                   // 6755
                                                                                                                       // 6756
     return $q.reject(msg);                                                                                            // 6757
   }                                                                                                                   // 6758
                                                                                                                       // 6759
   /**                                                                                                                 // 6760
    * Check target signature to see if it is an Icon instance.                                                         // 6761
    */                                                                                                                 // 6762
   function isIcon(target) {                                                                                           // 6763
     return angular.isDefined(target.element) && angular.isDefined(target.config);                                     // 6764
   }                                                                                                                   // 6765
                                                                                                                       // 6766
   /**                                                                                                                 // 6767
    *  Define the Icon class                                                                                           // 6768
    */                                                                                                                 // 6769
   function Icon(el, config) {                                                                                         // 6770
     if (el.tagName != 'svg') {                                                                                        // 6771
       el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0];                                 // 6772
     }                                                                                                                 // 6773
                                                                                                                       // 6774
     // Inject the namespace if not available...                                                                       // 6775
     if ( !el.getAttribute('xmlns') ) {                                                                                // 6776
       el.setAttribute('xmlns', "http://www.w3.org/2000/svg");                                                         // 6777
     }                                                                                                                 // 6778
                                                                                                                       // 6779
     this.element = el;                                                                                                // 6780
     this.config = config;                                                                                             // 6781
     this.prepare();                                                                                                   // 6782
   }                                                                                                                   // 6783
                                                                                                                       // 6784
   /**                                                                                                                 // 6785
    *  Prepare the DOM element that will be cached in the                                                              // 6786
    *  loaded iconCache store.                                                                                         // 6787
    */                                                                                                                 // 6788
   function prepareAndStyle() {                                                                                        // 6789
     var iconSize = this.config ? this.config.iconSize : config.defaultIconSize;                                       // 6790
         angular.forEach({                                                                                             // 6791
           'fit'   : '',                                                                                               // 6792
           'height': '100%',                                                                                           // 6793
           'width' : '100%',                                                                                           // 6794
           'preserveAspectRatio': 'xMidYMid meet',                                                                     // 6795
           'viewBox' : this.element.getAttribute('viewBox') || ('0 0 ' + iconSize + ' ' + iconSize)                    // 6796
         }, function(val, attr) {                                                                                      // 6797
           this.element.setAttribute(attr, val);                                                                       // 6798
         }, this);                                                                                                     // 6799
                                                                                                                       // 6800
         angular.forEach({                                                                                             // 6801
           'pointer-events' : 'none',                                                                                  // 6802
           'display' : 'block'                                                                                         // 6803
         }, function(val, style) {                                                                                     // 6804
           this.element.style[style] = val;                                                                            // 6805
         }, this);                                                                                                     // 6806
   }                                                                                                                   // 6807
                                                                                                                       // 6808
   /**                                                                                                                 // 6809
    * Clone the Icon DOM element.                                                                                      // 6810
    */                                                                                                                 // 6811
   function cloneSVG(){                                                                                                // 6812
     return this.element.cloneNode(true);                                                                              // 6813
   }                                                                                                                   // 6814
                                                                                                                       // 6815
 }                                                                                                                     // 6816
                                                                                                                       // 6817
})();                                                                                                                  // 6818
(function(){                                                                                                           // 6819
"use strict";                                                                                                          // 6820
                                                                                                                       // 6821
/**                                                                                                                    // 6822
 * @ngdoc module                                                                                                       // 6823
 * @name material.components.input                                                                                     // 6824
 */                                                                                                                    // 6825
                                                                                                                       // 6826
angular.module('material.components.input', [                                                                          // 6827
  'material.core'                                                                                                      // 6828
])                                                                                                                     // 6829
  .directive('mdInputContainer', mdInputContainerDirective)                                                            // 6830
  .directive('label', labelDirective)                                                                                  // 6831
  .directive('input', inputTextareaDirective)                                                                          // 6832
  .directive('textarea', inputTextareaDirective)                                                                       // 6833
  .directive('mdMaxlength', mdMaxlengthDirective)                                                                      // 6834
  .directive('placeholder', placeholderDirective);                                                                     // 6835
                                                                                                                       // 6836
/**                                                                                                                    // 6837
 * @ngdoc directive                                                                                                    // 6838
 * @name mdInputContainer                                                                                              // 6839
 * @module material.components.input                                                                                   // 6840
 *                                                                                                                     // 6841
 * @restrict E                                                                                                         // 6842
 *                                                                                                                     // 6843
 * @description                                                                                                        // 6844
 * `<md-input-container>` is the parent of any input or textarea element.                                              // 6845
 *                                                                                                                     // 6846
 * Input and textarea elements will not behave properly unless the md-input-container                                  // 6847
 * parent is provided.                                                                                                 // 6848
 *                                                                                                                     // 6849
 * @param md-is-error {expression=} When the given expression evaluates to true, the input container will go into error state. Defaults to erroring if the input has been touched and is invalid.
 * @param md-no-float {boolean=} When present, placeholders will not be converted to floating labels                   // 6851
 *                                                                                                                     // 6852
 * @usage                                                                                                              // 6853
 * <hljs lang="html">                                                                                                  // 6854
 *                                                                                                                     // 6855
 * <md-input-container>                                                                                                // 6856
 *   <label>Username</label>                                                                                           // 6857
 *   <input type="text" ng-model="user.name">                                                                          // 6858
 * </md-input-container>                                                                                               // 6859
 *                                                                                                                     // 6860
 * <md-input-container>                                                                                                // 6861
 *   <label>Description</label>                                                                                        // 6862
 *   <textarea ng-model="user.description"></textarea>                                                                 // 6863
 * </md-input-container>                                                                                               // 6864
 *                                                                                                                     // 6865
 * </hljs>                                                                                                             // 6866
 */                                                                                                                    // 6867
function mdInputContainerDirective($mdTheming, $parse) {                                                               // 6868
  ContainerCtrl.$inject = ["$scope", "$element", "$attrs"];                                                            // 6869
  return {                                                                                                             // 6870
    restrict: 'E',                                                                                                     // 6871
    link: postLink,                                                                                                    // 6872
    controller: ContainerCtrl                                                                                          // 6873
  };                                                                                                                   // 6874
                                                                                                                       // 6875
  function postLink(scope, element, attr) {                                                                            // 6876
    $mdTheming(element);                                                                                               // 6877
  }                                                                                                                    // 6878
  function ContainerCtrl($scope, $element, $attrs) {                                                                   // 6879
    var self = this;                                                                                                   // 6880
                                                                                                                       // 6881
    self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);                                                 // 6882
                                                                                                                       // 6883
    self.delegateClick = function() {                                                                                  // 6884
      self.input.focus();                                                                                              // 6885
    };                                                                                                                 // 6886
    self.element = $element;                                                                                           // 6887
    self.setFocused = function(isFocused) {                                                                            // 6888
      $element.toggleClass('md-input-focused', !!isFocused);                                                           // 6889
    };                                                                                                                 // 6890
    self.setHasValue = function(hasValue) {                                                                            // 6891
      $element.toggleClass('md-input-has-value', !!hasValue);                                                          // 6892
    };                                                                                                                 // 6893
    self.setInvalid = function(isInvalid) {                                                                            // 6894
      $element.toggleClass('md-input-invalid', !!isInvalid);                                                           // 6895
    };                                                                                                                 // 6896
    $scope.$watch(function() {                                                                                         // 6897
      return self.label && self.input;                                                                                 // 6898
    }, function(hasLabelAndInput) {                                                                                    // 6899
      if (hasLabelAndInput && !self.label.attr('for')) {                                                               // 6900
        self.label.attr('for', self.input.attr('id'));                                                                 // 6901
      }                                                                                                                // 6902
    });                                                                                                                // 6903
  }                                                                                                                    // 6904
}                                                                                                                      // 6905
mdInputContainerDirective.$inject = ["$mdTheming", "$parse"];                                                          // 6906
                                                                                                                       // 6907
function labelDirective() {                                                                                            // 6908
  return {                                                                                                             // 6909
    restrict: 'E',                                                                                                     // 6910
    require: '^?mdInputContainer',                                                                                     // 6911
    link: function(scope, element, attr, containerCtrl) {                                                              // 6912
      if (!containerCtrl || attr.mdNoFloat) return;                                                                    // 6913
                                                                                                                       // 6914
      containerCtrl.label = element;                                                                                   // 6915
      scope.$on('$destroy', function() {                                                                               // 6916
        containerCtrl.label = null;                                                                                    // 6917
      });                                                                                                              // 6918
    }                                                                                                                  // 6919
  };                                                                                                                   // 6920
}                                                                                                                      // 6921
                                                                                                                       // 6922
/**                                                                                                                    // 6923
 * @ngdoc directive                                                                                                    // 6924
 * @name mdInput                                                                                                       // 6925
 * @restrict E                                                                                                         // 6926
 * @module material.components.input                                                                                   // 6927
 *                                                                                                                     // 6928
 * @description                                                                                                        // 6929
 * Use the `<input>` or the  `<textarea>` as a child of an `<md-input-container>`.                                     // 6930
 *                                                                                                                     // 6931
 * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is specified, a character counter will be shown underneath the input.<br/><br/>
 * The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't want the counter text and only need "plain" validation, you can use the "simple" `ng-maxlength` or maxlength attributes.
 * @param {string=} aria-label Aria-label is required when no label is present.  A warning message will be logged in the console if not present.
 * @param {string=} placeholder An alternative approach to using aria-label when the label is not present.  The placeholder text is copied to the aria-label attribute.
 *                                                                                                                     // 6936
 * @usage                                                                                                              // 6937
 * <hljs lang="html">                                                                                                  // 6938
 * <md-input-container>                                                                                                // 6939
 *   <label>Color</label>                                                                                              // 6940
 *   <input type="text" ng-model="color" required md-maxlength="10">                                                   // 6941
 * </md-input-container>                                                                                               // 6942
 * </hljs>                                                                                                             // 6943
 * <h3>With Errors (uses [ngMessages](https://docs.angularjs.org/api/ngMessages))</h3>                                 // 6944
 * <hljs lang="html">                                                                                                  // 6945
 * <form name="userForm">                                                                                              // 6946
 *   <md-input-container>                                                                                              // 6947
 *     <label>Last Name</label>                                                                                        // 6948
 *     <input name="lastName" ng-model="lastName" required md-maxlength="10" minlength="4">                            // 6949
 *     <div ng-messages="userForm.lastName.$error" ng-show="userForm.lastName.$dirty">                                 // 6950
 *       <div ng-message="required">This is required!</div>                                                            // 6951
 *       <div ng-message="md-maxlength">That's too long!</div>                                                         // 6952
 *       <div ng-message="minlength">That's too short!</div>                                                           // 6953
 *     </div>                                                                                                          // 6954
 *   </md-input-container>                                                                                             // 6955
 *   <md-input-container>                                                                                              // 6956
 *     <label>Biography</label>                                                                                        // 6957
 *     <textarea name="bio" ng-model="biography" required md-maxlength="150"></textarea>                               // 6958
 *     <div ng-messages="userForm.bio.$error" ng-show="userForm.bio.$dirty">                                           // 6959
 *       <div ng-message="required">This is required!</div>                                                            // 6960
 *       <div ng-message="md-maxlength">That's too long!</div>                                                         // 6961
 *     </div>                                                                                                          // 6962
 *   </md-input-container>                                                                                             // 6963
 *   <md-input-container>                                                                                              // 6964
 *     <input aria-label='title' ng-model='title'>                                                                     // 6965
 *   </md-input-container>                                                                                             // 6966
 *   <md-input-container>                                                                                              // 6967
 *     <input placeholder='title' ng-model='title'>                                                                    // 6968
 *   </md-input-container>                                                                                             // 6969
 * </form>                                                                                                             // 6970
 * </hljs>                                                                                                             // 6971
 *                                                                                                                     // 6972
 * Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).                    // 6973
 *                                                                                                                     // 6974
 */                                                                                                                    // 6975
                                                                                                                       // 6976
function inputTextareaDirective($mdUtil, $window, $mdAria) {                                                           // 6977
  return {                                                                                                             // 6978
    restrict: 'E',                                                                                                     // 6979
    require: ['^?mdInputContainer', '?ngModel'],                                                                       // 6980
    link: postLink                                                                                                     // 6981
  };                                                                                                                   // 6982
                                                                                                                       // 6983
  function postLink(scope, element, attr, ctrls) {                                                                     // 6984
                                                                                                                       // 6985
    var containerCtrl = ctrls[0];                                                                                      // 6986
    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();                                                               // 6987
    var isReadonly = angular.isDefined(attr.readonly);                                                                 // 6988
                                                                                                                       // 6989
    if ( !containerCtrl ) return;                                                                                      // 6990
    if (containerCtrl.input) {                                                                                         // 6991
      throw new Error("<md-input-container> can only have *one* <input> or <textarea> child element!");                // 6992
    }                                                                                                                  // 6993
    containerCtrl.input = element;                                                                                     // 6994
                                                                                                                       // 6995
    if(!containerCtrl.label) {                                                                                         // 6996
      $mdAria.expect(element, 'aria-label', element.attr('placeholder'));                                              // 6997
    }                                                                                                                  // 6998
                                                                                                                       // 6999
    element.addClass('md-input');                                                                                      // 7000
    if (!element.attr('id')) {                                                                                         // 7001
      element.attr('id', 'input_' + $mdUtil.nextUid());                                                                // 7002
    }                                                                                                                  // 7003
                                                                                                                       // 7004
    if (element[0].tagName.toLowerCase() === 'textarea') {                                                             // 7005
      setupTextarea();                                                                                                 // 7006
    }                                                                                                                  // 7007
                                                                                                                       // 7008
    var isErrorGetter = containerCtrl.isErrorGetter || function() {                                                    // 7009
      return ngModelCtrl.$invalid && ngModelCtrl.$touched;                                                             // 7010
    };                                                                                                                 // 7011
    scope.$watch(isErrorGetter, containerCtrl.setInvalid);                                                             // 7012
                                                                                                                       // 7013
    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);                                                              // 7014
    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);                                                           // 7015
                                                                                                                       // 7016
    element.on('input', inputCheckValue);                                                                              // 7017
                                                                                                                       // 7018
    if (!isReadonly) {                                                                                                 // 7019
      element                                                                                                          // 7020
        .on('focus', function(ev) {                                                                                    // 7021
          containerCtrl.setFocused(true);                                                                              // 7022
        })                                                                                                             // 7023
        .on('blur', function(ev) {                                                                                     // 7024
          containerCtrl.setFocused(false);                                                                             // 7025
          inputCheckValue();                                                                                           // 7026
        });                                                                                                            // 7027
                                                                                                                       // 7028
    }                                                                                                                  // 7029
                                                                                                                       // 7030
    //ngModelCtrl.$setTouched();                                                                                       // 7031
    //if( ngModelCtrl.$invalid ) containerCtrl.setInvalid();                                                           // 7032
                                                                                                                       // 7033
    scope.$on('$destroy', function() {                                                                                 // 7034
      containerCtrl.setFocused(false);                                                                                 // 7035
      containerCtrl.setHasValue(false);                                                                                // 7036
      containerCtrl.input = null;                                                                                      // 7037
    });                                                                                                                // 7038
                                                                                                                       // 7039
    /**                                                                                                                // 7040
     *                                                                                                                 // 7041
     */                                                                                                                // 7042
    function ngModelPipelineCheckValue(arg) {                                                                          // 7043
      containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));                                                           // 7044
      return arg;                                                                                                      // 7045
    }                                                                                                                  // 7046
    function inputCheckValue() {                                                                                       // 7047
      // An input's value counts if its length > 0,                                                                    // 7048
      // or if the input's validity state says it has bad input (eg string in a number input)                          // 7049
      containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity||{}).badInput);                       // 7050
    }                                                                                                                  // 7051
                                                                                                                       // 7052
    function setupTextarea() {                                                                                         // 7053
      var node = element[0];                                                                                           // 7054
      var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);                                                        // 7055
                                                                                                                       // 7056
      function pipelineListener(value) {                                                                               // 7057
        onChangeTextarea();                                                                                            // 7058
        return value;                                                                                                  // 7059
      }                                                                                                                // 7060
                                                                                                                       // 7061
      if (ngModelCtrl) {                                                                                               // 7062
        ngModelCtrl.$formatters.push(pipelineListener);                                                                // 7063
        ngModelCtrl.$viewChangeListeners.push(pipelineListener);                                                       // 7064
      } else {                                                                                                         // 7065
        onChangeTextarea();                                                                                            // 7066
      }                                                                                                                // 7067
      element.on('keydown input', onChangeTextarea);                                                                   // 7068
      element.on('scroll', onScroll);                                                                                  // 7069
      angular.element($window).on('resize', onChangeTextarea);                                                         // 7070
                                                                                                                       // 7071
      scope.$on('$destroy', function() {                                                                               // 7072
        angular.element($window).off('resize', onChangeTextarea);                                                      // 7073
      });                                                                                                              // 7074
                                                                                                                       // 7075
      function growTextarea() {                                                                                        // 7076
        node.style.height = "auto";                                                                                    // 7077
        node.scrollTop = 0;                                                                                            // 7078
        var height = getHeight();                                                                                      // 7079
        if (height) node.style.height = height + 'px';                                                                 // 7080
      }                                                                                                                // 7081
                                                                                                                       // 7082
      function getHeight () {                                                                                          // 7083
        var line = node.scrollHeight - node.offsetHeight;                                                              // 7084
        return node.offsetHeight + (line > 0 ? line : 0);                                                              // 7085
      }                                                                                                                // 7086
                                                                                                                       // 7087
      function onScroll(e) {                                                                                           // 7088
        node.scrollTop = 0;                                                                                            // 7089
        // for smooth new line adding                                                                                  // 7090
        var line = node.scrollHeight - node.offsetHeight;                                                              // 7091
        var height = node.offsetHeight + line;                                                                         // 7092
        node.style.height = height + 'px';                                                                             // 7093
      }                                                                                                                // 7094
    }                                                                                                                  // 7095
  }                                                                                                                    // 7096
}                                                                                                                      // 7097
inputTextareaDirective.$inject = ["$mdUtil", "$window", "$mdAria"];                                                    // 7098
                                                                                                                       // 7099
function mdMaxlengthDirective($animate) {                                                                              // 7100
  return {                                                                                                             // 7101
    restrict: 'A',                                                                                                     // 7102
    require: ['ngModel', '^mdInputContainer'],                                                                         // 7103
    link: postLink                                                                                                     // 7104
  };                                                                                                                   // 7105
                                                                                                                       // 7106
  function postLink(scope, element, attr, ctrls) {                                                                     // 7107
    var maxlength;                                                                                                     // 7108
    var ngModelCtrl = ctrls[0];                                                                                        // 7109
    var containerCtrl = ctrls[1];                                                                                      // 7110
    var charCountEl = angular.element('<div class="md-char-counter">');                                                // 7111
                                                                                                                       // 7112
    // Stop model from trimming. This makes it so whitespace                                                           // 7113
    // over the maxlength still counts as invalid.                                                                     // 7114
    attr.$set('ngTrim', 'false');                                                                                      // 7115
    containerCtrl.element.append(charCountEl);                                                                         // 7116
                                                                                                                       // 7117
    ngModelCtrl.$formatters.push(renderCharCount);                                                                     // 7118
    ngModelCtrl.$viewChangeListeners.push(renderCharCount);                                                            // 7119
    element.on('input keydown', function() {                                                                           // 7120
      renderCharCount(); //make sure it's called with no args                                                          // 7121
    });                                                                                                                // 7122
                                                                                                                       // 7123
    scope.$watch(attr.mdMaxlength, function(value) {                                                                   // 7124
      maxlength = value;                                                                                               // 7125
      if (angular.isNumber(value) && value > 0) {                                                                      // 7126
        if (!charCountEl.parent().length) {                                                                            // 7127
          $animate.enter(charCountEl, containerCtrl.element,                                                           // 7128
                         angular.element(containerCtrl.element[0].lastElementChild));                                  // 7129
        }                                                                                                              // 7130
        renderCharCount();                                                                                             // 7131
      } else {                                                                                                         // 7132
        $animate.leave(charCountEl);                                                                                   // 7133
      }                                                                                                                // 7134
    });                                                                                                                // 7135
                                                                                                                       // 7136
    ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {                                        // 7137
      if (!angular.isNumber(maxlength) || maxlength < 0) {                                                             // 7138
        return true;                                                                                                   // 7139
      }                                                                                                                // 7140
      return ( modelValue || element.val() || viewValue || '' ).length <= maxlength;                                   // 7141
    };                                                                                                                 // 7142
                                                                                                                       // 7143
    function renderCharCount(value) {                                                                                  // 7144
      charCountEl.text( ( element.val() || value || '' ).length + '/' + maxlength );                                   // 7145
      return value;                                                                                                    // 7146
    }                                                                                                                  // 7147
  }                                                                                                                    // 7148
}                                                                                                                      // 7149
mdMaxlengthDirective.$inject = ["$animate"];                                                                           // 7150
                                                                                                                       // 7151
function placeholderDirective($log) {                                                                                  // 7152
  var blackListElements = ['MD-SELECT'];                                                                               // 7153
  return {                                                                                                             // 7154
    restrict: 'A',                                                                                                     // 7155
    require: '^^?mdInputContainer',                                                                                    // 7156
    priority: 200,                                                                                                     // 7157
    link: postLink                                                                                                     // 7158
  };                                                                                                                   // 7159
                                                                                                                       // 7160
  function postLink(scope, element, attr, inputContainer) {                                                            // 7161
    if (!inputContainer) return;                                                                                       // 7162
    if (blackListElements.indexOf(element[0].nodeName) != -1) return;                                                  // 7163
    if (angular.isDefined(inputContainer.element.attr('md-no-float'))) return;                                         // 7164
                                                                                                                       // 7165
    var placeholderText = attr.placeholder;                                                                            // 7166
    element.removeAttr('placeholder');                                                                                 // 7167
                                                                                                                       // 7168
    if ( inputContainer.element.find('label').length == 0 ) {                                                          // 7169
      var placeholder = '<label ng-click="delegateClick()">' + placeholderText + '</label>';                           // 7170
                                                                                                                       // 7171
      inputContainer.element.addClass('md-icon-float');                                                                // 7172
      inputContainer.element.prepend(placeholder);                                                                     // 7173
    } else {                                                                                                           // 7174
      $log.warn("The placeholder='" + placeholderText + "' will be ignored since this md-input-container has a child label element.");
    }                                                                                                                  // 7176
                                                                                                                       // 7177
  }                                                                                                                    // 7178
}                                                                                                                      // 7179
placeholderDirective.$inject = ["$log"];                                                                               // 7180
                                                                                                                       // 7181
})();                                                                                                                  // 7182
(function(){                                                                                                           // 7183
"use strict";                                                                                                          // 7184
                                                                                                                       // 7185
/**                                                                                                                    // 7186
 * @ngdoc module                                                                                                       // 7187
 * @name material.components.list                                                                                      // 7188
 * @description                                                                                                        // 7189
 * List module                                                                                                         // 7190
 */                                                                                                                    // 7191
angular.module('material.components.list', [                                                                           // 7192
  'material.core'                                                                                                      // 7193
])                                                                                                                     // 7194
  .controller('MdListController', MdListController)                                                                    // 7195
  .directive('mdList', mdListDirective)                                                                                // 7196
  .directive('mdListItem', mdListItemDirective);                                                                       // 7197
                                                                                                                       // 7198
/**                                                                                                                    // 7199
 * @ngdoc directive                                                                                                    // 7200
 * @name mdList                                                                                                        // 7201
 * @module material.components.list                                                                                    // 7202
 *                                                                                                                     // 7203
 * @restrict E                                                                                                         // 7204
 *                                                                                                                     // 7205
 * @description                                                                                                        // 7206
 * The `<md-list>` directive is a list container for 1..n `<md-list-item>` tags.                                       // 7207
 *                                                                                                                     // 7208
 * @usage                                                                                                              // 7209
 * <hljs lang="html">                                                                                                  // 7210
 * <md-list>                                                                                                           // 7211
 *   <md-list-item class="md-2-line" ng-repeat="item in todos">                                                        // 7212
 *     <md-checkbox ng-model="item.done"></md-checkbox>                                                                // 7213
 *     <div class="md-list-item-text">                                                                                 // 7214
 *       <h3>{{item.title}}</h3>                                                                                       // 7215
 *       <p>{{item.description}}</p>                                                                                   // 7216
 *     </div>                                                                                                          // 7217
 *   </md-list-item>                                                                                                   // 7218
 * </md-list>                                                                                                          // 7219
 * </hljs>                                                                                                             // 7220
 */                                                                                                                    // 7221
                                                                                                                       // 7222
function mdListDirective($mdTheming) {                                                                                 // 7223
  return {                                                                                                             // 7224
    restrict: 'E',                                                                                                     // 7225
    compile: function(tEl) {                                                                                           // 7226
      tEl[0].setAttribute('role', 'list');                                                                             // 7227
      return $mdTheming;                                                                                               // 7228
    }                                                                                                                  // 7229
  };                                                                                                                   // 7230
}                                                                                                                      // 7231
mdListDirective.$inject = ["$mdTheming"];                                                                              // 7232
/**                                                                                                                    // 7233
 * @ngdoc directive                                                                                                    // 7234
 * @name mdListItem                                                                                                    // 7235
 * @module material.components.list                                                                                    // 7236
 *                                                                                                                     // 7237
 * @restrict E                                                                                                         // 7238
 *                                                                                                                     // 7239
 * @description                                                                                                        // 7240
 * The `<md-list-item>` directive is a container intended for row items in a `<md-list>` container.                    // 7241
 *                                                                                                                     // 7242
 * @usage                                                                                                              // 7243
 * <hljs lang="html">                                                                                                  // 7244
 *  <md-list>                                                                                                          // 7245
 *    <md-list-item>                                                                                                   // 7246
 *            Item content in list                                                                                     // 7247
 *    </md-list-item>                                                                                                  // 7248
 *  </md-list>                                                                                                         // 7249
 * </hljs>                                                                                                             // 7250
 *                                                                                                                     // 7251
 */                                                                                                                    // 7252
function mdListItemDirective($mdAria, $mdConstant, $timeout) {                                                         // 7253
  var proxiedTypes = ['md-checkbox', 'md-switch'];                                                                     // 7254
  return {                                                                                                             // 7255
    restrict: 'E',                                                                                                     // 7256
    controller: 'MdListController',                                                                                    // 7257
    compile: function(tEl, tAttrs) {                                                                                   // 7258
      // Check for proxy controls (no ng-click on parent, and a control inside)                                        // 7259
      var secondaryItem = tEl[0].querySelector('.md-secondary');                                                       // 7260
      var hasProxiedElement;                                                                                           // 7261
      var proxyElement;                                                                                                // 7262
                                                                                                                       // 7263
      tEl[0].setAttribute('role', 'listitem');                                                                         // 7264
                                                                                                                       // 7265
      if (!tAttrs.ngClick) {                                                                                           // 7266
        for (var i = 0, type; type = proxiedTypes[i]; ++i) {                                                           // 7267
          if (proxyElement = tEl[0].querySelector(type)) {                                                             // 7268
            hasProxiedElement = true;                                                                                  // 7269
            break;                                                                                                     // 7270
          }                                                                                                            // 7271
        }                                                                                                              // 7272
        if (hasProxiedElement) {                                                                                       // 7273
          wrapIn('div');                                                                                               // 7274
        } else if (!tEl[0].querySelector('md-button')) {                                                               // 7275
          tEl.addClass('md-no-proxy');                                                                                 // 7276
        }                                                                                                              // 7277
      } else {                                                                                                         // 7278
        wrapIn('button');                                                                                              // 7279
      }                                                                                                                // 7280
      setupToggleAria();                                                                                               // 7281
                                                                                                                       // 7282
                                                                                                                       // 7283
      function setupToggleAria() {                                                                                     // 7284
        var toggleTypes = ['md-switch', 'md-checkbox'];                                                                // 7285
        var toggle;                                                                                                    // 7286
                                                                                                                       // 7287
        for (var i = 0, toggleType; toggleType = toggleTypes[i]; ++i) {                                                // 7288
          if (toggle = tEl.find(toggleType)[0]) {                                                                      // 7289
            if (!toggle.hasAttribute('aria-label')) {                                                                  // 7290
              var p = tEl.find('p')[0];                                                                                // 7291
              if (!p) return;                                                                                          // 7292
              toggle.setAttribute('aria-label', 'Toggle ' + p.textContent);                                            // 7293
            }                                                                                                          // 7294
          }                                                                                                            // 7295
        }                                                                                                              // 7296
      }                                                                                                                // 7297
                                                                                                                       // 7298
      function wrapIn(type) {                                                                                          // 7299
        var container;                                                                                                 // 7300
        if (type == 'div') {                                                                                           // 7301
          container = angular.element('<div class="md-no-style md-list-item-inner">');                                 // 7302
          container.append(tEl.contents());                                                                            // 7303
          tEl.addClass('md-proxy-focus');                                                                              // 7304
        } else {                                                                                                       // 7305
          container = angular.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');
          var copiedAttrs = ['ng-click', 'aria-label', 'ng-disabled'];                                                 // 7307
          angular.forEach(copiedAttrs, function(attr) {                                                                // 7308
            if (tEl[0].hasAttribute(attr)) {                                                                           // 7309
              container[0].setAttribute(attr, tEl[0].getAttribute(attr));                                              // 7310
              tEl[0].removeAttribute(attr);                                                                            // 7311
            }                                                                                                          // 7312
          });                                                                                                          // 7313
          container.children().eq(0).append(tEl.contents());                                                           // 7314
        }                                                                                                              // 7315
                                                                                                                       // 7316
        tEl[0].setAttribute('tabindex', '-1');                                                                         // 7317
        tEl.append(container);                                                                                         // 7318
                                                                                                                       // 7319
        if (secondaryItem && secondaryItem.hasAttribute('ng-click')) {                                                 // 7320
          $mdAria.expect(secondaryItem, 'aria-label');                                                                 // 7321
          var buttonWrapper = angular.element('<md-button class="md-secondary-container md-icon-button">');            // 7322
          buttonWrapper.attr('ng-click', secondaryItem.getAttribute('ng-click'));                                      // 7323
          secondaryItem.removeAttribute('ng-click');                                                                   // 7324
          secondaryItem.setAttribute('tabindex', '-1');                                                                // 7325
          secondaryItem.classList.remove('md-secondary');                                                              // 7326
          buttonWrapper.append(secondaryItem);                                                                         // 7327
          secondaryItem = buttonWrapper[0];                                                                            // 7328
        }                                                                                                              // 7329
                                                                                                                       // 7330
        // Check for a secondary item and move it outside                                                              // 7331
        if ( secondaryItem && (                                                                                        // 7332
          secondaryItem.hasAttribute('ng-click') ||                                                                    // 7333
            ( tAttrs.ngClick &&                                                                                        // 7334
             isProxiedElement(secondaryItem) )                                                                         // 7335
        )) {                                                                                                           // 7336
          tEl.addClass('md-with-secondary');                                                                           // 7337
          tEl.append(secondaryItem);                                                                                   // 7338
        }                                                                                                              // 7339
      }                                                                                                                // 7340
                                                                                                                       // 7341
      function isProxiedElement(el) {                                                                                  // 7342
        return proxiedTypes.indexOf(el.nodeName.toLowerCase()) != -1;                                                  // 7343
      }                                                                                                                // 7344
                                                                                                                       // 7345
      return postLink;                                                                                                 // 7346
                                                                                                                       // 7347
      function postLink($scope, $element, $attr, ctrl) {                                                               // 7348
                                                                                                                       // 7349
        var proxies    = [],                                                                                           // 7350
            firstChild = $element[0].firstElementChild,                                                                // 7351
            hasClick   = firstChild && firstChild.hasAttribute('ng-click');                                            // 7352
                                                                                                                       // 7353
        computeProxies();                                                                                              // 7354
        computeClickable();                                                                                            // 7355
                                                                                                                       // 7356
        if ($element.hasClass('md-proxy-focus') && proxies.length) {                                                   // 7357
          angular.forEach(proxies, function(proxy) {                                                                   // 7358
            proxy = angular.element(proxy);                                                                            // 7359
                                                                                                                       // 7360
            $scope.mouseActive = false;                                                                                // 7361
            proxy.on('mousedown', function() {                                                                         // 7362
              $scope.mouseActive = true;                                                                               // 7363
              $timeout(function(){                                                                                     // 7364
                $scope.mouseActive = false;                                                                            // 7365
              }, 100);                                                                                                 // 7366
            })                                                                                                         // 7367
            .on('focus', function() {                                                                                  // 7368
              if ($scope.mouseActive === false) { $element.addClass('md-focused'); }                                   // 7369
              proxy.on('blur', function proxyOnBlur() {                                                                // 7370
                $element.removeClass('md-focused');                                                                    // 7371
                proxy.off('blur', proxyOnBlur);                                                                        // 7372
              });                                                                                                      // 7373
            });                                                                                                        // 7374
          });                                                                                                          // 7375
        }                                                                                                              // 7376
                                                                                                                       // 7377
        function computeProxies() {                                                                                    // 7378
          var children = $element.children();                                                                          // 7379
          if (children.length && !children[0].hasAttribute('ng-click')) {                                              // 7380
            angular.forEach(proxiedTypes, function(type) {                                                             // 7381
              angular.forEach(firstChild.querySelectorAll(type), function(child) {                                     // 7382
                proxies.push(child);                                                                                   // 7383
              });                                                                                                      // 7384
            });                                                                                                        // 7385
          }                                                                                                            // 7386
        }                                                                                                              // 7387
        function computeClickable() {                                                                                  // 7388
          if (proxies.length || hasClick) {                                                                            // 7389
            $element.addClass('md-clickable');                                                                         // 7390
                                                                                                                       // 7391
            ctrl.attachRipple($scope, angular.element($element[0].querySelector('.md-no-style')));                     // 7392
          }                                                                                                            // 7393
        }                                                                                                              // 7394
                                                                                                                       // 7395
        if (!hasClick && !proxies.length) {                                                                            // 7396
          firstChild.addEventListener('keypress', function(e) {                                                        // 7397
            if (e.target.nodeName != 'INPUT' && e.target.nodeName != 'TEXTAREA') {                                     // 7398
              var keyCode = e.which || e.keyCode;                                                                      // 7399
              if (keyCode == $mdConstant.KEY_CODE.SPACE) {                                                             // 7400
                firstChild.click();                                                                                    // 7401
                e.preventDefault();                                                                                    // 7402
                e.stopPropagation();                                                                                   // 7403
              }                                                                                                        // 7404
            }                                                                                                          // 7405
          });                                                                                                          // 7406
        }                                                                                                              // 7407
                                                                                                                       // 7408
        $element.off('click');                                                                                         // 7409
        $element.off('keypress');                                                                                      // 7410
                                                                                                                       // 7411
        if (proxies.length && firstChild) {                                                                            // 7412
          $element.children().eq(0).on('click', function(e) {                                                          // 7413
            if (firstChild.contains(e.target)) {                                                                       // 7414
              angular.forEach(proxies, function(proxy) {                                                               // 7415
                if (e.target !== proxy && !proxy.contains(e.target)) {                                                 // 7416
                  angular.element(proxy).triggerHandler('click');                                                      // 7417
                }                                                                                                      // 7418
              });                                                                                                      // 7419
            }                                                                                                          // 7420
          });                                                                                                          // 7421
        }                                                                                                              // 7422
      }                                                                                                                // 7423
    }                                                                                                                  // 7424
  };                                                                                                                   // 7425
}                                                                                                                      // 7426
mdListItemDirective.$inject = ["$mdAria", "$mdConstant", "$timeout"];                                                  // 7427
                                                                                                                       // 7428
/*                                                                                                                     // 7429
 * @private                                                                                                            // 7430
 * @ngdoc controller                                                                                                   // 7431
 * @name MdListController                                                                                              // 7432
 * @module material.components.list                                                                                    // 7433
 *                                                                                                                     // 7434
 */                                                                                                                    // 7435
function MdListController($scope, $element, $mdListInkRipple) {                                                        // 7436
  var ctrl = this;                                                                                                     // 7437
  ctrl.attachRipple = attachRipple;                                                                                    // 7438
                                                                                                                       // 7439
  function attachRipple (scope, element) {                                                                             // 7440
    var options = {};                                                                                                  // 7441
    $mdListInkRipple.attach(scope, element, options);                                                                  // 7442
  }                                                                                                                    // 7443
}                                                                                                                      // 7444
MdListController.$inject = ["$scope", "$element", "$mdListInkRipple"];                                                 // 7445
                                                                                                                       // 7446
})();                                                                                                                  // 7447
(function(){                                                                                                           // 7448
"use strict";                                                                                                          // 7449
                                                                                                                       // 7450
/**                                                                                                                    // 7451
 * @ngdoc module                                                                                                       // 7452
 * @name material.components.progressCircular                                                                          // 7453
 * @description Circular Progress module!                                                                              // 7454
 */                                                                                                                    // 7455
angular.module('material.components.progressCircular', [                                                               // 7456
  'material.core'                                                                                                      // 7457
])                                                                                                                     // 7458
  .directive('mdProgressCircular', MdProgressCircularDirective);                                                       // 7459
                                                                                                                       // 7460
/**                                                                                                                    // 7461
 * @ngdoc directive                                                                                                    // 7462
 * @name mdProgressCircular                                                                                            // 7463
 * @module material.components.progressCircular                                                                        // 7464
 * @restrict E                                                                                                         // 7465
 *                                                                                                                     // 7466
* @description                                                                                                         // 7467
 * The circular progress directive is used to make loading content in your app as delightful and                       // 7468
 * painless as possible by minimizing the amount of visual change a user sees before they can view                     // 7469
 * and interact with content.                                                                                          // 7470
 *                                                                                                                     // 7471
 * For operations where the percentage of the operation completed can be determined, use a                             // 7472
 * determinate indicator. They give users a quick sense of how long an operation will take.                            // 7473
 *                                                                                                                     // 7474
 * For operations where the user is asked to wait a moment while something finishes up, and it’s                       // 7475
 * not necessary to expose what's happening behind the scenes and how long it will take, use an                        // 7476
 * indeterminate indicator.                                                                                            // 7477
 *                                                                                                                     // 7478
 * @param {string} md-mode Select from one of two modes: determinate and indeterminate.                                // 7479
 * @param {number=} value In determinate mode, this number represents the percentage of the                            // 7480
 *     circular progress. Default: 0                                                                                   // 7481
 * @param {number=} md-diameter This specifies the diamter of the circular progress. Default: 48                       // 7482
 *                                                                                                                     // 7483
 * @usage                                                                                                              // 7484
 * <hljs lang="html">                                                                                                  // 7485
 * <md-progress-circular md-mode="determinate" value="..."></md-progress-circular>                                     // 7486
 *                                                                                                                     // 7487
 * <md-progress-circular md-mode="determinate" ng-value="..."></md-progress-circular>                                  // 7488
 *                                                                                                                     // 7489
 * <md-progress-circular md-mode="determinate" value="..." md-diameter="100"></md-progress-circular>                   // 7490
 *                                                                                                                     // 7491
 * <md-progress-circular md-mode="indeterminate"></md-progress-circular>                                               // 7492
 * </hljs>                                                                                                             // 7493
 */                                                                                                                    // 7494
function MdProgressCircularDirective($mdConstant, $mdTheming) {                                                        // 7495
  return {                                                                                                             // 7496
    restrict: 'E',                                                                                                     // 7497
    template:                                                                                                          // 7498
        // The progress 'circle' is composed of two half-circles: the left side and the right                          // 7499
        // side. Each side has CSS applied to 'fill-in' the half-circle to the appropriate progress.                   // 7500
        '<div class="md-spinner-wrapper">' +                                                                           // 7501
          '<div class="md-inner">' +                                                                                   // 7502
            '<div class="md-gap"></div>' +                                                                             // 7503
            '<div class="md-left">' +                                                                                  // 7504
              '<div class="md-half-circle"></div>' +                                                                   // 7505
            '</div>' +                                                                                                 // 7506
            '<div class="md-right">' +                                                                                 // 7507
              '<div class="md-half-circle"></div>' +                                                                   // 7508
            '</div>' +                                                                                                 // 7509
          '</div>' +                                                                                                   // 7510
        '</div>',                                                                                                      // 7511
    compile: compile                                                                                                   // 7512
  };                                                                                                                   // 7513
                                                                                                                       // 7514
  function compile(tElement) {                                                                                         // 7515
    // The javascript in this file is mainly responsible for setting the correct aria attributes.                      // 7516
    // The animation of the progress spinner is done entirely with just CSS.                                           // 7517
    tElement.attr('aria-valuemin', 0);                                                                                 // 7518
    tElement.attr('aria-valuemax', 100);                                                                               // 7519
    tElement.attr('role', 'progressbar');                                                                              // 7520
                                                                                                                       // 7521
    return postLink;                                                                                                   // 7522
  }                                                                                                                    // 7523
                                                                                                                       // 7524
  function postLink(scope, element, attr) {                                                                            // 7525
    $mdTheming(element);                                                                                               // 7526
    var circle = element[0];                                                                                           // 7527
                                                                                                                       // 7528
    // Scale the progress circle based on the default diameter.                                                        // 7529
    var diameter = attr.mdDiameter || 48;                                                                              // 7530
    var scale = diameter / 48;                                                                                         // 7531
    circle.style[$mdConstant.CSS.TRANSFORM] = 'scale(' + scale + ')';                                                  // 7532
                                                                                                                       // 7533
    attr.$observe('value', function(value) {                                                                           // 7534
      var percentValue = clamp(value);                                                                                 // 7535
      element.attr('aria-valuenow', percentValue);                                                                     // 7536
    });                                                                                                                // 7537
  }                                                                                                                    // 7538
                                                                                                                       // 7539
  /**                                                                                                                  // 7540
   * Clamps the value to be between 0 and 100.                                                                         // 7541
   * @param {number} value The value to clamp.                                                                         // 7542
   * @returns {number}                                                                                                 // 7543
   */                                                                                                                  // 7544
  function clamp(value) {                                                                                              // 7545
    return Math.max(0, Math.min(value || 0, 100));                                                                     // 7546
  }                                                                                                                    // 7547
}                                                                                                                      // 7548
MdProgressCircularDirective.$inject = ["$mdConstant", "$mdTheming"];                                                   // 7549
                                                                                                                       // 7550
})();                                                                                                                  // 7551
(function(){                                                                                                           // 7552
"use strict";                                                                                                          // 7553
                                                                                                                       // 7554
/**                                                                                                                    // 7555
 * @ngdoc module                                                                                                       // 7556
 * @name material.components.progressLinear                                                                            // 7557
 * @description Linear Progress module!                                                                                // 7558
 */                                                                                                                    // 7559
angular.module('material.components.progressLinear', [                                                                 // 7560
  'material.core'                                                                                                      // 7561
])                                                                                                                     // 7562
  .directive('mdProgressLinear', MdProgressLinearDirective);                                                           // 7563
                                                                                                                       // 7564
/**                                                                                                                    // 7565
 * @ngdoc directive                                                                                                    // 7566
 * @name mdProgressLinear                                                                                              // 7567
 * @module material.components.progressLinear                                                                          // 7568
 * @restrict E                                                                                                         // 7569
 *                                                                                                                     // 7570
 * @description                                                                                                        // 7571
 * The linear progress directive is used to make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content. Each operation should only be represented by one activity indicator—for example, one refresh operation should not display both a refresh bar and an activity circle.
 *                                                                                                                     // 7573
 * For operations where the percentage of the operation completed can be determined, use a determinate indicator. They give users a quick sense of how long an operation will take.
 *                                                                                                                     // 7575
 * For operations where the user is asked to wait a moment while something finishes up, and it’s not necessary to expose what's happening behind the scenes and how long it will take, use an indeterminate indicator.
 *                                                                                                                     // 7577
 * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.                 // 7578
 * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0
 * @param {number=} md-buffer-value In the buffer mode, this number represents the precentage of the secondary progress bar. Default: 0
 *                                                                                                                     // 7581
 * @usage                                                                                                              // 7582
 * <hljs lang="html">                                                                                                  // 7583
 * <md-progress-linear md-mode="determinate" value="..."></md-progress-linear>                                         // 7584
 *                                                                                                                     // 7585
 * <md-progress-linear md-mode="determinate" ng-value="..."></md-progress-linear>                                      // 7586
 *                                                                                                                     // 7587
 * <md-progress-linear md-mode="indeterminate"></md-progress-linear>                                                   // 7588
 *                                                                                                                     // 7589
 * <md-progress-linear md-mode="buffer" value="..." md-buffer-value="..."></md-progress-linear>                        // 7590
 *                                                                                                                     // 7591
 * <md-progress-linear md-mode="query"></md-progress-linear>                                                           // 7592
 * </hljs>                                                                                                             // 7593
 */                                                                                                                    // 7594
function MdProgressLinearDirective($$rAF, $mdConstant, $mdTheming) {                                                   // 7595
                                                                                                                       // 7596
  return {                                                                                                             // 7597
    restrict: 'E',                                                                                                     // 7598
    template: '<div class="md-container">' +                                                                           // 7599
      '<div class="md-dashed"></div>' +                                                                                // 7600
      '<div class="md-bar md-bar1"></div>' +                                                                           // 7601
      '<div class="md-bar md-bar2"></div>' +                                                                           // 7602
      '</div>',                                                                                                        // 7603
    compile: compile                                                                                                   // 7604
  };                                                                                                                   // 7605
                                                                                                                       // 7606
  function compile(tElement, tAttrs, transclude) {                                                                     // 7607
    tElement.attr('aria-valuemin', 0);                                                                                 // 7608
    tElement.attr('aria-valuemax', 100);                                                                               // 7609
    tElement.attr('role', 'progressbar');                                                                              // 7610
                                                                                                                       // 7611
    return postLink;                                                                                                   // 7612
  }                                                                                                                    // 7613
  function postLink(scope, element, attr) {                                                                            // 7614
    $mdTheming(element);                                                                                               // 7615
    var bar1Style = element[0].querySelector('.md-bar1').style,                                                        // 7616
      bar2Style = element[0].querySelector('.md-bar2').style,                                                          // 7617
      container = angular.element(element[0].querySelector('.md-container'));                                          // 7618
                                                                                                                       // 7619
    attr.$observe('value', function(value) {                                                                           // 7620
      if (attr.mdMode == 'query') {                                                                                    // 7621
        return;                                                                                                        // 7622
      }                                                                                                                // 7623
                                                                                                                       // 7624
      var clamped = clamp(value);                                                                                      // 7625
      element.attr('aria-valuenow', clamped);                                                                          // 7626
      bar2Style[$mdConstant.CSS.TRANSFORM] = transforms[clamped];                                                      // 7627
    });                                                                                                                // 7628
                                                                                                                       // 7629
    attr.$observe('mdBufferValue', function(value) {                                                                   // 7630
      bar1Style[$mdConstant.CSS.TRANSFORM] = transforms[clamp(value)];                                                 // 7631
    });                                                                                                                // 7632
                                                                                                                       // 7633
    $$rAF(function() {                                                                                                 // 7634
      container.addClass('md-ready');                                                                                  // 7635
    });                                                                                                                // 7636
  }                                                                                                                    // 7637
                                                                                                                       // 7638
  function clamp(value) {                                                                                              // 7639
    if (value > 100) {                                                                                                 // 7640
      return 100;                                                                                                      // 7641
    }                                                                                                                  // 7642
                                                                                                                       // 7643
    if (value < 0) {                                                                                                   // 7644
      return 0;                                                                                                        // 7645
    }                                                                                                                  // 7646
                                                                                                                       // 7647
    return Math.ceil(value || 0);                                                                                      // 7648
  }                                                                                                                    // 7649
}                                                                                                                      // 7650
MdProgressLinearDirective.$inject = ["$$rAF", "$mdConstant", "$mdTheming"];                                            // 7651
                                                                                                                       // 7652
                                                                                                                       // 7653
// **********************************************************                                                          // 7654
// Private Methods                                                                                                     // 7655
// **********************************************************                                                          // 7656
var transforms = (function() {                                                                                         // 7657
  var values = new Array(101);                                                                                         // 7658
  for(var i = 0; i < 101; i++){                                                                                        // 7659
    values[i] = makeTransform(i);                                                                                      // 7660
  }                                                                                                                    // 7661
                                                                                                                       // 7662
  return values;                                                                                                       // 7663
                                                                                                                       // 7664
  function makeTransform(value){                                                                                       // 7665
    var scale = value/100;                                                                                             // 7666
    var translateX = (value-100)/2;                                                                                    // 7667
    return 'translateX(' + translateX.toString() + '%) scale(' + scale.toString() + ', 1)';                            // 7668
  }                                                                                                                    // 7669
})();                                                                                                                  // 7670
                                                                                                                       // 7671
})();                                                                                                                  // 7672
(function(){                                                                                                           // 7673
"use strict";                                                                                                          // 7674
                                                                                                                       // 7675
/**                                                                                                                    // 7676
 * @ngdoc module                                                                                                       // 7677
 * @name material.components.radioButton                                                                               // 7678
 * @description radioButton module!                                                                                    // 7679
 */                                                                                                                    // 7680
angular.module('material.components.radioButton', [                                                                    // 7681
  'material.core'                                                                                                      // 7682
])                                                                                                                     // 7683
  .directive('mdRadioGroup', mdRadioGroupDirective)                                                                    // 7684
  .directive('mdRadioButton', mdRadioButtonDirective);                                                                 // 7685
                                                                                                                       // 7686
/**                                                                                                                    // 7687
 * @ngdoc directive                                                                                                    // 7688
 * @module material.components.radioButton                                                                             // 7689
 * @name mdRadioGroup                                                                                                  // 7690
 *                                                                                                                     // 7691
 * @restrict E                                                                                                         // 7692
 *                                                                                                                     // 7693
 * @description                                                                                                        // 7694
 * The `<md-radio-group>` directive identifies a grouping                                                              // 7695
 * container for the 1..n grouped radio buttons; specified using nested                                                // 7696
 * `<md-radio-button>` tags.                                                                                           // 7697
 *                                                                                                                     // 7698
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 7699
 * the radio button is in the accent color by default. The primary color palette may be used with                      // 7700
 * the `md-primary` class.                                                                                             // 7701
 *                                                                                                                     // 7702
 * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently                                        // 7703
 * than the native `<input type='radio'>` controls. Whereas the native controls                                        // 7704
 * force the user to tab through all the radio buttons, `<md-radio-group>`                                             // 7705
 * is focusable, and by default the `<md-radio-button>`s are not.                                                      // 7706
 *                                                                                                                     // 7707
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 7708
 * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.                          // 7709
 *                                                                                                                     // 7710
 * @usage                                                                                                              // 7711
 * <hljs lang="html">                                                                                                  // 7712
 * <md-radio-group ng-model="selected">                                                                                // 7713
 *                                                                                                                     // 7714
 *   <md-radio-button                                                                                                  // 7715
 *        ng-repeat="d in colorOptions"                                                                                // 7716
 *        ng-value="d.value" aria-label="{{ d.label }}">                                                               // 7717
 *                                                                                                                     // 7718
 *          {{ d.label }}                                                                                              // 7719
 *                                                                                                                     // 7720
 *   </md-radio-button>                                                                                                // 7721
 *                                                                                                                     // 7722
 * </md-radio-group>                                                                                                   // 7723
 * </hljs>                                                                                                             // 7724
 *                                                                                                                     // 7725
 */                                                                                                                    // 7726
function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {                                           // 7727
  RadioGroupController.prototype = createRadioGroupControllerProto();                                                  // 7728
                                                                                                                       // 7729
  return {                                                                                                             // 7730
    restrict: 'E',                                                                                                     // 7731
    controller: ['$element', RadioGroupController],                                                                    // 7732
    require: ['mdRadioGroup', '?ngModel'],                                                                             // 7733
    link: { pre: linkRadioGroup }                                                                                      // 7734
  };                                                                                                                   // 7735
                                                                                                                       // 7736
  function linkRadioGroup(scope, element, attr, ctrls) {                                                               // 7737
    $mdTheming(element);                                                                                               // 7738
    var rgCtrl = ctrls[0];                                                                                             // 7739
    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();                                                               // 7740
                                                                                                                       // 7741
    function setFocus() {                                                                                              // 7742
      if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }                                         // 7743
    }                                                                                                                  // 7744
                                                                                                                       // 7745
    function keydownListener(ev) {                                                                                     // 7746
      var keyCode = ev.which || ev.keyCode;                                                                            // 7747
      switch(keyCode) {                                                                                                // 7748
        case $mdConstant.KEY_CODE.LEFT_ARROW:                                                                          // 7749
        case $mdConstant.KEY_CODE.UP_ARROW:                                                                            // 7750
          ev.preventDefault();                                                                                         // 7751
          rgCtrl.selectPrevious();                                                                                     // 7752
          setFocus();                                                                                                  // 7753
          break;                                                                                                       // 7754
                                                                                                                       // 7755
        case $mdConstant.KEY_CODE.RIGHT_ARROW:                                                                         // 7756
        case $mdConstant.KEY_CODE.DOWN_ARROW:                                                                          // 7757
          ev.preventDefault();                                                                                         // 7758
          rgCtrl.selectNext();                                                                                         // 7759
          setFocus();                                                                                                  // 7760
          break;                                                                                                       // 7761
                                                                                                                       // 7762
        case $mdConstant.KEY_CODE.ENTER:                                                                               // 7763
          var form = angular.element($mdUtil.getClosest(element[0], 'form'));                                          // 7764
          if (form.length > 0) {                                                                                       // 7765
            form.triggerHandler('submit');                                                                             // 7766
          }                                                                                                            // 7767
          break;                                                                                                       // 7768
      }                                                                                                                // 7769
    }                                                                                                                  // 7770
                                                                                                                       // 7771
    rgCtrl.init(ngModelCtrl);                                                                                          // 7772
                                                                                                                       // 7773
    scope.mouseActive = false;                                                                                         // 7774
    element.attr({                                                                                                     // 7775
              'role': 'radiogroup',                                                                                    // 7776
              'tabIndex': element.attr('tabindex') || '0'                                                              // 7777
            })                                                                                                         // 7778
            .on('keydown', keydownListener)                                                                            // 7779
            .on('mousedown', function(event) {                                                                         // 7780
              scope.mouseActive = true;                                                                                // 7781
              $timeout(function() {                                                                                    // 7782
                scope.mouseActive = false;                                                                             // 7783
              }, 100);                                                                                                 // 7784
            })                                                                                                         // 7785
            .on('focus', function() {                                                                                  // 7786
              if(scope.mouseActive === false) { rgCtrl.$element.addClass('md-focused'); }                              // 7787
            })                                                                                                         // 7788
            .on('blur', function() { rgCtrl.$element.removeClass('md-focused'); });                                    // 7789
  }                                                                                                                    // 7790
                                                                                                                       // 7791
  function RadioGroupController($element) {                                                                            // 7792
    this._radioButtonRenderFns = [];                                                                                   // 7793
    this.$element = $element;                                                                                          // 7794
  }                                                                                                                    // 7795
                                                                                                                       // 7796
  function createRadioGroupControllerProto() {                                                                         // 7797
    return {                                                                                                           // 7798
      init: function(ngModelCtrl) {                                                                                    // 7799
        this._ngModelCtrl = ngModelCtrl;                                                                               // 7800
        this._ngModelCtrl.$render = angular.bind(this, this.render);                                                   // 7801
      },                                                                                                               // 7802
      add: function(rbRender) {                                                                                        // 7803
        this._radioButtonRenderFns.push(rbRender);                                                                     // 7804
      },                                                                                                               // 7805
      remove: function(rbRender) {                                                                                     // 7806
        var index = this._radioButtonRenderFns.indexOf(rbRender);                                                      // 7807
        if (index !== -1) {                                                                                            // 7808
          this._radioButtonRenderFns.splice(index, 1);                                                                 // 7809
        }                                                                                                              // 7810
      },                                                                                                               // 7811
      render: function() {                                                                                             // 7812
        this._radioButtonRenderFns.forEach(function(rbRender) {                                                        // 7813
          rbRender();                                                                                                  // 7814
        });                                                                                                            // 7815
      },                                                                                                               // 7816
      setViewValue: function(value, eventType) {                                                                       // 7817
        this._ngModelCtrl.$setViewValue(value, eventType);                                                             // 7818
        // update the other radio buttons as well                                                                      // 7819
        this.render();                                                                                                 // 7820
      },                                                                                                               // 7821
      getViewValue: function() {                                                                                       // 7822
        return this._ngModelCtrl.$viewValue;                                                                           // 7823
      },                                                                                                               // 7824
      selectNext: function() {                                                                                         // 7825
        return changeSelectedButton(this.$element, 1);                                                                 // 7826
      },                                                                                                               // 7827
      selectPrevious: function() {                                                                                     // 7828
        return changeSelectedButton(this.$element, -1);                                                                // 7829
      },                                                                                                               // 7830
      setActiveDescendant: function (radioId) {                                                                        // 7831
        this.$element.attr('aria-activedescendant', radioId);                                                          // 7832
      }                                                                                                                // 7833
    };                                                                                                                 // 7834
  }                                                                                                                    // 7835
  /**                                                                                                                  // 7836
   * Change the radio group's selected button by a given increment.                                                    // 7837
   * If no button is selected, select the first button.                                                                // 7838
   */                                                                                                                  // 7839
  function changeSelectedButton(parent, increment) {                                                                   // 7840
    // Coerce all child radio buttons into an array, then wrap then in an iterator                                     // 7841
    var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);                               // 7842
                                                                                                                       // 7843
    if (buttons.count()) {                                                                                             // 7844
      var validate = function (button) {                                                                               // 7845
        // If disabled, then NOT valid                                                                                 // 7846
        return !angular.element(button).attr("disabled");                                                              // 7847
      };                                                                                                               // 7848
      var selected = parent[0].querySelector('md-radio-button.md-checked');                                            // 7849
      var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();                // 7850
      // Activate radioButton's click listener (triggerHandler won't create a real click event)                        // 7851
      angular.element(target).triggerHandler('click');                                                                 // 7852
                                                                                                                       // 7853
                                                                                                                       // 7854
    }                                                                                                                  // 7855
  }                                                                                                                    // 7856
                                                                                                                       // 7857
}                                                                                                                      // 7858
mdRadioGroupDirective.$inject = ["$mdUtil", "$mdConstant", "$mdTheming", "$timeout"];                                  // 7859
                                                                                                                       // 7860
/**                                                                                                                    // 7861
 * @ngdoc directive                                                                                                    // 7862
 * @module material.components.radioButton                                                                             // 7863
 * @name mdRadioButton                                                                                                 // 7864
 *                                                                                                                     // 7865
 * @restrict E                                                                                                         // 7866
 *                                                                                                                     // 7867
 * @description                                                                                                        // 7868
 * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.     // 7869
 *                                                                                                                     // 7870
 * While similar to the `<input type="radio" ng-model="" value="">` directive,                                         // 7871
 * the `<md-radio-button>` directive provides ink effects, ARIA support, and                                           // 7872
 * supports use within named radio groups.                                                                             // 7873
 *                                                                                                                     // 7874
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 7875
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 7876
 *    interaction with the input element.                                                                              // 7877
 * @param {string} ngValue Angular expression which sets the value to which the expression should                      // 7878
 *    be set when selected.*                                                                                           // 7879
 * @param {string} value The value to which the expression should be set when selected.                                // 7880
 * @param {string=} name Property name of the form under which the control is published.                               // 7881
 * @param {string=} aria-label Adds label to radio button for accessibility.                                           // 7882
 * Defaults to radio button's text. If no text content is available, a warning will be logged.                         // 7883
 *                                                                                                                     // 7884
 * @usage                                                                                                              // 7885
 * <hljs lang="html">                                                                                                  // 7886
 *                                                                                                                     // 7887
 * <md-radio-button value="1" aria-label="Label 1">                                                                    // 7888
 *   Label 1                                                                                                           // 7889
 * </md-radio-button>                                                                                                  // 7890
 *                                                                                                                     // 7891
 * <md-radio-button ng-model="color" ng-value="specialValue" aria-label="Green">                                       // 7892
 *   Green                                                                                                             // 7893
 * </md-radio-button>                                                                                                  // 7894
 *                                                                                                                     // 7895
 * </hljs>                                                                                                             // 7896
 *                                                                                                                     // 7897
 */                                                                                                                    // 7898
function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {                                                        // 7899
                                                                                                                       // 7900
  var CHECKED_CSS = 'md-checked';                                                                                      // 7901
                                                                                                                       // 7902
  return {                                                                                                             // 7903
    restrict: 'E',                                                                                                     // 7904
    require: '^mdRadioGroup',                                                                                          // 7905
    transclude: true,                                                                                                  // 7906
    template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +                                      // 7907
                '<div class="md-off"></div>' +                                                                         // 7908
                '<div class="md-on"></div>' +                                                                          // 7909
              '</div>' +                                                                                               // 7910
              '<div ng-transclude class="md-label"></div>',                                                            // 7911
    link: link                                                                                                         // 7912
  };                                                                                                                   // 7913
                                                                                                                       // 7914
  function link(scope, element, attr, rgCtrl) {                                                                        // 7915
    var lastChecked;                                                                                                   // 7916
                                                                                                                       // 7917
    $mdTheming(element);                                                                                               // 7918
    configureAria(element, scope);                                                                                     // 7919
                                                                                                                       // 7920
    rgCtrl.add(render);                                                                                                // 7921
    attr.$observe('value', render);                                                                                    // 7922
                                                                                                                       // 7923
    element                                                                                                            // 7924
      .on('click', listener)                                                                                           // 7925
      .on('$destroy', function() {                                                                                     // 7926
        rgCtrl.remove(render);                                                                                         // 7927
      });                                                                                                              // 7928
                                                                                                                       // 7929
    function listener(ev) {                                                                                            // 7930
      if (element[0].hasAttribute('disabled')) return;                                                                 // 7931
                                                                                                                       // 7932
      scope.$apply(function() {                                                                                        // 7933
        rgCtrl.setViewValue(attr.value, ev && ev.type);                                                                // 7934
      });                                                                                                              // 7935
    }                                                                                                                  // 7936
                                                                                                                       // 7937
    function render() {                                                                                                // 7938
      var checked = (rgCtrl.getViewValue() == attr.value);                                                             // 7939
      if (checked === lastChecked) {                                                                                   // 7940
        return;                                                                                                        // 7941
      }                                                                                                                // 7942
      lastChecked = checked;                                                                                           // 7943
      element.attr('aria-checked', checked);                                                                           // 7944
      if (checked) {                                                                                                   // 7945
        element.addClass(CHECKED_CSS);                                                                                 // 7946
        rgCtrl.setActiveDescendant(element.attr('id'));                                                                // 7947
      } else {                                                                                                         // 7948
        element.removeClass(CHECKED_CSS);                                                                              // 7949
      }                                                                                                                // 7950
    }                                                                                                                  // 7951
    /**                                                                                                                // 7952
     * Inject ARIA-specific attributes appropriate for each radio button                                               // 7953
     */                                                                                                                // 7954
    function configureAria( element, scope ){                                                                          // 7955
      scope.ariaId = buildAriaID();                                                                                    // 7956
                                                                                                                       // 7957
      element.attr({                                                                                                   // 7958
        'id' :  scope.ariaId,                                                                                          // 7959
        'role' : 'radio',                                                                                              // 7960
        'aria-checked' : 'false'                                                                                       // 7961
      });                                                                                                              // 7962
                                                                                                                       // 7963
      $mdAria.expectWithText(element, 'aria-label');                                                                   // 7964
                                                                                                                       // 7965
      /**                                                                                                              // 7966
       * Build a unique ID for each radio button that will be used with aria-activedescendant.                         // 7967
       * Preserve existing ID if already specified.                                                                    // 7968
       * @returns {*|string}                                                                                           // 7969
       */                                                                                                              // 7970
      function buildAriaID() {                                                                                         // 7971
        return attr.id || ( 'radio' + "_" + $mdUtil.nextUid() );                                                       // 7972
      }                                                                                                                // 7973
    }                                                                                                                  // 7974
  }                                                                                                                    // 7975
}                                                                                                                      // 7976
mdRadioButtonDirective.$inject = ["$mdAria", "$mdUtil", "$mdTheming"];                                                 // 7977
                                                                                                                       // 7978
})();                                                                                                                  // 7979
(function(){                                                                                                           // 7980
"use strict";                                                                                                          // 7981
                                                                                                                       // 7982
/**                                                                                                                    // 7983
 * @ngdoc module                                                                                                       // 7984
 * @name material.components.select                                                                                    // 7985
 */                                                                                                                    // 7986
                                                                                                                       // 7987
/***************************************************                                                                   // 7988
                                                                                                                       // 7989
### TODO ###                                                                                                           // 7990
**DOCUMENTATION AND DEMOS**                                                                                            // 7991
                                                                                                                       // 7992
- [ ] ng-model with child mdOptions (basic)                                                                            // 7993
- [ ] ng-model="foo" ng-model-options="{ trackBy: '$value.id' }" for objects                                           // 7994
- [ ] mdOption with value                                                                                              // 7995
- [ ] Usage with input inside                                                                                          // 7996
                                                                                                                       // 7997
### TODO - POST RC1 ###                                                                                                // 7998
- [ ] Abstract placement logic in $mdSelect service to $mdMenu service                                                 // 7999
                                                                                                                       // 8000
***************************************************/                                                                   // 8001
                                                                                                                       // 8002
var SELECT_EDGE_MARGIN = 8;                                                                                            // 8003
var selectNextId = 0;                                                                                                  // 8004
                                                                                                                       // 8005
angular.module('material.components.select', [                                                                         // 8006
  'material.core',                                                                                                     // 8007
  'material.components.backdrop'                                                                                       // 8008
])                                                                                                                     // 8009
.directive('mdSelect', SelectDirective)                                                                                // 8010
.directive('mdSelectMenu', SelectMenuDirective)                                                                        // 8011
.directive('mdOption', OptionDirective)                                                                                // 8012
.directive('mdOptgroup', OptgroupDirective)                                                                            // 8013
.provider('$mdSelect', SelectProvider);                                                                                // 8014
                                                                                                                       // 8015
                                                                                                                       // 8016
/**                                                                                                                    // 8017
 * @ngdoc directive                                                                                                    // 8018
 * @name mdSelect                                                                                                      // 8019
 * @restrict E                                                                                                         // 8020
 * @module material.components.select                                                                                  // 8021
 *                                                                                                                     // 8022
 * @description Displays a select box, bound to an ng-model.                                                           // 8023
 *                                                                                                                     // 8024
 * @param {expression} ng-model The model!                                                                             // 8025
 * @param {boolean=} multiple Whether it's multiple.                                                                   // 8026
 * @param {string=} placeholder Placeholder hint text.                                                                 // 8027
 * @param {string=} aria-label Optional label for accessibility. Only necessary if no placeholder or                   // 8028
 * explicit label is present.                                                                                          // 8029
 *                                                                                                                     // 8030
 * @usage                                                                                                              // 8031
 * With a placeholder (label and aria-label are added dynamically)                                                     // 8032
 * <hljs lang="html">                                                                                                  // 8033
 *   <md-select                                                                                                        // 8034
 *     ng-model="someModel"                                                                                            // 8035
 *     placeholder="Select a state">                                                                                   // 8036
 *     <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>                               // 8037
 *   </md-select>                                                                                                      // 8038
 * </hljs>                                                                                                             // 8039
 *                                                                                                                     // 8040
 * With an explicit label                                                                                              // 8041
 * <hljs lang="html">                                                                                                  // 8042
 *   <md-select                                                                                                        // 8043
 *     ng-model="someModel">                                                                                           // 8044
 *     <md-select-label>Select a state</md-select-label>                                                               // 8045
 *     <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>                               // 8046
 *   </md-select>                                                                                                      // 8047
 * </hljs>                                                                                                             // 8048
 */                                                                                                                    // 8049
function SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $interpolate, $compile, $parse) {                    // 8050
  return {                                                                                                             // 8051
    restrict: 'E',                                                                                                     // 8052
    require: ['mdSelect', 'ngModel', '?^form'],                                                                        // 8053
    compile: compile,                                                                                                  // 8054
    controller: function() { } // empty placeholder controller to be initialized in link                               // 8055
  };                                                                                                                   // 8056
                                                                                                                       // 8057
  function compile(element, attr) {                                                                                    // 8058
    // The user is allowed to provide a label for the select as md-select-label child                                  // 8059
    var labelEl = element.find('md-select-label').remove();                                                            // 8060
                                                                                                                       // 8061
    // If not provided, we automatically make one                                                                      // 8062
    if (!labelEl.length) {                                                                                             // 8063
      labelEl = angular.element('<md-select-label><span></span></md-select-label>');                                   // 8064
    } else {                                                                                                           // 8065
      if (!labelEl[0].firstElementChild) {                                                                             // 8066
        var spanWrapper = angular.element('<span>');                                                                   // 8067
        spanWrapper.append(labelEl.contents());                                                                        // 8068
        labelEl.append(spanWrapper);                                                                                   // 8069
      }                                                                                                                // 8070
    }                                                                                                                  // 8071
    labelEl.append('<span class="md-select-icon" aria-hidden="true"></span>');                                         // 8072
    labelEl.addClass('md-select-label');                                                                               // 8073
    if (!labelEl[0].hasAttribute('id')) {                                                                              // 8074
      labelEl.attr('id', 'select_label_' + $mdUtil.nextUid());                                                         // 8075
    }                                                                                                                  // 8076
                                                                                                                       // 8077
    // There's got to be an md-content inside. If there's not one, let's add it.                                       // 8078
    if (!element.find('md-content').length) {                                                                          // 8079
      element.append( angular.element('<md-content>').append(element.contents()) );                                    // 8080
    }                                                                                                                  // 8081
                                                                                                                       // 8082
    // Add progress spinner for md-options-loading                                                                     // 8083
    if (attr.mdOnOpen) {                                                                                               // 8084
      element.find('md-content').prepend(                                                                              // 8085
        angular.element('<md-progress-circular>')                                                                      // 8086
               .attr('md-mode', 'indeterminate')                                                                       // 8087
               .attr('ng-hide', '$$loadingAsyncDone')                                                                  // 8088
               .wrap('<div>')                                                                                          // 8089
               .parent()                                                                                               // 8090
      );                                                                                                               // 8091
    }                                                                                                                  // 8092
                                                                                                                       // 8093
    if (attr.name) {                                                                                                   // 8094
      var autofillClone = angular.element('<select class="md-visually-hidden">');                                      // 8095
      autofillClone.attr({                                                                                             // 8096
        'name': '.' + attr.name,                                                                                       // 8097
        'ng-model': attr.ngModel,                                                                                      // 8098
        'aria-hidden': 'true',                                                                                         // 8099
        'tabindex': '-1'                                                                                               // 8100
      });                                                                                                              // 8101
      var opts = element.find('md-option');                                                                            // 8102
      angular.forEach(opts, function(el) {                                                                             // 8103
        var newEl = angular.element('<option>' + el.innerHTML + '</option>');                                          // 8104
        if (el.hasAttribute('ng-value')) newEl.attr('ng-value', el.getAttribute('ng-value'));                          // 8105
        else if (el.hasAttribute('value')) newEl.attr('value', el.getAttribute('value'));                              // 8106
        autofillClone.append(newEl);                                                                                   // 8107
      });                                                                                                              // 8108
                                                                                                                       // 8109
      element.parent().append(autofillClone);                                                                          // 8110
    }                                                                                                                  // 8111
                                                                                                                       // 8112
    // Use everything that's left inside element.contents() as the contents of the menu                                // 8113
    var selectTemplate = '<div class="md-select-menu-container">' +                                                    // 8114
        '<md-select-menu ' +                                                                                           // 8115
        (angular.isDefined(attr.multiple) ? 'multiple' : '') + '>' +                                                   // 8116
          element.html() +                                                                                             // 8117
        '</md-select-menu></div>';                                                                                     // 8118
                                                                                                                       // 8119
    element.empty().append(labelEl);                                                                                   // 8120
                                                                                                                       // 8121
    attr.tabindex = attr.tabindex || '0';                                                                              // 8122
                                                                                                                       // 8123
    return function postLink(scope, element, attr, ctrls) {                                                            // 8124
      var isOpen;                                                                                                      // 8125
      var isDisabled;                                                                                                  // 8126
                                                                                                                       // 8127
      var mdSelectCtrl = ctrls[0];                                                                                     // 8128
      var ngModel = ctrls[1];                                                                                          // 8129
      var formCtrl = ctrls[2];                                                                                         // 8130
                                                                                                                       // 8131
      var labelEl = element.find('md-select-label');                                                                   // 8132
      var customLabel = labelEl.text().length !== 0;                                                                   // 8133
      var selectContainer, selectScope, selectMenuCtrl;                                                                // 8134
      createSelect();                                                                                                  // 8135
                                                                                                                       // 8136
      $mdTheming(element);                                                                                             // 8137
                                                                                                                       // 8138
      if (attr.name && formCtrl) {                                                                                     // 8139
        var selectEl = element.parent()[0].querySelector('select[name=".' + attr.name + '"]')                          // 8140
        formCtrl.$removeControl(angular.element(selectEl).controller());                                               // 8141
      }                                                                                                                // 8142
                                                                                                                       // 8143
      var originalRender = ngModel.$render;                                                                            // 8144
      ngModel.$render = function() {                                                                                   // 8145
        originalRender();                                                                                              // 8146
        syncLabelText();                                                                                               // 8147
      };                                                                                                               // 8148
                                                                                                                       // 8149
      mdSelectCtrl.setLabelText = function(text) {                                                                     // 8150
        if (customLabel) return; // Assume that user is handling it on their own                                       // 8151
        mdSelectCtrl.setIsPlaceholder(!text);                                                                          // 8152
        text = text || attr.placeholder || '';                                                                         // 8153
        var target = customLabel ? labelEl : labelEl.children().eq(0);                                                 // 8154
        target.text(text);                                                                                             // 8155
      };                                                                                                               // 8156
                                                                                                                       // 8157
      mdSelectCtrl.setIsPlaceholder = function(val) {                                                                  // 8158
        val ? labelEl.addClass('md-placeholder') : labelEl.removeClass('md-placeholder');                              // 8159
      };                                                                                                               // 8160
                                                                                                                       // 8161
      scope.$$postDigest(function() {                                                                                  // 8162
        setAriaLabel();                                                                                                // 8163
        syncLabelText();                                                                                               // 8164
      });                                                                                                              // 8165
                                                                                                                       // 8166
      function setAriaLabel() {                                                                                        // 8167
        var labelText = element.attr('placeholder');                                                                   // 8168
        if (!labelText) {                                                                                              // 8169
          labelText = element.find('md-select-label').text();                                                          // 8170
        }                                                                                                              // 8171
        $mdAria.expect(element, 'aria-label', labelText);                                                              // 8172
      }                                                                                                                // 8173
                                                                                                                       // 8174
      function syncLabelText() {                                                                                       // 8175
        if (selectContainer) {                                                                                         // 8176
          selectMenuCtrl = selectMenuCtrl || selectContainer.find('md-select-menu').controller('mdSelectMenu');        // 8177
          mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());                                                  // 8178
        }                                                                                                              // 8179
      }                                                                                                                // 8180
                                                                                                                       // 8181
      var deregisterWatcher;                                                                                           // 8182
      attr.$observe('ngMultiple', function(val) {                                                                      // 8183
        if (deregisterWatcher) deregisterWatcher();                                                                    // 8184
        var parser = $parse(val);                                                                                      // 8185
        deregisterWatcher = scope.$watch(function() { return parser(scope); }, function(multiple, prevVal) {           // 8186
          if (multiple === undefined && prevVal === undefined) return; // assume compiler did a good job               // 8187
          if (multiple) {                                                                                              // 8188
            element.attr('multiple', 'multiple');                                                                      // 8189
          } else {                                                                                                     // 8190
            element.removeAttr('multiple');                                                                            // 8191
          }                                                                                                            // 8192
          if (selectContainer) {                                                                                       // 8193
            selectMenuCtrl.setMultiple(multiple);                                                                      // 8194
            originalRender = ngModel.$render;                                                                          // 8195
            ngModel.$render = function() {                                                                             // 8196
              originalRender();                                                                                        // 8197
              syncLabelText();                                                                                         // 8198
            };                                                                                                         // 8199
            selectMenuCtrl.refreshViewValue();                                                                         // 8200
            ngModel.$render();                                                                                         // 8201
          }                                                                                                            // 8202
        });                                                                                                            // 8203
      });                                                                                                              // 8204
                                                                                                                       // 8205
      attr.$observe('disabled', function(disabled) {                                                                   // 8206
        if (typeof disabled == "string") {                                                                             // 8207
          disabled = true;                                                                                             // 8208
        }                                                                                                              // 8209
        // Prevent click event being registered twice                                                                  // 8210
        if (isDisabled !== undefined && isDisabled === disabled) {                                                     // 8211
          return;                                                                                                      // 8212
        }                                                                                                              // 8213
        isDisabled = disabled;                                                                                         // 8214
        if (disabled) {                                                                                                // 8215
          element.attr({'tabindex': -1, 'aria-disabled': 'true'});                                                     // 8216
          element.off('click', openSelect);                                                                            // 8217
          element.off('keydown', handleKeypress);                                                                      // 8218
        } else {                                                                                                       // 8219
          element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});                                         // 8220
          element.on('click', openSelect);                                                                             // 8221
          element.on('keydown', handleKeypress);                                                                       // 8222
        }                                                                                                              // 8223
      });                                                                                                              // 8224
      if (!attr.disabled && !attr.ngDisabled) {                                                                        // 8225
        element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});                                           // 8226
        element.on('click', openSelect);                                                                               // 8227
        element.on('keydown', handleKeypress);                                                                         // 8228
      }                                                                                                                // 8229
                                                                                                                       // 8230
      var ariaAttrs = {                                                                                                // 8231
        role: 'combobox',                                                                                              // 8232
        'aria-expanded': 'false'                                                                                       // 8233
      };                                                                                                               // 8234
      if (!element[0].hasAttribute('id')) {                                                                            // 8235
        ariaAttrs.id = 'select_' + $mdUtil.nextUid();                                                                  // 8236
      }                                                                                                                // 8237
      element.attr(ariaAttrs);                                                                                         // 8238
                                                                                                                       // 8239
      scope.$on('$destroy', function() {                                                                               // 8240
        if (isOpen) {                                                                                                  // 8241
          $mdSelect.cancel().then(function() {                                                                         // 8242
            selectContainer.remove();                                                                                  // 8243
          });                                                                                                          // 8244
        } else {                                                                                                       // 8245
          selectContainer.remove();                                                                                    // 8246
        }                                                                                                              // 8247
      });                                                                                                              // 8248
                                                                                                                       // 8249
                                                                                                                       // 8250
      // Create a fake select to find out the label value                                                              // 8251
      function createSelect() {                                                                                        // 8252
        selectContainer = angular.element(selectTemplate);                                                             // 8253
        var selectEl = selectContainer.find('md-select-menu');                                                         // 8254
        selectEl.data('$ngModelController', ngModel);                                                                  // 8255
        selectEl.data('$mdSelectController', mdSelectCtrl);                                                            // 8256
        selectScope = scope.$new();                                                                                    // 8257
        selectContainer = $compile(selectContainer)(selectScope);                                                      // 8258
        selectMenuCtrl = selectContainer.find('md-select-menu').controller('mdSelectMenu');                            // 8259
      }                                                                                                                // 8260
                                                                                                                       // 8261
      function handleKeypress(e) {                                                                                     // 8262
        var allowedCodes = [32, 13, 38, 40];                                                                           // 8263
        if (allowedCodes.indexOf(e.keyCode) != -1 ) {                                                                  // 8264
          // prevent page scrolling on interaction                                                                     // 8265
          e.preventDefault();                                                                                          // 8266
          openSelect(e);                                                                                               // 8267
        } else {                                                                                                       // 8268
          if (e.keyCode <= 90 && e.keyCode >= 31) {                                                                    // 8269
            e.preventDefault();                                                                                        // 8270
            var node = selectMenuCtrl.optNodeForKeyboardSearch(e);                                                     // 8271
            if (!node) return;                                                                                         // 8272
            var optionCtrl = angular.element(node).controller('mdOption');                                             // 8273
            if (!selectMenuCtrl.isMultiple) {                                                                          // 8274
              selectMenuCtrl.deselect( Object.keys(selectMenuCtrl.selected)[0] );                                      // 8275
            }                                                                                                          // 8276
            selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);                                               // 8277
            selectMenuCtrl.refreshViewValue();                                                                         // 8278
            ngModel.$render();                                                                                         // 8279
          }                                                                                                            // 8280
        }                                                                                                              // 8281
      }                                                                                                                // 8282
                                                                                                                       // 8283
      function openSelect() {                                                                                          // 8284
        scope.$evalAsync(function() {                                                                                  // 8285
          isOpen = true;                                                                                               // 8286
          $mdSelect.show({                                                                                             // 8287
            scope: selectScope,                                                                                        // 8288
            preserveScope: true,                                                                                       // 8289
            skipCompile: true,                                                                                         // 8290
            element: selectContainer,                                                                                  // 8291
            target: element[0],                                                                                        // 8292
            hasBackdrop: true,                                                                                         // 8293
            loadingAsync: attr.mdOnOpen ? scope.$eval(attr.mdOnOpen) || true : false,                                  // 8294
          }).then(function(selectedText) {                                                                             // 8295
            isOpen = false;                                                                                            // 8296
          });                                                                                                          // 8297
        });                                                                                                            // 8298
      }                                                                                                                // 8299
    };                                                                                                                 // 8300
  }                                                                                                                    // 8301
}                                                                                                                      // 8302
SelectDirective.$inject = ["$mdSelect", "$mdUtil", "$mdTheming", "$mdAria", "$interpolate", "$compile", "$parse"];     // 8303
                                                                                                                       // 8304
function SelectMenuDirective($parse, $mdUtil, $mdTheming) {                                                            // 8305
                                                                                                                       // 8306
  SelectMenuController.$inject = ["$scope", "$attrs", "$element"];                                                     // 8307
  return {                                                                                                             // 8308
    restrict: 'E',                                                                                                     // 8309
    require: ['mdSelectMenu', '?ngModel'],                                                                             // 8310
    controller: SelectMenuController,                                                                                  // 8311
    link: { pre: preLink }                                                                                             // 8312
  };                                                                                                                   // 8313
                                                                                                                       // 8314
  // We use preLink instead of postLink to ensure that the select is initialized before                                // 8315
  // its child options run postLink.                                                                                   // 8316
  function preLink(scope, element, attr, ctrls) {                                                                      // 8317
    var selectCtrl = ctrls[0];                                                                                         // 8318
    var ngModel = ctrls[1];                                                                                            // 8319
                                                                                                                       // 8320
    $mdTheming(element);                                                                                               // 8321
    element.on('click', clickListener);                                                                                // 8322
    element.on('keypress', keyListener);                                                                               // 8323
    if (ngModel) selectCtrl.init(ngModel);                                                                             // 8324
    configureAria();                                                                                                   // 8325
                                                                                                                       // 8326
    function configureAria() {                                                                                         // 8327
      element.attr({                                                                                                   // 8328
        'id': 'select_menu_' + $mdUtil.nextUid(),                                                                      // 8329
        'role': 'listbox',                                                                                             // 8330
        'aria-multiselectable': (selectCtrl.isMultiple ? 'true' : 'false')                                             // 8331
      });                                                                                                              // 8332
    }                                                                                                                  // 8333
                                                                                                                       // 8334
    function keyListener(e) {                                                                                          // 8335
      if (e.keyCode == 13 || e.keyCode == 32) {                                                                        // 8336
        clickListener(e);                                                                                              // 8337
      }                                                                                                                // 8338
    }                                                                                                                  // 8339
                                                                                                                       // 8340
    function clickListener(ev) {                                                                                       // 8341
      var option = $mdUtil.getClosest(ev.target, 'md-option');                                                         // 8342
      var optionCtrl = option && angular.element(option).data('$mdOptionController');                                  // 8343
      if (!option || !optionCtrl) return;                                                                              // 8344
                                                                                                                       // 8345
      var optionHashKey = selectCtrl.hashGetter(optionCtrl.value);                                                     // 8346
      var isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);                                          // 8347
                                                                                                                       // 8348
      scope.$apply(function() {                                                                                        // 8349
        if (selectCtrl.isMultiple) {                                                                                   // 8350
          if (isSelected) {                                                                                            // 8351
            selectCtrl.deselect(optionHashKey);                                                                        // 8352
          } else {                                                                                                     // 8353
            selectCtrl.select(optionHashKey, optionCtrl.value);                                                        // 8354
          }                                                                                                            // 8355
        } else {                                                                                                       // 8356
          if (!isSelected) {                                                                                           // 8357
            selectCtrl.deselect( Object.keys(selectCtrl.selected)[0] );                                                // 8358
            selectCtrl.select( optionHashKey, optionCtrl.value );                                                      // 8359
          }                                                                                                            // 8360
        }                                                                                                              // 8361
        selectCtrl.refreshViewValue();                                                                                 // 8362
      });                                                                                                              // 8363
    }                                                                                                                  // 8364
  }                                                                                                                    // 8365
                                                                                                                       // 8366
                                                                                                                       // 8367
                                                                                                                       // 8368
  function SelectMenuController($scope, $attrs, $element) {                                                            // 8369
    var self = this;                                                                                                   // 8370
    self.isMultiple = angular.isDefined($attrs.multiple);                                                              // 8371
    // selected is an object with keys matching all of the selected options' hashed values                             // 8372
    self.selected = {};                                                                                                // 8373
    // options is an object with keys matching every option's hash value,                                              // 8374
    // and values matching every option's controller.                                                                  // 8375
    self.options = {};                                                                                                 // 8376
                                                                                                                       // 8377
    $scope.$watch(function() { return self.options; }, function() {                                                    // 8378
      self.ngModel.$render();                                                                                          // 8379
    }, true);                                                                                                          // 8380
                                                                                                                       // 8381
    var deregisterCollectionWatch;                                                                                     // 8382
    self.setMultiple = function(isMultiple) {                                                                          // 8383
      var ngModel = self.ngModel;                                                                                      // 8384
      self.isMultiple = isMultiple;                                                                                    // 8385
      if (deregisterCollectionWatch) deregisterCollectionWatch();                                                      // 8386
                                                                                                                       // 8387
      if (self.isMultiple) {                                                                                           // 8388
        ngModel.$validators['md-multiple'] = validateArray;                                                            // 8389
        ngModel.$render = renderMultiple;                                                                              // 8390
                                                                                                                       // 8391
        // watchCollection on the model because by default ngModel only watches the model's                            // 8392
        // reference. This allowed the developer to also push and pop from their array.                                // 8393
        $scope.$watchCollection($attrs.ngModel, function(value) {                                                      // 8394
          if (validateArray(value)) renderMultiple(value);                                                             // 8395
        });                                                                                                            // 8396
      } else {                                                                                                         // 8397
        delete ngModel.$validators['md-multiple'];                                                                     // 8398
        ngModel.$render = renderSingular;                                                                              // 8399
      }                                                                                                                // 8400
                                                                                                                       // 8401
      function validateArray(modelValue, viewValue) {                                                                  // 8402
        // If a value is truthy but not an array, reject it.                                                           // 8403
        // If value is undefined/falsy, accept that it's an empty array.                                               // 8404
        return angular.isArray(modelValue || viewValue || []);                                                         // 8405
      }                                                                                                                // 8406
    };                                                                                                                 // 8407
                                                                                                                       // 8408
    var searchStr = '';                                                                                                // 8409
    var clearSearchTimeout, optNodes, optText;                                                                         // 8410
    var CLEAR_SEARCH_AFTER = 300;                                                                                      // 8411
    self.optNodeForKeyboardSearch = function(e) {                                                                      // 8412
      clearSearchTimeout && clearTimeout(clearSearchTimeout);                                                          // 8413
      clearSearchTimeout = setTimeout(function() {                                                                     // 8414
        clearSearchTimeout = undefined;                                                                                // 8415
        searchStr = '';                                                                                                // 8416
        optText = undefined;                                                                                           // 8417
        optNodes = undefined;                                                                                          // 8418
      }, CLEAR_SEARCH_AFTER);                                                                                          // 8419
      searchStr += String.fromCharCode(e.keyCode);                                                                     // 8420
      var search = new RegExp('^' + searchStr, 'i');                                                                   // 8421
      if (!optNodes) {                                                                                                 // 8422
        optNodes = $element.find('md-option');                                                                         // 8423
        optText = new Array(optNodes.length);                                                                          // 8424
        angular.forEach(optNodes, function(el, i) {                                                                    // 8425
          optText[i] = el.textContent.trim();                                                                          // 8426
        });                                                                                                            // 8427
      }                                                                                                                // 8428
      for (var i = 0; i < optText.length; ++i) {                                                                       // 8429
        if (search.test(optText[i])) {                                                                                 // 8430
          return optNodes[i];                                                                                          // 8431
        }                                                                                                              // 8432
      }                                                                                                                // 8433
    };                                                                                                                 // 8434
                                                                                                                       // 8435
                                                                                                                       // 8436
    self.init = function(ngModel) {                                                                                    // 8437
      self.ngModel = ngModel;                                                                                          // 8438
                                                                                                                       // 8439
      // Allow users to provide `ng-model="foo" ng-model-options="{trackBy: 'foo.id'}"` so                             // 8440
      // that we can properly compare objects set on the model to the available options                                // 8441
      if (ngModel.$options && ngModel.$options.trackBy) {                                                              // 8442
        var trackByLocals = {};                                                                                        // 8443
        var trackByParsed = $parse(ngModel.$options.trackBy);                                                          // 8444
        self.hashGetter = function(value, valueScope) {                                                                // 8445
          trackByLocals.$value = value;                                                                                // 8446
          return trackByParsed(valueScope || $scope, trackByLocals);                                                   // 8447
        };                                                                                                             // 8448
      // If the user doesn't provide a trackBy, we automatically generate an id for every                              // 8449
      // value passed in                                                                                               // 8450
      } else {                                                                                                         // 8451
        self.hashGetter = function getHashValue(value) {                                                               // 8452
          if (angular.isObject(value)) {                                                                               // 8453
            return 'object_' + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId));                          // 8454
          }                                                                                                            // 8455
          return value;                                                                                                // 8456
        };                                                                                                             // 8457
      }                                                                                                                // 8458
      self.setMultiple(self.isMultiple);                                                                               // 8459
    };                                                                                                                 // 8460
                                                                                                                       // 8461
    self.selectedLabels = function() {                                                                                 // 8462
      var selectedOptionEls = nodesToArray($element[0].querySelectorAll('md-option[selected]'));                       // 8463
      if (selectedOptionEls.length) {                                                                                  // 8464
        return selectedOptionEls.map(function(el) { return el.textContent; }).join(', ');                              // 8465
      } else {                                                                                                         // 8466
        return '';                                                                                                     // 8467
      }                                                                                                                // 8468
    };                                                                                                                 // 8469
                                                                                                                       // 8470
    self.select = function(hashKey, hashedValue) {                                                                     // 8471
      var option = self.options[hashKey];                                                                              // 8472
      option && option.setSelected(true);                                                                              // 8473
      self.selected[hashKey] = hashedValue;                                                                            // 8474
    };                                                                                                                 // 8475
    self.deselect = function(hashKey) {                                                                                // 8476
      var option = self.options[hashKey];                                                                              // 8477
      option && option.setSelected(false);                                                                             // 8478
      delete self.selected[hashKey];                                                                                   // 8479
    };                                                                                                                 // 8480
                                                                                                                       // 8481
    self.addOption = function(hashKey, optionCtrl) {                                                                   // 8482
      if (angular.isDefined(self.options[hashKey])) {                                                                  // 8483
        throw new Error('Duplicate md-option values are not allowed in a select. ' +                                   // 8484
                        'Duplicate value "' + optionCtrl.value + '" found.');                                          // 8485
      }                                                                                                                // 8486
      self.options[hashKey] = optionCtrl;                                                                              // 8487
                                                                                                                       // 8488
      // If this option's value was already in our ngModel, go ahead and select it.                                    // 8489
      if (angular.isDefined(self.selected[hashKey])) {                                                                 // 8490
        self.select(hashKey, optionCtrl.value);                                                                        // 8491
        self.refreshViewValue();                                                                                       // 8492
      }                                                                                                                // 8493
    };                                                                                                                 // 8494
    self.removeOption = function(hashKey) {                                                                            // 8495
      delete self.options[hashKey];                                                                                    // 8496
      // Don't deselect an option when it's removed - the user's ngModel should be allowed                             // 8497
      // to have values that do not match a currently available option.                                                // 8498
    };                                                                                                                 // 8499
                                                                                                                       // 8500
    self.refreshViewValue = function() {                                                                               // 8501
      var values = [];                                                                                                 // 8502
      var option;                                                                                                      // 8503
      for (var hashKey in self.selected) {                                                                             // 8504
         // If this hashKey has an associated option, push that option's value to the model.                           // 8505
         if ((option = self.options[hashKey])) {                                                                       // 8506
           values.push(option.value);                                                                                  // 8507
         } else {                                                                                                      // 8508
           // Otherwise, the given hashKey has no associated option, and we got it                                     // 8509
           // from an ngModel value at an earlier time. Push the unhashed value of                                     // 8510
           // this hashKey to the model.                                                                               // 8511
           // This allows the developer to put a value in the model that doesn't yet have                              // 8512
           // an associated option.                                                                                    // 8513
           values.push(self.selected[hashKey]);                                                                        // 8514
         }                                                                                                             // 8515
      }                                                                                                                // 8516
      self.ngModel.$setViewValue(self.isMultiple ? values : values[0]);                                                // 8517
    };                                                                                                                 // 8518
                                                                                                                       // 8519
    function renderMultiple() {                                                                                        // 8520
      var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue;                                     // 8521
      if (!angular.isArray(newSelectedValues)) return;                                                                 // 8522
                                                                                                                       // 8523
      var oldSelected = Object.keys(self.selected);                                                                    // 8524
                                                                                                                       // 8525
      var newSelectedHashes = newSelectedValues.map(self.hashGetter);                                                  // 8526
      var deselected = oldSelected.filter(function(hash) {                                                             // 8527
        return newSelectedHashes.indexOf(hash) === -1;                                                                 // 8528
      });                                                                                                              // 8529
                                                                                                                       // 8530
      deselected.forEach(self.deselect);                                                                               // 8531
      newSelectedHashes.forEach(function(hashKey, i) {                                                                 // 8532
        self.select(hashKey, newSelectedValues[i]);                                                                    // 8533
      });                                                                                                              // 8534
    }                                                                                                                  // 8535
    function renderSingular() {                                                                                        // 8536
      var value = self.ngModel.$viewValue || self.ngModel.$modelValue;                                                 // 8537
      Object.keys(self.selected).forEach(self.deselect);                                                               // 8538
      self.select( self.hashGetter(value), value );                                                                    // 8539
    }                                                                                                                  // 8540
  }                                                                                                                    // 8541
                                                                                                                       // 8542
}                                                                                                                      // 8543
SelectMenuDirective.$inject = ["$parse", "$mdUtil", "$mdTheming"];                                                     // 8544
                                                                                                                       // 8545
function OptionDirective($mdButtonInkRipple, $mdUtil) {                                                                // 8546
                                                                                                                       // 8547
  OptionController.$inject = ["$element"];                                                                             // 8548
  return {                                                                                                             // 8549
    restrict: 'E',                                                                                                     // 8550
    require: ['mdOption', '^^mdSelectMenu'],                                                                           // 8551
    controller: OptionController,                                                                                      // 8552
    compile: compile                                                                                                   // 8553
  };                                                                                                                   // 8554
                                                                                                                       // 8555
  function compile(element, attr) {                                                                                    // 8556
    // Manual transclusion to avoid the extra inner <span> that ng-transclude generates                                // 8557
    element.append( angular.element('<div class="md-text">').append(element.contents()) );                             // 8558
                                                                                                                       // 8559
    element.attr('tabindex', attr.tabindex || '0');                                                                    // 8560
    return postLink;                                                                                                   // 8561
  }                                                                                                                    // 8562
                                                                                                                       // 8563
  function postLink(scope, element, attr, ctrls) {                                                                     // 8564
    var optionCtrl = ctrls[0];                                                                                         // 8565
    var selectCtrl = ctrls[1];                                                                                         // 8566
                                                                                                                       // 8567
    if (angular.isDefined(attr.ngValue)) {                                                                             // 8568
      scope.$watch(attr.ngValue, setOptionValue);                                                                      // 8569
    } else if (angular.isDefined(attr.value)) {                                                                        // 8570
      setOptionValue(attr.value);                                                                                      // 8571
    } else {                                                                                                           // 8572
      scope.$watch(function() { return element.text(); }, setOptionValue);                                             // 8573
    }                                                                                                                  // 8574
                                                                                                                       // 8575
    scope.$$postDigest(function() {                                                                                    // 8576
      attr.$observe('selected', function(selected) {                                                                   // 8577
        if (!angular.isDefined(selected)) return;                                                                      // 8578
        if (selected) {                                                                                                // 8579
          if (!selectCtrl.isMultiple) {                                                                                // 8580
            selectCtrl.deselect( Object.keys(selectCtrl.selected)[0] );                                                // 8581
          }                                                                                                            // 8582
          selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);                                                     // 8583
        } else {                                                                                                       // 8584
          selectCtrl.deselect(optionCtrl.hashKey);                                                                     // 8585
        }                                                                                                              // 8586
        selectCtrl.refreshViewValue();                                                                                 // 8587
        selectCtrl.ngModel.$render();                                                                                  // 8588
      });                                                                                                              // 8589
    });                                                                                                                // 8590
                                                                                                                       // 8591
    $mdButtonInkRipple.attach(scope, element);                                                                         // 8592
    configureAria();                                                                                                   // 8593
                                                                                                                       // 8594
    function setOptionValue(newValue, oldValue) {                                                                      // 8595
      var oldHashKey = selectCtrl.hashGetter(oldValue, scope);                                                         // 8596
      var newHashKey = selectCtrl.hashGetter(newValue, scope);                                                         // 8597
                                                                                                                       // 8598
      optionCtrl.hashKey = newHashKey;                                                                                 // 8599
      optionCtrl.value = newValue;                                                                                     // 8600
                                                                                                                       // 8601
      selectCtrl.removeOption(oldHashKey, optionCtrl);                                                                 // 8602
      selectCtrl.addOption(newHashKey, optionCtrl);                                                                    // 8603
    }                                                                                                                  // 8604
                                                                                                                       // 8605
    scope.$on('$destroy', function() {                                                                                 // 8606
      selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);                                                         // 8607
    });                                                                                                                // 8608
                                                                                                                       // 8609
    function configureAria() {                                                                                         // 8610
      var ariaAttrs = {                                                                                                // 8611
        'role': 'option',                                                                                              // 8612
        'aria-selected': 'false'                                                                                       // 8613
      };                                                                                                               // 8614
                                                                                                                       // 8615
      if (!element[0].hasAttribute('id')) {                                                                            // 8616
        ariaAttrs.id = 'select_option_' + $mdUtil.nextUid();                                                           // 8617
      }                                                                                                                // 8618
      element.attr(ariaAttrs);                                                                                         // 8619
    }                                                                                                                  // 8620
  }                                                                                                                    // 8621
                                                                                                                       // 8622
  function OptionController($element) {                                                                                // 8623
    this.selected = false;                                                                                             // 8624
    this.setSelected = function(isSelected) {                                                                          // 8625
      if (isSelected && !this.selected) {                                                                              // 8626
        $element.attr({                                                                                                // 8627
          'selected': 'selected',                                                                                      // 8628
          'aria-selected': 'true'                                                                                      // 8629
        });                                                                                                            // 8630
      } else if (!isSelected && this.selected) {                                                                       // 8631
        $element.removeAttr('selected');                                                                               // 8632
        $element.attr('aria-selected', 'false');                                                                       // 8633
      }                                                                                                                // 8634
      this.selected = isSelected;                                                                                      // 8635
    };                                                                                                                 // 8636
  }                                                                                                                    // 8637
                                                                                                                       // 8638
}                                                                                                                      // 8639
OptionDirective.$inject = ["$mdButtonInkRipple", "$mdUtil"];                                                           // 8640
                                                                                                                       // 8641
function OptgroupDirective() {                                                                                         // 8642
  return {                                                                                                             // 8643
    restrict: 'E',                                                                                                     // 8644
    compile: compile                                                                                                   // 8645
  };                                                                                                                   // 8646
  function compile(el, attrs) {                                                                                        // 8647
    var labelElement = el.find('label');                                                                               // 8648
    if (!labelElement.length) {                                                                                        // 8649
      labelElement = angular.element('<label>');                                                                       // 8650
      el.prepend(labelElement);                                                                                        // 8651
    }                                                                                                                  // 8652
    if (attrs.label) labelElement.text(attrs.label);                                                                   // 8653
  }                                                                                                                    // 8654
}                                                                                                                      // 8655
                                                                                                                       // 8656
function SelectProvider($$interimElementProvider) {                                                                    // 8657
  selectDefaultOptions.$inject = ["$mdSelect", "$mdConstant", "$$rAF", "$mdUtil", "$mdTheming", "$timeout", "$window"];
  return $$interimElementProvider('$mdSelect')                                                                         // 8659
    .setDefaults({                                                                                                     // 8660
      methods: ['target'],                                                                                             // 8661
      options: selectDefaultOptions                                                                                    // 8662
    });                                                                                                                // 8663
                                                                                                                       // 8664
  /* @ngInject */                                                                                                      // 8665
  function selectDefaultOptions($mdSelect, $mdConstant, $$rAF, $mdUtil, $mdTheming, $timeout, $window ) {              // 8666
    return {                                                                                                           // 8667
      parent: 'body',                                                                                                  // 8668
      onShow: onShow,                                                                                                  // 8669
      onRemove: onRemove,                                                                                              // 8670
      hasBackdrop: true,                                                                                               // 8671
      disableParentScroll: true,                                                                                       // 8672
      themable: true                                                                                                   // 8673
    };                                                                                                                 // 8674
                                                                                                                       // 8675
    function onShow(scope, element, opts) {                                                                            // 8676
      if (!opts.target) {                                                                                              // 8677
        throw new Error('$mdSelect.show() expected a target element in options.target but got ' +                      // 8678
                        '"' + opts.target + '"!');                                                                     // 8679
      }                                                                                                                // 8680
                                                                                                                       // 8681
      angular.extend(opts, {                                                                                           // 8682
        isRemoved: false,                                                                                              // 8683
        target: angular.element(opts.target), //make sure it's not a naked dom node                                    // 8684
        parent: angular.element(opts.parent),                                                                          // 8685
        selectEl: element.find('md-select-menu'),                                                                      // 8686
        contentEl: element.find('md-content'),                                                                         // 8687
        backdrop: opts.hasBackdrop && angular.element('<md-backdrop class="md-select-backdrop md-click-catcher">')     // 8688
      });                                                                                                              // 8689
                                                                                                                       // 8690
      opts.resizeFn = function() {                                                                                     // 8691
        $$rAF(function() {                                                                                             // 8692
          $$rAF(function() {                                                                                           // 8693
            animateSelect(scope, element, opts);                                                                       // 8694
          });                                                                                                          // 8695
        });                                                                                                            // 8696
      };                                                                                                               // 8697
                                                                                                                       // 8698
      angular.element($window).on('resize', opts.resizeFn);                                                            // 8699
      angular.element($window).on('orientationchange', opts.resizeFn);                                                 // 8700
                                                                                                                       // 8701
                                                                                                                       // 8702
      configureAria();                                                                                                 // 8703
                                                                                                                       // 8704
      element.removeClass('md-leave');                                                                                 // 8705
                                                                                                                       // 8706
      var optionNodes = opts.selectEl[0].getElementsByTagName('md-option');                                            // 8707
                                                                                                                       // 8708
      if (opts.loadingAsync && opts.loadingAsync.then) {                                                               // 8709
        opts.loadingAsync.then(function() {                                                                            // 8710
          scope.$$loadingAsyncDone = true;                                                                             // 8711
          // Give ourselves two frames for the progress loader to clear out.                                           // 8712
          $$rAF(function() {                                                                                           // 8713
            $$rAF(function() {                                                                                         // 8714
              // Don't go forward if the select has been removed in this time...                                       // 8715
              if (opts.isRemoved) return;                                                                              // 8716
              animateSelect(scope, element, opts);                                                                     // 8717
            });                                                                                                        // 8718
          });                                                                                                          // 8719
        });                                                                                                            // 8720
      } else if (opts.loadingAsync) {                                                                                  // 8721
        scope.$$loadingAsyncDone = true;                                                                               // 8722
      }                                                                                                                // 8723
                                                                                                                       // 8724
      if (opts.disableParentScroll && !$mdUtil.getClosest(opts.target, 'MD-DIALOG')) {                                 // 8725
        opts.restoreScroll = $mdUtil.disableScrollAround(opts.target);                                                 // 8726
      } else {                                                                                                         // 8727
        opts.disableParentScroll = false;                                                                              // 8728
      }                                                                                                                // 8729
      // Only activate click listeners after a short time to stop accidental double taps/clicks                        // 8730
      // from clicking the wrong item                                                                                  // 8731
      $timeout(activateInteraction, 75, false);                                                                        // 8732
                                                                                                                       // 8733
      if (opts.backdrop) {                                                                                             // 8734
        $mdTheming.inherit(opts.backdrop, opts.parent);                                                                // 8735
        opts.parent.append(opts.backdrop);                                                                             // 8736
      }                                                                                                                // 8737
      opts.parent.append(element);                                                                                     // 8738
                                                                                                                       // 8739
      // Give the select a frame to 'initialize' in the DOM,                                                           // 8740
      // so we can read its height/width/position                                                                      // 8741
      $$rAF(function() {                                                                                               // 8742
        $$rAF(function() {                                                                                             // 8743
          if (opts.isRemoved) return;                                                                                  // 8744
          animateSelect(scope, element, opts);                                                                         // 8745
        });                                                                                                            // 8746
      });                                                                                                              // 8747
                                                                                                                       // 8748
      return $mdUtil.transitionEndPromise(opts.selectEl, {timeout: 350});                                              // 8749
                                                                                                                       // 8750
      function configureAria() {                                                                                       // 8751
        opts.target.attr('aria-expanded', 'true');                                                                     // 8752
      }                                                                                                                // 8753
                                                                                                                       // 8754
      function activateInteraction() {                                                                                 // 8755
        if (opts.isRemoved) return;                                                                                    // 8756
        var selectCtrl = opts.selectEl.controller('mdSelectMenu') || {};                                               // 8757
        element.addClass('md-clickable');                                                                              // 8758
                                                                                                                       // 8759
        opts.backdrop && opts.backdrop.on('click', function(e) {                                                       // 8760
          e.preventDefault();                                                                                          // 8761
          e.stopPropagation();                                                                                         // 8762
          opts.restoreFocus = false;                                                                                   // 8763
          scope.$apply($mdSelect.cancel);                                                                              // 8764
        });                                                                                                            // 8765
                                                                                                                       // 8766
        // Escape to close                                                                                             // 8767
        opts.selectEl.on('keydown', function(ev) {                                                                     // 8768
          switch (ev.keyCode) {                                                                                        // 8769
            case $mdConstant.KEY_CODE.SPACE:                                                                           // 8770
            case $mdConstant.KEY_CODE.ENTER:                                                                           // 8771
              var option = $mdUtil.getClosest(ev.target, 'md-option');                                                 // 8772
              if (option) {                                                                                            // 8773
                opts.selectEl.triggerHandler({                                                                         // 8774
                  type: 'click',                                                                                       // 8775
                  target: option                                                                                       // 8776
                });                                                                                                    // 8777
                ev.preventDefault();                                                                                   // 8778
              }                                                                                                        // 8779
              break;                                                                                                   // 8780
            case $mdConstant.KEY_CODE.TAB:                                                                             // 8781
            case $mdConstant.KEY_CODE.ESCAPE:                                                                          // 8782
              ev.preventDefault();                                                                                     // 8783
              opts.restoreFocus = true;                                                                                // 8784
              scope.$apply($mdSelect.cancel);                                                                          // 8785
          }                                                                                                            // 8786
        });                                                                                                            // 8787
                                                                                                                       // 8788
        // Cycling of options, and closing on enter                                                                    // 8789
        opts.selectEl.on('keydown', function(ev) {                                                                     // 8790
          switch (ev.keyCode) {                                                                                        // 8791
            case $mdConstant.KEY_CODE.UP_ARROW: return focusPrevOption();                                              // 8792
            case $mdConstant.KEY_CODE.DOWN_ARROW: return focusNextOption();                                            // 8793
            default:                                                                                                   // 8794
              if (ev.keyCode >= 31 && ev.keyCode <= 90) {                                                              // 8795
                var optNode = opts.selectEl.controller('mdSelectMenu').optNodeForKeyboardSearch(ev);                   // 8796
                optNode && optNode.focus();                                                                            // 8797
              }                                                                                                        // 8798
          }                                                                                                            // 8799
        });                                                                                                            // 8800
                                                                                                                       // 8801
                                                                                                                       // 8802
        function focusOption(direction) {                                                                              // 8803
          var optionsArray = nodesToArray(optionNodes);                                                                // 8804
          var index = optionsArray.indexOf(opts.focusedNode);                                                          // 8805
          if (index === -1) {                                                                                          // 8806
            // We lost the previously focused element, reset to first option                                           // 8807
            index = 0;                                                                                                 // 8808
          } else if (direction === 'next' && index < optionsArray.length - 1) {                                        // 8809
            index++;                                                                                                   // 8810
          } else if (direction === 'prev' && index > 0) {                                                              // 8811
            index--;                                                                                                   // 8812
          }                                                                                                            // 8813
          var newOption = opts.focusedNode = optionsArray[index];                                                      // 8814
          newOption && newOption.focus();                                                                              // 8815
        }                                                                                                              // 8816
        function focusNextOption() {                                                                                   // 8817
          focusOption('next');                                                                                         // 8818
        }                                                                                                              // 8819
        function focusPrevOption() {                                                                                   // 8820
          focusOption('prev');                                                                                         // 8821
        }                                                                                                              // 8822
                                                                                                                       // 8823
        opts.selectEl.on('click', checkCloseMenu);                                                                     // 8824
        opts.selectEl.on('keydown', function(e) {                                                                      // 8825
          if (e.keyCode == 32 || e.keyCode == 13) {                                                                    // 8826
            checkCloseMenu();                                                                                          // 8827
          }                                                                                                            // 8828
        });                                                                                                            // 8829
                                                                                                                       // 8830
        function checkCloseMenu() {                                                                                    // 8831
          if (!selectCtrl.isMultiple) {                                                                                // 8832
            opts.restoreFocus = true;                                                                                  // 8833
            scope.$evalAsync(function() {                                                                              // 8834
              $mdSelect.hide(selectCtrl.ngModel.$viewValue);                                                           // 8835
            });                                                                                                        // 8836
          }                                                                                                            // 8837
        }                                                                                                              // 8838
      }                                                                                                                // 8839
                                                                                                                       // 8840
    }                                                                                                                  // 8841
                                                                                                                       // 8842
    function onRemove(scope, element, opts) {                                                                          // 8843
      opts.isRemoved = true;                                                                                           // 8844
      element.addClass('md-leave')                                                                                     // 8845
        .removeClass('md-clickable');                                                                                  // 8846
      opts.target.attr('aria-expanded', 'false');                                                                      // 8847
                                                                                                                       // 8848
                                                                                                                       // 8849
      angular.element($window).off('resize', opts.resizeFn);                                                           // 8850
      angular.element($window).off('orientationchange', opts.resizefn);                                                // 8851
      opts.resizeFn = undefined;                                                                                       // 8852
                                                                                                                       // 8853
      var mdSelect = opts.selectEl.controller('mdSelect');                                                             // 8854
      if (mdSelect) {                                                                                                  // 8855
        mdSelect.setLabelText(opts.selectEl.controller('mdSelectMenu').selectedLabels());                              // 8856
      }                                                                                                                // 8857
                                                                                                                       // 8858
      return $mdUtil.transitionEndPromise(element, { timeout: 350 }).then(function() {                                 // 8859
        element.removeClass('md-active');                                                                              // 8860
        opts.backdrop && opts.backdrop.remove();                                                                       // 8861
        if (element[0].parentNode === opts.parent[0]) {                                                                // 8862
          opts.parent[0].removeChild(element[0]); // use browser to avoid $destroy event                               // 8863
        }                                                                                                              // 8864
        if (opts.disableParentScroll) {                                                                                // 8865
          opts.restoreScroll();                                                                                        // 8866
        }                                                                                                              // 8867
        if (opts.restoreFocus) opts.target.focus();                                                                    // 8868
      });                                                                                                              // 8869
    }                                                                                                                  // 8870
                                                                                                                       // 8871
    function animateSelect(scope, element, opts) {                                                                     // 8872
      var containerNode = element[0],                                                                                  // 8873
          targetNode = opts.target[0].firstElementChild.firstElementChild, // target the first span, functioning as the label
          parentNode = opts.parent[0],                                                                                 // 8875
          selectNode = opts.selectEl[0],                                                                               // 8876
          contentNode = opts.contentEl[0],                                                                             // 8877
          parentRect = parentNode.getBoundingClientRect(),                                                             // 8878
          targetRect = targetNode.getBoundingClientRect(),                                                             // 8879
          shouldOpenAroundTarget = false,                                                                              // 8880
          bounds = {                                                                                                   // 8881
            left: parentRect.left + SELECT_EDGE_MARGIN,                                                                // 8882
            top: SELECT_EDGE_MARGIN,                                                                                   // 8883
            bottom: parentRect.height - SELECT_EDGE_MARGIN,                                                            // 8884
            right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)                     // 8885
          },                                                                                                           // 8886
          spaceAvailable = {                                                                                           // 8887
            top: targetRect.top - bounds.top,                                                                          // 8888
            left: targetRect.left - bounds.left,                                                                       // 8889
            right: bounds.right - (targetRect.left + targetRect.width),                                                // 8890
            bottom: bounds.bottom - (targetRect.top + targetRect.height)                                               // 8891
          },                                                                                                           // 8892
          maxWidth = parentRect.width - SELECT_EDGE_MARGIN * 2,                                                        // 8893
          isScrollable = contentNode.scrollHeight > contentNode.offsetHeight,                                          // 8894
          selectedNode = selectNode.querySelector('md-option[selected]'),                                              // 8895
          optionNodes = selectNode.getElementsByTagName('md-option'),                                                  // 8896
          optgroupNodes = selectNode.getElementsByTagName('md-optgroup');                                              // 8897
                                                                                                                       // 8898
                                                                                                                       // 8899
      var centeredNode;                                                                                                // 8900
      // If a selected node, center around that                                                                        // 8901
      if (selectedNode) {                                                                                              // 8902
        centeredNode = selectedNode;                                                                                   // 8903
      // If there are option groups, center around the first option group                                              // 8904
      } else if (optgroupNodes.length) {                                                                               // 8905
        centeredNode = optgroupNodes[0];                                                                               // 8906
      // Otherwise, center around the first optionNode                                                                 // 8907
      } else if (optionNodes.length){                                                                                  // 8908
        centeredNode = optionNodes[0];                                                                                 // 8909
      // In case there are no options, center on whatever's in there... (eg progress indicator)                        // 8910
      } else {                                                                                                         // 8911
        centeredNode = contentNode.firstElementChild || contentNode;                                                   // 8912
      }                                                                                                                // 8913
                                                                                                                       // 8914
      if (contentNode.offsetWidth > maxWidth) {                                                                        // 8915
        contentNode.style['max-width'] = maxWidth + 'px';                                                              // 8916
      }                                                                                                                // 8917
      if (shouldOpenAroundTarget) {                                                                                    // 8918
        contentNode.style['min-width'] = targetRect.width + 'px';                                                      // 8919
      }                                                                                                                // 8920
                                                                                                                       // 8921
      // Remove padding before we compute the position of the menu                                                     // 8922
      if (isScrollable) {                                                                                              // 8923
        selectNode.classList.add('md-overflow');                                                                       // 8924
      }                                                                                                                // 8925
                                                                                                                       // 8926
      // Get the selectMenuRect *after* max-width is possibly set above                                                // 8927
      var selectMenuRect = selectNode.getBoundingClientRect();                                                         // 8928
      var centeredRect = getOffsetRect(centeredNode);                                                                  // 8929
                                                                                                                       // 8930
      if (centeredNode) {                                                                                              // 8931
        var centeredStyle = $window.getComputedStyle(centeredNode);                                                    // 8932
        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;                                       // 8933
        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;                                     // 8934
      }                                                                                                                // 8935
                                                                                                                       // 8936
      var focusedNode = centeredNode;                                                                                  // 8937
      if ((focusedNode.tagName || '').toUpperCase() === 'MD-OPTGROUP') {                                               // 8938
        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;                                  // 8939
      }                                                                                                                // 8940
                                                                                                                       // 8941
      if (isScrollable) {                                                                                              // 8942
        var scrollBuffer = contentNode.offsetHeight / 2;                                                               // 8943
        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;                             // 8944
                                                                                                                       // 8945
        if (spaceAvailable.top < scrollBuffer) {                                                                       // 8946
          contentNode.scrollTop = Math.min(                                                                            // 8947
            centeredRect.top,                                                                                          // 8948
            contentNode.scrollTop + scrollBuffer - spaceAvailable.top                                                  // 8949
          );                                                                                                           // 8950
        } else if (spaceAvailable.bottom < scrollBuffer) {                                                             // 8951
          contentNode.scrollTop = Math.max(                                                                            // 8952
            centeredRect.top + centeredRect.height - selectMenuRect.height,                                            // 8953
            contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom                                               // 8954
          );                                                                                                           // 8955
        }                                                                                                              // 8956
      }                                                                                                                // 8957
                                                                                                                       // 8958
      var left, top, transformOrigin;                                                                                  // 8959
      if (shouldOpenAroundTarget) {                                                                                    // 8960
        left = targetRect.left;                                                                                        // 8961
        top = targetRect.top + targetRect.height;                                                                      // 8962
        transformOrigin = '50% 0';                                                                                     // 8963
        if (top + selectMenuRect.height > bounds.bottom) {                                                             // 8964
          top = targetRect.top - selectMenuRect.height;                                                                // 8965
          transformOrigin = '50% 100%';                                                                                // 8966
        }                                                                                                              // 8967
      } else {                                                                                                         // 8968
        left = targetRect.left + centeredRect.left - centeredRect.paddingLeft;                                         // 8969
        top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 -                            // 8970
          centeredRect.top + contentNode.scrollTop);                                                                   // 8971
                                                                                                                       // 8972
                                                                                                                       // 8973
        transformOrigin = (centeredRect.left + targetRect.width / 2) + 'px ' +                                         // 8974
        (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + 'px 0px';                               // 8975
                                                                                                                       // 8976
        containerNode.style.minWidth = targetRect.width + centeredRect.paddingLeft +                                   // 8977
          centeredRect.paddingRight + 'px';                                                                            // 8978
      }                                                                                                                // 8979
                                                                                                                       // 8980
      // Keep left and top within the window                                                                           // 8981
      var containerRect = containerNode.getBoundingClientRect();                                                       // 8982
      containerNode.style.left = clamp(bounds.left, left, bounds.right - containerRect.width) + 'px';                  // 8983
      containerNode.style.top = clamp(bounds.top, top, bounds.bottom - containerRect.height) + 'px';                   // 8984
      selectNode.style[$mdConstant.CSS.TRANSFORM_ORIGIN] = transformOrigin;                                            // 8985
                                                                                                                       // 8986
      selectNode.style[$mdConstant.CSS.TRANSFORM] = 'scale(' +                                                         // 8987
        Math.min(targetRect.width / selectMenuRect.width, 1.0) + ',' +                                                 // 8988
        Math.min(targetRect.height / selectMenuRect.height, 1.0) +                                                     // 8989
      ')';                                                                                                             // 8990
                                                                                                                       // 8991
                                                                                                                       // 8992
      $$rAF(function() {                                                                                               // 8993
        element.addClass('md-active');                                                                                 // 8994
        selectNode.style[$mdConstant.CSS.TRANSFORM] = '';                                                              // 8995
        if (focusedNode) {                                                                                             // 8996
          opts.focusedNode = focusedNode;                                                                              // 8997
          focusedNode.focus();                                                                                         // 8998
        }                                                                                                              // 8999
      });                                                                                                              // 9000
    }                                                                                                                  // 9001
                                                                                                                       // 9002
  }                                                                                                                    // 9003
                                                                                                                       // 9004
  function clamp(min, n, max) {                                                                                        // 9005
    return Math.max(min, Math.min(n, max));                                                                            // 9006
  }                                                                                                                    // 9007
                                                                                                                       // 9008
  function getOffsetRect(node) {                                                                                       // 9009
    return node ? {                                                                                                    // 9010
      left: node.offsetLeft,                                                                                           // 9011
      top: node.offsetTop,                                                                                             // 9012
      width: node.offsetWidth,                                                                                         // 9013
      height: node.offsetHeight                                                                                        // 9014
    } : { left: 0, top: 0, width: 0, height: 0 };                                                                      // 9015
  }                                                                                                                    // 9016
}                                                                                                                      // 9017
SelectProvider.$inject = ["$$interimElementProvider"];                                                                 // 9018
                                                                                                                       // 9019
// Annoying method to copy nodes to an array, thanks to IE                                                             // 9020
function nodesToArray(nodes) {                                                                                         // 9021
  var results = [];                                                                                                    // 9022
  for (var i = 0; i < nodes.length; ++i) {                                                                             // 9023
    results.push(nodes.item(i));                                                                                       // 9024
  }                                                                                                                    // 9025
  return results;                                                                                                      // 9026
}                                                                                                                      // 9027
                                                                                                                       // 9028
})();                                                                                                                  // 9029
(function(){                                                                                                           // 9030
"use strict";                                                                                                          // 9031
                                                                                                                       // 9032
/**                                                                                                                    // 9033
 * @ngdoc module                                                                                                       // 9034
 * @name material.components.sidenav                                                                                   // 9035
 *                                                                                                                     // 9036
 * @description                                                                                                        // 9037
 * A Sidenav QP component.                                                                                             // 9038
 */                                                                                                                    // 9039
angular.module('material.components.sidenav', [                                                                        // 9040
    'material.core',                                                                                                   // 9041
    'material.components.backdrop'                                                                                     // 9042
  ])                                                                                                                   // 9043
  .factory('$mdSidenav', SidenavService )                                                                              // 9044
  .directive('mdSidenav', SidenavDirective)                                                                            // 9045
  .directive('mdSidenavFocus', SidenavFocusDirective)                                                                  // 9046
  .controller('$mdSidenavController', SidenavController);                                                              // 9047
                                                                                                                       // 9048
                                                                                                                       // 9049
/**                                                                                                                    // 9050
 * @private                                                                                                            // 9051
 * @ngdoc service                                                                                                      // 9052
 * @name $mdSidenav                                                                                                    // 9053
 * @module material.components.sidenav                                                                                 // 9054
 *                                                                                                                     // 9055
 * @description                                                                                                        // 9056
 * `$mdSidenav` makes it easy to interact with multiple sidenavs                                                       // 9057
 * in an app.                                                                                                          // 9058
 *                                                                                                                     // 9059
 * @usage                                                                                                              // 9060
 * <hljs lang="js">                                                                                                    // 9061
 * // Async lookup for sidenav instance; will resolve when the instance is available                                   // 9062
 * $mdSidenav(componentId).then(function(instance) {                                                                   // 9063
 *   $log.debug( componentId + "is now ready" );                                                                       // 9064
 * });                                                                                                                 // 9065
 * // Async toggle the given sidenav;                                                                                  // 9066
 * // when instance is known ready and lazy lookup is not needed.                                                      // 9067
 * $mdSidenav(componentId)                                                                                             // 9068
 *    .toggle()                                                                                                        // 9069
 *    .then(function(){                                                                                                // 9070
 *      $log.debug('toggled');                                                                                         // 9071
 *    });                                                                                                              // 9072
 * // Async open the given sidenav                                                                                     // 9073
 * $mdSidenav(componentId)                                                                                             // 9074
 *    .open()                                                                                                          // 9075
 *    .then(function(){                                                                                                // 9076
 *      $log.debug('opened');                                                                                          // 9077
 *    });                                                                                                              // 9078
 * // Async close the given sidenav                                                                                    // 9079
 * $mdSidenav(componentId)                                                                                             // 9080
 *    .close()                                                                                                         // 9081
 *    .then(function(){                                                                                                // 9082
 *      $log.debug('closed');                                                                                          // 9083
 *    });                                                                                                              // 9084
 * // Sync check to see if the specified sidenav is set to be open                                                     // 9085
 * $mdSidenav(componentId).isOpen();                                                                                   // 9086
 * // Sync check to whether given sidenav is locked open                                                               // 9087
 * // If this is true, the sidenav will be open regardless of close()                                                  // 9088
 * $mdSidenav(componentId).isLockedOpen();                                                                             // 9089
 * </hljs>                                                                                                             // 9090
 */                                                                                                                    // 9091
function SidenavService($mdComponentRegistry, $q) {                                                                    // 9092
  return function(handle) {                                                                                            // 9093
                                                                                                                       // 9094
    // Lookup the controller instance for the specified sidNav instance                                                // 9095
    var self;                                                                                                          // 9096
    var errorMsg = "SideNav '" + handle + "' is not available!";                                                       // 9097
    var instance = $mdComponentRegistry.get(handle);                                                                   // 9098
                                                                                                                       // 9099
    if(!instance) {                                                                                                    // 9100
      $mdComponentRegistry.notFoundError(handle);                                                                      // 9101
    }                                                                                                                  // 9102
                                                                                                                       // 9103
    return self = {                                                                                                    // 9104
      // -----------------                                                                                             // 9105
      // Sync methods                                                                                                  // 9106
      // -----------------                                                                                             // 9107
      isOpen: function() {                                                                                             // 9108
        return instance && instance.isOpen();                                                                          // 9109
      },                                                                                                               // 9110
      isLockedOpen: function() {                                                                                       // 9111
        return instance && instance.isLockedOpen();                                                                    // 9112
      },                                                                                                               // 9113
      // -----------------                                                                                             // 9114
      // Async methods                                                                                                 // 9115
      // -----------------                                                                                             // 9116
      toggle: function() {                                                                                             // 9117
        return instance ? instance.toggle() : $q.reject(errorMsg);                                                     // 9118
      },                                                                                                               // 9119
      open: function() {                                                                                               // 9120
        return instance ? instance.open() : $q.reject(errorMsg);                                                       // 9121
      },                                                                                                               // 9122
      close: function() {                                                                                              // 9123
        return instance ? instance.close() : $q.reject(errorMsg);                                                      // 9124
      },                                                                                                               // 9125
      then : function( callbackFn ) {                                                                                  // 9126
        var promise = instance ? $q.when(instance) : waitForInstance();                                                // 9127
        return promise.then( callbackFn || angular.noop );                                                             // 9128
      }                                                                                                                // 9129
    };                                                                                                                 // 9130
                                                                                                                       // 9131
    /**                                                                                                                // 9132
     * Deferred lookup of component instance using $component registry                                                 // 9133
     */                                                                                                                // 9134
    function waitForInstance() {                                                                                       // 9135
      return $mdComponentRegistry                                                                                      // 9136
                .when(handle)                                                                                          // 9137
                .then(function( it ){                                                                                  // 9138
                  instance = it;                                                                                       // 9139
                  return it;                                                                                           // 9140
                });                                                                                                    // 9141
    }                                                                                                                  // 9142
  };                                                                                                                   // 9143
}                                                                                                                      // 9144
SidenavService.$inject = ["$mdComponentRegistry", "$q"];                                                               // 9145
/**                                                                                                                    // 9146
 * @ngdoc directive                                                                                                    // 9147
 * @name mdSidenavFocus                                                                                                // 9148
 * @module material.components.sidenav                                                                                 // 9149
 *                                                                                                                     // 9150
 * @restrict A                                                                                                         // 9151
 *                                                                                                                     // 9152
 * @description                                                                                                        // 9153
 * `$mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.                               // 9154
 * This is completely optional, as the sidenav itself is focused by default.                                           // 9155
 *                                                                                                                     // 9156
 * @usage                                                                                                              // 9157
 * <hljs lang="html">                                                                                                  // 9158
 * <md-sidenav>                                                                                                        // 9159
 *   <form>                                                                                                            // 9160
 *     <md-input-container>                                                                                            // 9161
 *       <label for="testInput">Label</label>                                                                          // 9162
 *       <input id="testInput" type="text" md-sidenav-focus>                                                           // 9163
 *     </md-input-container>                                                                                           // 9164
 *   </form>                                                                                                           // 9165
 * </md-sidenav>                                                                                                       // 9166
 * </hljs>                                                                                                             // 9167
 **/                                                                                                                   // 9168
function SidenavFocusDirective() {                                                                                     // 9169
  return {                                                                                                             // 9170
    restrict: 'A',                                                                                                     // 9171
    require: '^mdSidenav',                                                                                             // 9172
    link: function(scope, element, attr, sidenavCtrl) {                                                                // 9173
      sidenavCtrl.focusElement(element);                                                                               // 9174
    }                                                                                                                  // 9175
  };                                                                                                                   // 9176
}                                                                                                                      // 9177
/**                                                                                                                    // 9178
 * @ngdoc directive                                                                                                    // 9179
 * @name mdSidenav                                                                                                     // 9180
 * @module material.components.sidenav                                                                                 // 9181
 * @restrict E                                                                                                         // 9182
 *                                                                                                                     // 9183
 * @description                                                                                                        // 9184
 *                                                                                                                     // 9185
 * A Sidenav component that can be opened and closed programatically.                                                  // 9186
 *                                                                                                                     // 9187
 * By default, upon opening it will slide out on top of the main content area.                                         // 9188
 *                                                                                                                     // 9189
 * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.                      // 9190
 * It can be overridden with the `md-sidenav-focus` directive on the child element you want focused.                   // 9191
 *                                                                                                                     // 9192
 * @usage                                                                                                              // 9193
 * <hljs lang="html">                                                                                                  // 9194
 * <div layout="row" ng-controller="MyController">                                                                     // 9195
 *   <md-sidenav md-component-id="left" class="md-sidenav-left">                                                       // 9196
 *     Left Nav!                                                                                                       // 9197
 *   </md-sidenav>                                                                                                     // 9198
 *                                                                                                                     // 9199
 *   <md-content>                                                                                                      // 9200
 *     Center Content                                                                                                  // 9201
 *     <md-button ng-click="openLeftMenu()">                                                                           // 9202
 *       Open Left Menu                                                                                                // 9203
 *     </md-button>                                                                                                    // 9204
 *   </md-content>                                                                                                     // 9205
 *                                                                                                                     // 9206
 *   <md-sidenav md-component-id="right"                                                                               // 9207
 *     md-is-locked-open="$mdMedia('min-width: 333px')"                                                                // 9208
 *     class="md-sidenav-right">                                                                                       // 9209
 *     <form>                                                                                                          // 9210
 *       <md-input-container>                                                                                          // 9211
 *         <label for="testInput">Test input</label>                                                                   // 9212
 *         <input id="testInput" type="text"                                                                           // 9213
 *                ng-model="data" md-sidenav-focus>                                                                    // 9214
 *       </md-input-container>                                                                                         // 9215
 *     </form>                                                                                                         // 9216
 *   </md-sidenav>                                                                                                     // 9217
 * </div>                                                                                                              // 9218
 * </hljs>                                                                                                             // 9219
 *                                                                                                                     // 9220
 * <hljs lang="js">                                                                                                    // 9221
 * var app = angular.module('myApp', ['ngMaterial']);                                                                  // 9222
 * app.controller('MyController', function($scope, $mdSidenav) {                                                       // 9223
 *   $scope.openLeftMenu = function() {                                                                                // 9224
 *     $mdSidenav('left').toggle();                                                                                    // 9225
 *   };                                                                                                                // 9226
 * });                                                                                                                 // 9227
 * </hljs>                                                                                                             // 9228
 *                                                                                                                     // 9229
 * @param {expression=} md-is-open A model bound to whether the sidenav is opened.                                     // 9230
 * @param {string=} md-component-id componentId to use with $mdSidenav service.                                        // 9231
 * @param {expression=} md-is-locked-open When this expression evalutes to true,                                       // 9232
 * the sidenav 'locks open': it falls into the content's flow instead                                                  // 9233
 * of appearing over it. This overrides the `is-open` attribute.                                                       // 9234
 *                                                                                                                     // 9235
 * The $mdMedia() service is exposed to the is-locked-open attribute, which                                            // 9236
 * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.                     // 9237
 * Examples:                                                                                                           // 9238
 *                                                                                                                     // 9239
 *   - `<md-sidenav md-is-locked-open="shouldLockOpen"></md-sidenav>`                                                  // 9240
 *   - `<md-sidenav md-is-locked-open="$mdMedia('min-width: 1000px')"></md-sidenav>`                                   // 9241
 *   - `<md-sidenav md-is-locked-open="$mdMedia('sm')"></md-sidenav>` (locks open on small screens)                    // 9242
 */                                                                                                                    // 9243
function SidenavDirective($timeout, $animate, $parse, $log, $mdMedia, $mdConstant, $compile, $mdTheming, $q, $document) {
  return {                                                                                                             // 9245
    restrict: 'E',                                                                                                     // 9246
    scope: {                                                                                                           // 9247
      isOpen: '=?mdIsOpen'                                                                                             // 9248
    },                                                                                                                 // 9249
    controller: '$mdSidenavController',                                                                                // 9250
    compile: function(element) {                                                                                       // 9251
      element.addClass('md-closed');                                                                                   // 9252
      element.attr('tabIndex', '-1');                                                                                  // 9253
      return postLink;                                                                                                 // 9254
    }                                                                                                                  // 9255
  };                                                                                                                   // 9256
                                                                                                                       // 9257
  /**                                                                                                                  // 9258
   * Directive Post Link function...                                                                                   // 9259
   */                                                                                                                  // 9260
  function postLink(scope, element, attr, sidenavCtrl) {                                                               // 9261
    var lastParentOverFlow;                                                                                            // 9262
    var triggeringElement = null;                                                                                      // 9263
    var promise = $q.when(true);                                                                                       // 9264
                                                                                                                       // 9265
    var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);                                                              // 9266
    var isLocked = function() {                                                                                        // 9267
      return isLockedOpenParsed(scope.$parent, {                                                                       // 9268
        $media: function(arg) {                                                                                        // 9269
          $log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");                                 // 9270
          return $mdMedia(arg);                                                                                        // 9271
        },                                                                                                             // 9272
        $mdMedia: $mdMedia                                                                                             // 9273
      });                                                                                                              // 9274
    };                                                                                                                 // 9275
    var backdrop = $compile(                                                                                           // 9276
      '<md-backdrop class="md-sidenav-backdrop md-opaque ng-enter">'                                                   // 9277
    )(scope);                                                                                                          // 9278
                                                                                                                       // 9279
    element.on('$destroy', sidenavCtrl.destroy);                                                                       // 9280
    $mdTheming.inherit(backdrop, element);                                                                             // 9281
                                                                                                                       // 9282
    scope.$watch(isLocked, updateIsLocked);                                                                            // 9283
    scope.$watch('isOpen', updateIsOpen);                                                                              // 9284
                                                                                                                       // 9285
                                                                                                                       // 9286
    // Publish special accessor for the Controller instance                                                            // 9287
    sidenavCtrl.$toggleOpen = toggleOpen;                                                                              // 9288
    sidenavCtrl.focusElement( sidenavCtrl.focusElement() || element );                                                 // 9289
                                                                                                                       // 9290
    /**                                                                                                                // 9291
     * Toggle the DOM classes to indicate `locked`                                                                     // 9292
     * @param isLocked                                                                                                 // 9293
     */                                                                                                                // 9294
    function updateIsLocked(isLocked, oldValue) {                                                                      // 9295
      scope.isLockedOpen = isLocked;                                                                                   // 9296
      if (isLocked === oldValue) {                                                                                     // 9297
        element.toggleClass('md-locked-open', !!isLocked);                                                             // 9298
      } else {                                                                                                         // 9299
        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');                                    // 9300
      }                                                                                                                // 9301
      backdrop.toggleClass('md-locked-open', !!isLocked);                                                              // 9302
    }                                                                                                                  // 9303
                                                                                                                       // 9304
    /**                                                                                                                // 9305
     * Toggle the SideNav view and attach/detach listeners                                                             // 9306
     * @param isOpen                                                                                                   // 9307
     */                                                                                                                // 9308
    function updateIsOpen(isOpen) {                                                                                    // 9309
      var parent = element.parent();                                                                                   // 9310
                                                                                                                       // 9311
      parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);                                                             // 9312
      backdrop[isOpen ? 'on' : 'off']('click', close);                                                                 // 9313
                                                                                                                       // 9314
      if ( isOpen ) {                                                                                                  // 9315
        // Capture upon opening..                                                                                      // 9316
        triggeringElement = $document[0].activeElement;                                                                // 9317
      }                                                                                                                // 9318
      var focusEl = sidenavCtrl.focusElement();                                                                        // 9319
                                                                                                                       // 9320
      disableParentScroll(isOpen);                                                                                     // 9321
                                                                                                                       // 9322
      return promise = $q.all([                                                                                        // 9323
                isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop),                                  // 9324
                $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed')                                    // 9325
              ])                                                                                                       // 9326
              .then(function() {                                                                                       // 9327
                // Perform focus when animations are ALL done...                                                       // 9328
                if (scope.isOpen) {                                                                                    // 9329
                  focusEl && focusEl.focus();                                                                          // 9330
                }                                                                                                      // 9331
              });                                                                                                      // 9332
    }                                                                                                                  // 9333
                                                                                                                       // 9334
    /**                                                                                                                // 9335
     * Prevent parent scrolling (when the SideNav is open)                                                             // 9336
     */                                                                                                                // 9337
    function disableParentScroll(disabled) {                                                                           // 9338
      var parent = element.parent();                                                                                   // 9339
      if ( disabled ) {                                                                                                // 9340
        lastParentOverFlow = parent.css('overflow');                                                                   // 9341
        parent.css('overflow', 'hidden');                                                                              // 9342
      } else if (angular.isDefined(lastParentOverFlow)) {                                                              // 9343
        parent.css('overflow', lastParentOverFlow);                                                                    // 9344
        lastParentOverFlow = undefined;                                                                                // 9345
      }                                                                                                                // 9346
    }                                                                                                                  // 9347
                                                                                                                       // 9348
    /**                                                                                                                // 9349
     * Toggle the sideNav view and publish a promise to be resolved when                                               // 9350
     * the view animation finishes.                                                                                    // 9351
     *                                                                                                                 // 9352
     * @param isOpen                                                                                                   // 9353
     * @returns {*}                                                                                                    // 9354
     */                                                                                                                // 9355
    function toggleOpen( isOpen ) {                                                                                    // 9356
      if (scope.isOpen == isOpen ) {                                                                                   // 9357
                                                                                                                       // 9358
        return $q.when(true);                                                                                          // 9359
                                                                                                                       // 9360
      } else {                                                                                                         // 9361
        var deferred = $q.defer();                                                                                     // 9362
                                                                                                                       // 9363
        // Toggle value to force an async `updateIsOpen()` to run                                                      // 9364
        scope.isOpen = isOpen;                                                                                         // 9365
                                                                                                                       // 9366
        $timeout(function() {                                                                                          // 9367
                                                                                                                       // 9368
          // When the current `updateIsOpen()` animation finishes                                                      // 9369
          promise.then(function(result) {                                                                              // 9370
                                                                                                                       // 9371
            if ( !scope.isOpen ) {                                                                                     // 9372
              // reset focus to originating element (if available) upon close                                          // 9373
              triggeringElement && triggeringElement.focus();                                                          // 9374
              triggeringElement = null;                                                                                // 9375
            }                                                                                                          // 9376
                                                                                                                       // 9377
            deferred.resolve(result);                                                                                  // 9378
          });                                                                                                          // 9379
                                                                                                                       // 9380
        },0,false);                                                                                                    // 9381
                                                                                                                       // 9382
        return deferred.promise;                                                                                       // 9383
      }                                                                                                                // 9384
    }                                                                                                                  // 9385
                                                                                                                       // 9386
    /**                                                                                                                // 9387
     * Auto-close sideNav when the `escape` key is pressed.                                                            // 9388
     * @param evt                                                                                                      // 9389
     */                                                                                                                // 9390
    function onKeyDown(ev) {                                                                                           // 9391
      var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);                                                     // 9392
      return isEscape ? close(ev) : $q.when(true);                                                                     // 9393
    }                                                                                                                  // 9394
                                                                                                                       // 9395
    /**                                                                                                                // 9396
     * With backdrop `clicks` or `escape` key-press, immediately                                                       // 9397
     * apply the CSS close transition... Then notify the controller                                                    // 9398
     * to close() and perform its own actions.                                                                         // 9399
     */                                                                                                                // 9400
    function close(ev) {                                                                                               // 9401
      ev.preventDefault();                                                                                             // 9402
      ev.stopPropagation();                                                                                            // 9403
                                                                                                                       // 9404
      return sidenavCtrl.close();                                                                                      // 9405
    }                                                                                                                  // 9406
                                                                                                                       // 9407
  }                                                                                                                    // 9408
}                                                                                                                      // 9409
SidenavDirective.$inject = ["$timeout", "$animate", "$parse", "$log", "$mdMedia", "$mdConstant", "$compile", "$mdTheming", "$q", "$document"];
                                                                                                                       // 9411
/*                                                                                                                     // 9412
 * @private                                                                                                            // 9413
 * @ngdoc controller                                                                                                   // 9414
 * @name SidenavController                                                                                             // 9415
 * @module material.components.sidenav                                                                                 // 9416
 *                                                                                                                     // 9417
 */                                                                                                                    // 9418
function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {                                       // 9419
                                                                                                                       // 9420
  var self = this,                                                                                                     // 9421
      focusElement;                                                                                                    // 9422
                                                                                                                       // 9423
  // Use Default internal method until overridden by directive postLink                                                // 9424
                                                                                                                       // 9425
  // Synchronous getters                                                                                               // 9426
  self.isOpen = function() { return !!$scope.isOpen; };                                                                // 9427
  self.isLockedOpen = function() { return !!$scope.isLockedOpen; };                                                    // 9428
                                                                                                                       // 9429
  // Async actions                                                                                                     // 9430
  self.open   = function() { return self.$toggleOpen( true );  };                                                      // 9431
  self.close  = function() { return self.$toggleOpen( false ); };                                                      // 9432
  self.toggle = function() { return self.$toggleOpen( !$scope.isOpen );  };                                            // 9433
  self.focusElement = function(el) {                                                                                   // 9434
    if ( angular.isDefined(el) ) {                                                                                     // 9435
      focusElement = el;                                                                                               // 9436
    }                                                                                                                  // 9437
    return focusElement;                                                                                               // 9438
  };                                                                                                                   // 9439
                                                                                                                       // 9440
  self.$toggleOpen = function() { return $q.when($scope.isOpen); };                                                    // 9441
                                                                                                                       // 9442
  self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);                                            // 9443
}                                                                                                                      // 9444
SidenavController.$inject = ["$scope", "$element", "$attrs", "$mdComponentRegistry", "$q"];                            // 9445
                                                                                                                       // 9446
})();                                                                                                                  // 9447
(function(){                                                                                                           // 9448
"use strict";                                                                                                          // 9449
                                                                                                                       // 9450
  /**                                                                                                                  // 9451
   * @ngdoc module                                                                                                     // 9452
   * @name material.components.slider                                                                                  // 9453
   */                                                                                                                  // 9454
  angular.module('material.components.slider', [                                                                       // 9455
    'material.core'                                                                                                    // 9456
  ])                                                                                                                   // 9457
  .directive('mdSlider', SliderDirective);                                                                             // 9458
                                                                                                                       // 9459
/**                                                                                                                    // 9460
 * @ngdoc directive                                                                                                    // 9461
 * @name mdSlider                                                                                                      // 9462
 * @module material.components.slider                                                                                  // 9463
 * @restrict E                                                                                                         // 9464
 * @description                                                                                                        // 9465
 * The `<md-slider>` component allows the user to choose from a range of                                               // 9466
 * values.                                                                                                             // 9467
 *                                                                                                                     // 9468
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 9469
 * the slider is in the accent color by default. The primary color palette may be used with                            // 9470
 * the `md-primary` class.                                                                                             // 9471
 *                                                                                                                     // 9472
 * It has two modes: 'normal' mode, where the user slides between a wide range                                         // 9473
 * of values, and 'discrete' mode, where the user slides between only a few                                            // 9474
 * select values.                                                                                                      // 9475
 *                                                                                                                     // 9476
 * To enable discrete mode, add the `md-discrete` attribute to a slider,                                               // 9477
 * and use the `step` attribute to change the distance between                                                         // 9478
 * values the user is allowed to pick.                                                                                 // 9479
 *                                                                                                                     // 9480
 * @usage                                                                                                              // 9481
 * <h4>Normal Mode</h4>                                                                                                // 9482
 * <hljs lang="html">                                                                                                  // 9483
 * <md-slider ng-model="myValue" min="5" max="500">                                                                    // 9484
 * </md-slider>                                                                                                        // 9485
 * </hljs>                                                                                                             // 9486
 * <h4>Discrete Mode</h4>                                                                                              // 9487
 * <hljs lang="html">                                                                                                  // 9488
 * <md-slider md-discrete ng-model="myDiscreteValue" step="10" min="10" max="130">                                     // 9489
 * </md-slider>                                                                                                        // 9490
 * </hljs>                                                                                                             // 9491
 *                                                                                                                     // 9492
 * @param {boolean=} md-discrete Whether to enable discrete mode.                                                      // 9493
 * @param {number=} step The distance between values the user is allowed to pick. Default 1.                           // 9494
 * @param {number=} min The minimum value the user is allowed to pick. Default 0.                                      // 9495
 * @param {number=} max The maximum value the user is allowed to pick. Default 100.                                    // 9496
 */                                                                                                                    // 9497
function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse) {              // 9498
  return {                                                                                                             // 9499
    scope: {},                                                                                                         // 9500
    require: '?ngModel',                                                                                               // 9501
    template:                                                                                                          // 9502
      '<div class="md-slider-wrapper">\
        <div class="md-track-container">\
          <div class="md-track"></div>\
          <div class="md-track md-track-fill"></div>\
          <div class="md-track-ticks"></div>\
        </div>\
        <div class="md-thumb-container">\
          <div class="md-thumb"></div>\
          <div class="md-focus-thumb"></div>\
          <div class="md-focus-ring"></div>\
          <div class="md-sign">\
            <span class="md-thumb-text"></span>\
          </div>\
          <div class="md-disabled-thumb"></div>\
        </div>\
      </div>',                                                                                                         // 9518
    compile: compile                                                                                                   // 9519
  };                                                                                                                   // 9520
                                                                                                                       // 9521
  // **********************************************************                                                        // 9522
  // Private Methods                                                                                                   // 9523
  // **********************************************************                                                        // 9524
                                                                                                                       // 9525
  function compile (tElement, tAttrs) {                                                                                // 9526
    tElement.attr({                                                                                                    // 9527
      tabIndex: 0,                                                                                                     // 9528
      role: 'slider'                                                                                                   // 9529
    });                                                                                                                // 9530
                                                                                                                       // 9531
    $mdAria.expect(tElement, 'aria-label');                                                                            // 9532
                                                                                                                       // 9533
    return postLink;                                                                                                   // 9534
  }                                                                                                                    // 9535
                                                                                                                       // 9536
  function postLink(scope, element, attr, ngModelCtrl) {                                                               // 9537
    $mdTheming(element);                                                                                               // 9538
    ngModelCtrl = ngModelCtrl || {                                                                                     // 9539
      // Mock ngModelController if it doesn't exist to give us                                                         // 9540
      // the minimum functionality needed                                                                              // 9541
      $setViewValue: function(val) {                                                                                   // 9542
        this.$viewValue = val;                                                                                         // 9543
        this.$viewChangeListeners.forEach(function(cb) { cb(); });                                                     // 9544
      },                                                                                                               // 9545
      $parsers: [],                                                                                                    // 9546
      $formatters: [],                                                                                                 // 9547
      $viewChangeListeners: []                                                                                         // 9548
    };                                                                                                                 // 9549
                                                                                                                       // 9550
    var isDisabledParsed = attr.ngDisabled && $parse(attr.ngDisabled);                                                 // 9551
    var isDisabledGetter = isDisabledParsed ?                                                                          // 9552
      function() { return isDisabledParsed(scope.$parent); } :                                                         // 9553
      angular.noop;                                                                                                    // 9554
    var thumb = angular.element(element[0].querySelector('.md-thumb'));                                                // 9555
    var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));                                       // 9556
    var thumbContainer = thumb.parent();                                                                               // 9557
    var trackContainer = angular.element(element[0].querySelector('.md-track-container'));                             // 9558
    var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));                                     // 9559
    var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));                                  // 9560
    var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);                                  // 9561
                                                                                                                       // 9562
    // Default values, overridable by attrs                                                                            // 9563
    attr.min ? attr.$observe('min', updateMin) : updateMin(0);                                                         // 9564
    attr.max ? attr.$observe('max', updateMax) : updateMax(100);                                                       // 9565
    attr.step ? attr.$observe('step', updateStep) : updateStep(1);                                                     // 9566
                                                                                                                       // 9567
    // We have to manually stop the $watch on ngDisabled because it exists                                             // 9568
    // on the parent scope, and won't be automatically destroyed when                                                  // 9569
    // the component is destroyed.                                                                                     // 9570
    var stopDisabledWatch = angular.noop;                                                                              // 9571
    if (attr.ngDisabled) {                                                                                             // 9572
      stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);                                   // 9573
    }                                                                                                                  // 9574
                                                                                                                       // 9575
    $mdGesture.register(element, 'drag');                                                                              // 9576
                                                                                                                       // 9577
    element                                                                                                            // 9578
      .on('keydown', keydownListener)                                                                                  // 9579
      .on('$md.pressdown', onPressDown)                                                                                // 9580
      .on('$md.pressup', onPressUp)                                                                                    // 9581
      .on('$md.dragstart', onDragStart)                                                                                // 9582
      .on('$md.drag', onDrag)                                                                                          // 9583
      .on('$md.dragend', onDragEnd);                                                                                   // 9584
                                                                                                                       // 9585
    // On resize, recalculate the slider's dimensions and re-render                                                    // 9586
    function updateAll() {                                                                                             // 9587
      refreshSliderDimensions();                                                                                       // 9588
      ngModelRender();                                                                                                 // 9589
      redrawTicks();                                                                                                   // 9590
    }                                                                                                                  // 9591
    setTimeout(updateAll);                                                                                             // 9592
                                                                                                                       // 9593
    var debouncedUpdateAll = $$rAF.throttle(updateAll);                                                                // 9594
    angular.element($window).on('resize', debouncedUpdateAll);                                                         // 9595
                                                                                                                       // 9596
    scope.$on('$destroy', function() {                                                                                 // 9597
      angular.element($window).off('resize', debouncedUpdateAll);                                                      // 9598
      stopDisabledWatch();                                                                                             // 9599
    });                                                                                                                // 9600
                                                                                                                       // 9601
    ngModelCtrl.$render = ngModelRender;                                                                               // 9602
    ngModelCtrl.$viewChangeListeners.push(ngModelRender);                                                              // 9603
    ngModelCtrl.$formatters.push(minMaxValidator);                                                                     // 9604
    ngModelCtrl.$formatters.push(stepValidator);                                                                       // 9605
                                                                                                                       // 9606
    /**                                                                                                                // 9607
     * Attributes                                                                                                      // 9608
     */                                                                                                                // 9609
    var min;                                                                                                           // 9610
    var max;                                                                                                           // 9611
    var step;                                                                                                          // 9612
    function updateMin(value) {                                                                                        // 9613
      min = parseFloat(value);                                                                                         // 9614
      element.attr('aria-valuemin', value);                                                                            // 9615
      updateAll();                                                                                                     // 9616
    }                                                                                                                  // 9617
    function updateMax(value) {                                                                                        // 9618
      max = parseFloat(value);                                                                                         // 9619
      element.attr('aria-valuemax', value);                                                                            // 9620
      updateAll();                                                                                                     // 9621
    }                                                                                                                  // 9622
    function updateStep(value) {                                                                                       // 9623
      step = parseFloat(value);                                                                                        // 9624
      redrawTicks();                                                                                                   // 9625
    }                                                                                                                  // 9626
    function updateAriaDisabled(isDisabled) {                                                                          // 9627
      element.attr('aria-disabled', !!isDisabled);                                                                     // 9628
    }                                                                                                                  // 9629
                                                                                                                       // 9630
    // Draw the ticks with canvas.                                                                                     // 9631
    // The alternative to drawing ticks with canvas is to draw one element for each tick,                              // 9632
    // which could quickly become a performance bottleneck.                                                            // 9633
    var tickCanvas, tickCtx;                                                                                           // 9634
    function redrawTicks() {                                                                                           // 9635
      if (!angular.isDefined(attr.mdDiscrete)) return;                                                                 // 9636
                                                                                                                       // 9637
      var numSteps = Math.floor( (max - min) / step );                                                                 // 9638
      if (!tickCanvas) {                                                                                               // 9639
        var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);                                              // 9640
        tickCanvas = angular.element('<canvas style="position:absolute;">');                                           // 9641
        tickCtx = tickCanvas[0].getContext('2d');                                                                      // 9642
        tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';                                                // 9643
        tickContainer.append(tickCanvas);                                                                              // 9644
      }                                                                                                                // 9645
      var dimensions = getSliderDimensions();                                                                          // 9646
      tickCanvas[0].width = dimensions.width;                                                                          // 9647
      tickCanvas[0].height = dimensions.height;                                                                        // 9648
                                                                                                                       // 9649
      var distance;                                                                                                    // 9650
      for (var i = 0; i <= numSteps; i++) {                                                                            // 9651
        distance = Math.floor(dimensions.width * (i / numSteps));                                                      // 9652
        tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);                                                       // 9653
      }                                                                                                                // 9654
    }                                                                                                                  // 9655
                                                                                                                       // 9656
                                                                                                                       // 9657
    /**                                                                                                                // 9658
     * Refreshing Dimensions                                                                                           // 9659
     */                                                                                                                // 9660
    var sliderDimensions = {};                                                                                         // 9661
    refreshSliderDimensions();                                                                                         // 9662
    function refreshSliderDimensions() {                                                                               // 9663
      sliderDimensions = trackContainer[0].getBoundingClientRect();                                                    // 9664
    }                                                                                                                  // 9665
    function getSliderDimensions() {                                                                                   // 9666
      throttledRefreshDimensions();                                                                                    // 9667
      return sliderDimensions;                                                                                         // 9668
    }                                                                                                                  // 9669
                                                                                                                       // 9670
    /**                                                                                                                // 9671
     * left/right arrow listener                                                                                       // 9672
     */                                                                                                                // 9673
    function keydownListener(ev) {                                                                                     // 9674
      if(element[0].hasAttribute('disabled')) {                                                                        // 9675
        return;                                                                                                        // 9676
      }                                                                                                                // 9677
                                                                                                                       // 9678
      var changeAmount;                                                                                                // 9679
      if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {                                                            // 9680
        changeAmount = -step;                                                                                          // 9681
      } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {                                                    // 9682
        changeAmount = step;                                                                                           // 9683
      }                                                                                                                // 9684
      if (changeAmount) {                                                                                              // 9685
        if (ev.metaKey || ev.ctrlKey || ev.altKey) {                                                                   // 9686
          changeAmount *= 4;                                                                                           // 9687
        }                                                                                                              // 9688
        ev.preventDefault();                                                                                           // 9689
        ev.stopPropagation();                                                                                          // 9690
        scope.$evalAsync(function() {                                                                                  // 9691
          setModelValue(ngModelCtrl.$viewValue + changeAmount);                                                        // 9692
        });                                                                                                            // 9693
      }                                                                                                                // 9694
    }                                                                                                                  // 9695
                                                                                                                       // 9696
    /**                                                                                                                // 9697
     * ngModel setters and validators                                                                                  // 9698
     */                                                                                                                // 9699
    function setModelValue(value) {                                                                                    // 9700
      ngModelCtrl.$setViewValue( minMaxValidator(stepValidator(value)) );                                              // 9701
    }                                                                                                                  // 9702
    function ngModelRender() {                                                                                         // 9703
      if (isNaN(ngModelCtrl.$viewValue)) {                                                                             // 9704
        ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;                                                              // 9705
      }                                                                                                                // 9706
                                                                                                                       // 9707
      var percent = (ngModelCtrl.$viewValue - min) / (max - min);                                                      // 9708
      scope.modelValue = ngModelCtrl.$viewValue;                                                                       // 9709
      element.attr('aria-valuenow', ngModelCtrl.$viewValue);                                                           // 9710
      setSliderPercent(percent);                                                                                       // 9711
      thumbText.text( ngModelCtrl.$viewValue );                                                                        // 9712
    }                                                                                                                  // 9713
                                                                                                                       // 9714
    function minMaxValidator(value) {                                                                                  // 9715
      if (angular.isNumber(value)) {                                                                                   // 9716
        return Math.max(min, Math.min(max, value));                                                                    // 9717
      }                                                                                                                // 9718
    }                                                                                                                  // 9719
    function stepValidator(value) {                                                                                    // 9720
      if (angular.isNumber(value)) {                                                                                   // 9721
        return Math.round(value / step) * step;                                                                        // 9722
      }                                                                                                                // 9723
    }                                                                                                                  // 9724
                                                                                                                       // 9725
    /**                                                                                                                // 9726
     * @param percent 0-1                                                                                              // 9727
     */                                                                                                                // 9728
    function setSliderPercent(percent) {                                                                               // 9729
      activeTrack.css('width', (percent * 100) + '%');                                                                 // 9730
      thumbContainer.css(                                                                                              // 9731
        'left',                                                                                                        // 9732
        (percent * 100) + '%'                                                                                          // 9733
      );                                                                                                               // 9734
      element.toggleClass('md-min', percent === 0);                                                                    // 9735
    }                                                                                                                  // 9736
                                                                                                                       // 9737
                                                                                                                       // 9738
    /**                                                                                                                // 9739
     * Slide listeners                                                                                                 // 9740
     */                                                                                                                // 9741
    var isDragging = false;                                                                                            // 9742
    var isDiscrete = angular.isDefined(attr.mdDiscrete);                                                               // 9743
                                                                                                                       // 9744
    function onPressDown(ev) {                                                                                         // 9745
      if (isDisabledGetter()) return;                                                                                  // 9746
                                                                                                                       // 9747
      element.addClass('active');                                                                                      // 9748
      element[0].focus();                                                                                              // 9749
      refreshSliderDimensions();                                                                                       // 9750
                                                                                                                       // 9751
      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));                                               // 9752
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 9753
      scope.$apply(function() {                                                                                        // 9754
        setModelValue( closestVal );                                                                                   // 9755
        setSliderPercent( valueToPercent(closestVal));                                                                 // 9756
      });                                                                                                              // 9757
    }                                                                                                                  // 9758
    function onPressUp(ev) {                                                                                           // 9759
      if (isDisabledGetter()) return;                                                                                  // 9760
                                                                                                                       // 9761
      element.removeClass('dragging active');                                                                          // 9762
                                                                                                                       // 9763
      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));                                               // 9764
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 9765
      scope.$apply(function() {                                                                                        // 9766
        setModelValue(closestVal);                                                                                     // 9767
        ngModelRender();                                                                                               // 9768
      });                                                                                                              // 9769
    }                                                                                                                  // 9770
    function onDragStart(ev) {                                                                                         // 9771
      if (isDisabledGetter()) return;                                                                                  // 9772
      isDragging = true;                                                                                               // 9773
      ev.stopPropagation();                                                                                            // 9774
                                                                                                                       // 9775
      element.addClass('dragging');                                                                                    // 9776
      setSliderFromEvent(ev);                                                                                          // 9777
    }                                                                                                                  // 9778
    function onDrag(ev) {                                                                                              // 9779
      if (!isDragging) return;                                                                                         // 9780
      ev.stopPropagation();                                                                                            // 9781
      setSliderFromEvent(ev);                                                                                          // 9782
    }                                                                                                                  // 9783
    function onDragEnd(ev) {                                                                                           // 9784
      if (!isDragging) return;                                                                                         // 9785
      ev.stopPropagation();                                                                                            // 9786
      isDragging = false;                                                                                              // 9787
    }                                                                                                                  // 9788
                                                                                                                       // 9789
    function setSliderFromEvent(ev) {                                                                                  // 9790
      // While panning discrete, update only the                                                                       // 9791
      // visual positioning but not the model value.                                                                   // 9792
      if ( isDiscrete ) adjustThumbPosition( ev.pointer.x );                                                           // 9793
      else              doSlide( ev.pointer.x );                                                                       // 9794
    }                                                                                                                  // 9795
                                                                                                                       // 9796
    /**                                                                                                                // 9797
     * Slide the UI by changing the model value                                                                        // 9798
     * @param x                                                                                                        // 9799
     */                                                                                                                // 9800
    function doSlide( x ) {                                                                                            // 9801
      scope.$evalAsync( function() {                                                                                   // 9802
        setModelValue( percentToValue( positionToPercent(x) ));                                                        // 9803
      });                                                                                                              // 9804
    }                                                                                                                  // 9805
                                                                                                                       // 9806
    /**                                                                                                                // 9807
     * Slide the UI without changing the model (while dragging/panning)                                                // 9808
     * @param x                                                                                                        // 9809
     */                                                                                                                // 9810
    function adjustThumbPosition( x ) {                                                                                // 9811
      var exactVal = percentToValue( positionToPercent( x ));                                                          // 9812
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 9813
      setSliderPercent( positionToPercent(x) );                                                                        // 9814
      thumbText.text( closestVal );                                                                                    // 9815
    }                                                                                                                  // 9816
                                                                                                                       // 9817
    /**                                                                                                                // 9818
     * Convert horizontal position on slider to percentage value of offset from beginning...                           // 9819
     * @param x                                                                                                        // 9820
     * @returns {number}                                                                                               // 9821
     */                                                                                                                // 9822
    function positionToPercent( x ) {                                                                                  // 9823
      return Math.max(0, Math.min(1, (x - sliderDimensions.left) / (sliderDimensions.width)));                         // 9824
    }                                                                                                                  // 9825
                                                                                                                       // 9826
    /**                                                                                                                // 9827
     * Convert percentage offset on slide to equivalent model value                                                    // 9828
     * @param percent                                                                                                  // 9829
     * @returns {*}                                                                                                    // 9830
     */                                                                                                                // 9831
    function percentToValue( percent ) {                                                                               // 9832
      return (min + percent * (max - min));                                                                            // 9833
    }                                                                                                                  // 9834
                                                                                                                       // 9835
    function valueToPercent( val ) {                                                                                   // 9836
      return (val - min)/(max - min);                                                                                  // 9837
    }                                                                                                                  // 9838
  }                                                                                                                    // 9839
}                                                                                                                      // 9840
SliderDirective.$inject = ["$$rAF", "$window", "$mdAria", "$mdUtil", "$mdConstant", "$mdTheming", "$mdGesture", "$parse"];
                                                                                                                       // 9842
})();                                                                                                                  // 9843
(function(){                                                                                                           // 9844
"use strict";                                                                                                          // 9845
                                                                                                                       // 9846
/*                                                                                                                     // 9847
 * @ngdoc module                                                                                                       // 9848
 * @name material.components.sticky                                                                                    // 9849
 * @description                                                                                                        // 9850
 *                                                                                                                     // 9851
 * Sticky effects for md                                                                                               // 9852
 */                                                                                                                    // 9853
                                                                                                                       // 9854
angular.module('material.components.sticky', [                                                                         // 9855
  'material.core',                                                                                                     // 9856
  'material.components.content'                                                                                        // 9857
])                                                                                                                     // 9858
  .factory('$mdSticky', MdSticky);                                                                                     // 9859
                                                                                                                       // 9860
/*                                                                                                                     // 9861
 * @ngdoc service                                                                                                      // 9862
 * @name $mdSticky                                                                                                     // 9863
 * @module material.components.sticky                                                                                  // 9864
 *                                                                                                                     // 9865
 * @description                                                                                                        // 9866
 * The `$mdSticky`service provides a mixin to make elements sticky.                                                    // 9867
 *                                                                                                                     // 9868
 * @returns A `$mdSticky` function that takes three arguments:                                                         // 9869
 *   - `scope`                                                                                                         // 9870
 *   - `element`: The element that will be 'sticky'                                                                    // 9871
 *   - `elementClone`: A clone of the element, that will be shown                                                      // 9872
 *     when the user starts scrolling past the original element.                                                       // 9873
 *     If not provided, it will use the result of `element.clone()`.                                                   // 9874
 */                                                                                                                    // 9875
                                                                                                                       // 9876
function MdSticky($document, $mdConstant, $compile, $$rAF, $mdUtil) {                                                  // 9877
                                                                                                                       // 9878
  var browserStickySupport = checkStickySupport();                                                                     // 9879
                                                                                                                       // 9880
  /**                                                                                                                  // 9881
   * Registers an element as sticky, used internally by directives to register themselves                              // 9882
   */                                                                                                                  // 9883
  return function registerStickyElement(scope, element, stickyClone) {                                                 // 9884
    var contentCtrl = element.controller('mdContent');                                                                 // 9885
    if (!contentCtrl) return;                                                                                          // 9886
                                                                                                                       // 9887
    if (browserStickySupport) {                                                                                        // 9888
      element.css({                                                                                                    // 9889
        position: browserStickySupport,                                                                                // 9890
        top: 0,                                                                                                        // 9891
        'z-index': 2                                                                                                   // 9892
      });                                                                                                              // 9893
    } else {                                                                                                           // 9894
      var $$sticky = contentCtrl.$element.data('$$sticky');                                                            // 9895
      if (!$$sticky) {                                                                                                 // 9896
        $$sticky = setupSticky(contentCtrl);                                                                           // 9897
        contentCtrl.$element.data('$$sticky', $$sticky);                                                               // 9898
      }                                                                                                                // 9899
                                                                                                                       // 9900
      var deregister = $$sticky.add(element, stickyClone || element.clone());                                          // 9901
      scope.$on('$destroy', deregister);                                                                               // 9902
    }                                                                                                                  // 9903
  };                                                                                                                   // 9904
                                                                                                                       // 9905
  function setupSticky(contentCtrl) {                                                                                  // 9906
    var contentEl = contentCtrl.$element;                                                                              // 9907
                                                                                                                       // 9908
    // Refresh elements is very expensive, so we use the debounced                                                     // 9909
    // version when possible.                                                                                          // 9910
    var debouncedRefreshElements = $$rAF.throttle(refreshElements);                                                    // 9911
                                                                                                                       // 9912
    // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,                                               // 9913
    // more reliable than `scroll` on android.                                                                         // 9914
    setupAugmentedScrollEvents(contentEl);                                                                             // 9915
    contentEl.on('$scrollstart', debouncedRefreshElements);                                                            // 9916
    contentEl.on('$scroll', onScroll);                                                                                 // 9917
                                                                                                                       // 9918
    var self;                                                                                                          // 9919
    var stickyBaseoffset = contentEl.prop('offsetTop');                                                                // 9920
    return self = {                                                                                                    // 9921
      prev: null,                                                                                                      // 9922
      current: null, //the currently stickied item                                                                     // 9923
      next: null,                                                                                                      // 9924
      items: [],                                                                                                       // 9925
      add: add,                                                                                                        // 9926
      refreshElements: refreshElements                                                                                 // 9927
    };                                                                                                                 // 9928
                                                                                                                       // 9929
    /***************                                                                                                   // 9930
     * Public                                                                                                          // 9931
     ***************/                                                                                                  // 9932
    // Add an element and its sticky clone to this content's sticky collection                                         // 9933
    function add(element, stickyClone) {                                                                               // 9934
      stickyClone.addClass('md-sticky-clone');                                                                         // 9935
      stickyClone.css('top', stickyBaseoffset + 'px');                                                                 // 9936
                                                                                                                       // 9937
      var item = {                                                                                                     // 9938
        element: element,                                                                                              // 9939
        clone: stickyClone                                                                                             // 9940
      };                                                                                                               // 9941
      self.items.push(item);                                                                                           // 9942
                                                                                                                       // 9943
      contentEl.parent().prepend(item.clone);                                                                          // 9944
                                                                                                                       // 9945
      debouncedRefreshElements();                                                                                      // 9946
                                                                                                                       // 9947
      return function remove() {                                                                                       // 9948
        self.items.forEach(function(item, index) {                                                                     // 9949
          if (item.element[0] === element[0]) {                                                                        // 9950
            self.items.splice(index, 1);                                                                               // 9951
            item.clone.remove();                                                                                       // 9952
          }                                                                                                            // 9953
        });                                                                                                            // 9954
        debouncedRefreshElements();                                                                                    // 9955
      };                                                                                                               // 9956
    }                                                                                                                  // 9957
                                                                                                                       // 9958
    function refreshElements() {                                                                                       // 9959
      // Sort our collection of elements by their current position in the DOM.                                         // 9960
      // We need to do this because our elements' order of being added may not                                         // 9961
      // be the same as their order of display.                                                                        // 9962
      self.items.forEach(refreshPosition);                                                                             // 9963
      self.items = self.items.sort(function(a, b) {                                                                    // 9964
        return a.top < b.top ? -1 : 1;                                                                                 // 9965
      });                                                                                                              // 9966
                                                                                                                       // 9967
      // Find which item in the list should be active,                                                                 // 9968
      // based upon the content's current scroll position                                                              // 9969
      var item;                                                                                                        // 9970
      var currentScrollTop = contentEl.prop('scrollTop');                                                              // 9971
      for (var i = self.items.length - 1; i >= 0; i--) {                                                               // 9972
        if (currentScrollTop > self.items[i].top) {                                                                    // 9973
          item = self.items[i];                                                                                        // 9974
          break;                                                                                                       // 9975
        }                                                                                                              // 9976
      }                                                                                                                // 9977
      setCurrentItem(item);                                                                                            // 9978
    }                                                                                                                  // 9979
                                                                                                                       // 9980
                                                                                                                       // 9981
    /***************                                                                                                   // 9982
     * Private                                                                                                         // 9983
     ***************/                                                                                                  // 9984
                                                                                                                       // 9985
    // Find the `top` of an item relative to the content element,                                                      // 9986
    // and also the height.                                                                                            // 9987
    function refreshPosition(item) {                                                                                   // 9988
      // Find the top of an item by adding to the offsetHeight until we reach the                                      // 9989
      // content element.                                                                                              // 9990
      var current = item.element[0];                                                                                   // 9991
      item.top = 0;                                                                                                    // 9992
      item.left = 0;                                                                                                   // 9993
      while (current && current !== contentEl[0]) {                                                                    // 9994
        item.top += current.offsetTop;                                                                                 // 9995
        item.left += current.offsetLeft;                                                                               // 9996
        current = current.offsetParent;                                                                                // 9997
      }                                                                                                                // 9998
      item.height = item.element.prop('offsetHeight');                                                                 // 9999
      item.clone.css('margin-left', item.left + 'px');                                                                 // 10000
    }                                                                                                                  // 10001
                                                                                                                       // 10002
                                                                                                                       // 10003
    // As we scroll, push in and select the correct sticky element.                                                    // 10004
    function onScroll() {                                                                                              // 10005
      var scrollTop = contentEl.prop('scrollTop');                                                                     // 10006
      var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);                                                 // 10007
      onScroll.prevScrollTop = scrollTop;                                                                              // 10008
                                                                                                                       // 10009
      // At the top?                                                                                                   // 10010
      if (scrollTop === 0) {                                                                                           // 10011
        setCurrentItem(null);                                                                                          // 10012
                                                                                                                       // 10013
      // Going to next item?                                                                                           // 10014
      } else if (isScrollingDown && self.next) {                                                                       // 10015
        if (self.next.top - scrollTop <= 0) {                                                                          // 10016
          // Sticky the next item if we've scrolled past its position.                                                 // 10017
          setCurrentItem(self.next);                                                                                   // 10018
        } else if (self.current) {                                                                                     // 10019
          // Push the current item up when we're almost at the next item.                                              // 10020
          if (self.next.top - scrollTop <= self.next.height) {                                                         // 10021
            translate(self.current, self.next.top - self.next.height - scrollTop);                                     // 10022
          } else {                                                                                                     // 10023
            translate(self.current, null);                                                                             // 10024
          }                                                                                                            // 10025
        }                                                                                                              // 10026
                                                                                                                       // 10027
      // Scrolling up with a current sticky item?                                                                      // 10028
      } else if (!isScrollingDown && self.current) {                                                                   // 10029
        if (scrollTop < self.current.top) {                                                                            // 10030
          // Sticky the previous item if we've scrolled up past                                                        // 10031
          // the original position of the currently stickied item.                                                     // 10032
          setCurrentItem(self.prev);                                                                                   // 10033
        }                                                                                                              // 10034
        // Scrolling up, and just bumping into the item above (just set to current)?                                   // 10035
        // If we have a next item bumping into the current item, translate                                             // 10036
        // the current item up from the top as it scrolls into view.                                                   // 10037
        if (self.current && self.next) {                                                                               // 10038
          if (scrollTop >= self.next.top - self.current.height) {                                                      // 10039
            translate(self.current, self.next.top - scrollTop - self.current.height);                                  // 10040
          } else {                                                                                                     // 10041
            translate(self.current, null);                                                                             // 10042
          }                                                                                                            // 10043
        }                                                                                                              // 10044
      }                                                                                                                // 10045
    }                                                                                                                  // 10046
                                                                                                                       // 10047
   function setCurrentItem(item) {                                                                                     // 10048
     if (self.current === item) return;                                                                                // 10049
     // Deactivate currently active item                                                                               // 10050
     if (self.current) {                                                                                               // 10051
       translate(self.current, null);                                                                                  // 10052
       setStickyState(self.current, null);                                                                             // 10053
     }                                                                                                                 // 10054
                                                                                                                       // 10055
     // Activate new item if given                                                                                     // 10056
     if (item) {                                                                                                       // 10057
       setStickyState(item, 'active');                                                                                 // 10058
     }                                                                                                                 // 10059
                                                                                                                       // 10060
     self.current = item;                                                                                              // 10061
     var index = self.items.indexOf(item);                                                                             // 10062
     // If index === -1, index + 1 = 0. It works out.                                                                  // 10063
     self.next = self.items[index + 1];                                                                                // 10064
     self.prev = self.items[index - 1];                                                                                // 10065
     setStickyState(self.next, 'next');                                                                                // 10066
     setStickyState(self.prev, 'prev');                                                                                // 10067
   }                                                                                                                   // 10068
                                                                                                                       // 10069
   function setStickyState(item, state) {                                                                              // 10070
     if (!item || item.state === state) return;                                                                        // 10071
     if (item.state) {                                                                                                 // 10072
       item.clone.attr('sticky-prev-state', item.state);                                                               // 10073
       item.element.attr('sticky-prev-state', item.state);                                                             // 10074
     }                                                                                                                 // 10075
     item.clone.attr('sticky-state', state);                                                                           // 10076
     item.element.attr('sticky-state', state);                                                                         // 10077
     item.state = state;                                                                                               // 10078
   }                                                                                                                   // 10079
                                                                                                                       // 10080
   function translate(item, amount) {                                                                                  // 10081
     if (!item) return;                                                                                                // 10082
     if (amount === null || amount === undefined) {                                                                    // 10083
       if (item.translateY) {                                                                                          // 10084
         item.translateY = null;                                                                                       // 10085
         item.clone.css($mdConstant.CSS.TRANSFORM, '');                                                                // 10086
       }                                                                                                               // 10087
     } else {                                                                                                          // 10088
       item.translateY = amount;                                                                                       // 10089
       item.clone.css(                                                                                                 // 10090
         $mdConstant.CSS.TRANSFORM,                                                                                    // 10091
         'translate3d(' + item.left + 'px,' + amount + 'px,0)'                                                         // 10092
       );                                                                                                              // 10093
     }                                                                                                                 // 10094
   }                                                                                                                   // 10095
  }                                                                                                                    // 10096
                                                                                                                       // 10097
  // Function to check for browser sticky support                                                                      // 10098
  function checkStickySupport($el) {                                                                                   // 10099
    var stickyProp;                                                                                                    // 10100
    var testEl = angular.element('<div>');                                                                             // 10101
    $document[0].body.appendChild(testEl[0]);                                                                          // 10102
                                                                                                                       // 10103
    var stickyProps = ['sticky', '-webkit-sticky'];                                                                    // 10104
    for (var i = 0; i < stickyProps.length; ++i) {                                                                     // 10105
      testEl.css({position: stickyProps[i], top: 0, 'z-index': 2});                                                    // 10106
      if (testEl.css('position') == stickyProps[i]) {                                                                  // 10107
        stickyProp = stickyProps[i];                                                                                   // 10108
        break;                                                                                                         // 10109
      }                                                                                                                // 10110
    }                                                                                                                  // 10111
    testEl.remove();                                                                                                   // 10112
    return stickyProp;                                                                                                 // 10113
  }                                                                                                                    // 10114
                                                                                                                       // 10115
  // Android 4.4 don't accurately give scroll events.                                                                  // 10116
  // To fix this problem, we setup a fake scroll event. We say:                                                        // 10117
  // > If a scroll or touchmove event has happened in the last DELAY milliseconds,                                     // 10118
  //   then send a `$scroll` event every animationFrame.                                                               // 10119
  // Additionally, we add $scrollstart and $scrollend events.                                                          // 10120
  function setupAugmentedScrollEvents(element) {                                                                       // 10121
    var SCROLL_END_DELAY = 200;                                                                                        // 10122
    var isScrolling;                                                                                                   // 10123
    var lastScrollTime;                                                                                                // 10124
    element.on('scroll touchmove', function() {                                                                        // 10125
      if (!isScrolling) {                                                                                              // 10126
        isScrolling = true;                                                                                            // 10127
        $$rAF(loopScrollEvent);                                                                                        // 10128
        element.triggerHandler('$scrollstart');                                                                        // 10129
      }                                                                                                                // 10130
      element.triggerHandler('$scroll');                                                                               // 10131
      lastScrollTime = +$mdUtil.now();                                                                                 // 10132
    });                                                                                                                // 10133
                                                                                                                       // 10134
    function loopScrollEvent() {                                                                                       // 10135
      if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {                                                        // 10136
        isScrolling = false;                                                                                           // 10137
        element.triggerHandler('$scrollend');                                                                          // 10138
      } else {                                                                                                         // 10139
        element.triggerHandler('$scroll');                                                                             // 10140
        $$rAF(loopScrollEvent);                                                                                        // 10141
      }                                                                                                                // 10142
    }                                                                                                                  // 10143
  }                                                                                                                    // 10144
                                                                                                                       // 10145
}                                                                                                                      // 10146
MdSticky.$inject = ["$document", "$mdConstant", "$compile", "$$rAF", "$mdUtil"];                                       // 10147
                                                                                                                       // 10148
})();                                                                                                                  // 10149
(function(){                                                                                                           // 10150
"use strict";                                                                                                          // 10151
                                                                                                                       // 10152
/**                                                                                                                    // 10153
 * @ngdoc module                                                                                                       // 10154
 * @name material.components.subheader                                                                                 // 10155
 * @description                                                                                                        // 10156
 * SubHeader module                                                                                                    // 10157
 *                                                                                                                     // 10158
 *  Subheaders are special list tiles that delineate distinct sections of a                                            // 10159
 *  list or grid list and are typically related to the current filtering or                                            // 10160
 *  sorting criteria. Subheader tiles are either displayed inline with tiles or                                        // 10161
 *  can be associated with content, for example, in an adjacent column.                                                // 10162
 *                                                                                                                     // 10163
 *  Upon scrolling, subheaders remain pinned to the top of the screen and remain                                       // 10164
 *  pinned until pushed on or off screen by the next subheader. @see [Material                                         // 10165
 *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)                              // 10166
 *                                                                                                                     // 10167
 *  > To improve the visual grouping of content, use the system color for your subheaders.                             // 10168
 *                                                                                                                     // 10169
 */                                                                                                                    // 10170
angular.module('material.components.subheader', [                                                                      // 10171
  'material.core',                                                                                                     // 10172
  'material.components.sticky'                                                                                         // 10173
])                                                                                                                     // 10174
  .directive('mdSubheader', MdSubheaderDirective);                                                                     // 10175
                                                                                                                       // 10176
/**                                                                                                                    // 10177
 * @ngdoc directive                                                                                                    // 10178
 * @name mdSubheader                                                                                                   // 10179
 * @module material.components.subheader                                                                               // 10180
 *                                                                                                                     // 10181
 * @restrict E                                                                                                         // 10182
 *                                                                                                                     // 10183
 * @description                                                                                                        // 10184
 * The `<md-subheader>` directive is a subheader for a section. By default it is sticky.                               // 10185
 * You can make it not sticky by applying the `md-no-sticky` class to the subheader.                                   // 10186
 *                                                                                                                     // 10187
 *                                                                                                                     // 10188
 * @usage                                                                                                              // 10189
 * <hljs lang="html">                                                                                                  // 10190
 * <md-subheader>Online Friends</md-subheader>                                                                         // 10191
 * </hljs>                                                                                                             // 10192
 */                                                                                                                    // 10193
                                                                                                                       // 10194
function MdSubheaderDirective($mdSticky, $compile, $mdTheming) {                                                       // 10195
  return {                                                                                                             // 10196
    restrict: 'E',                                                                                                     // 10197
    replace: true,                                                                                                     // 10198
    transclude: true,                                                                                                  // 10199
    template:                                                                                                          // 10200
      '<h2 class="md-subheader">' +                                                                                    // 10201
        '<div class="md-subheader-inner">' +                                                                           // 10202
          '<span class="md-subheader-content"></span>' +                                                               // 10203
        '</div>' +                                                                                                     // 10204
      '</h2>',                                                                                                         // 10205
    compile: function(element, attr, transclude) {                                                                     // 10206
      return function postLink(scope, element, attr) {                                                                 // 10207
        $mdTheming(element);                                                                                           // 10208
        var outerHTML = element[0].outerHTML;                                                                          // 10209
                                                                                                                       // 10210
        function getContent(el) {                                                                                      // 10211
          return angular.element(el[0].querySelector('.md-subheader-content'));                                        // 10212
        }                                                                                                              // 10213
                                                                                                                       // 10214
        // Transclude the user-given contents of the subheader                                                         // 10215
        // the conventional way.                                                                                       // 10216
        transclude(scope, function(clone) {                                                                            // 10217
          getContent(element).append(clone);                                                                           // 10218
        });                                                                                                            // 10219
                                                                                                                       // 10220
        // Create another clone, that uses the outer and inner contents                                                // 10221
        // of the element, that will be 'stickied' as the user scrolls.                                                // 10222
        if (!element.hasClass('md-no-sticky')) {                                                                       // 10223
          transclude(scope, function(clone) {                                                                          // 10224
            var stickyClone = $compile(angular.element(outerHTML))(scope);                                             // 10225
            getContent(stickyClone).append(clone);                                                                     // 10226
            $mdSticky(scope, element, stickyClone);                                                                    // 10227
          });                                                                                                          // 10228
        }                                                                                                              // 10229
      };                                                                                                               // 10230
    }                                                                                                                  // 10231
  };                                                                                                                   // 10232
}                                                                                                                      // 10233
MdSubheaderDirective.$inject = ["$mdSticky", "$compile", "$mdTheming"];                                                // 10234
                                                                                                                       // 10235
})();                                                                                                                  // 10236
(function(){                                                                                                           // 10237
"use strict";                                                                                                          // 10238
                                                                                                                       // 10239
/**                                                                                                                    // 10240
 * @ngdoc module                                                                                                       // 10241
 * @name material.components.swipe                                                                                     // 10242
 * @description Swipe module!                                                                                          // 10243
 */                                                                                                                    // 10244
/**                                                                                                                    // 10245
 * @ngdoc directive                                                                                                    // 10246
 * @module material.components.swipe                                                                                   // 10247
 * @name mdSwipeLeft                                                                                                   // 10248
 *                                                                                                                     // 10249
 * @restrict A                                                                                                         // 10250
 *                                                                                                                     // 10251
 * @description                                                                                                        // 10252
 * The md-swipe-left directives allows you to specify custom behavior when an element is swiped                        // 10253
 * left.                                                                                                               // 10254
 *                                                                                                                     // 10255
 * @usage                                                                                                              // 10256
 * <hljs lang="html">                                                                                                  // 10257
 * <div md-swipe-left="onSwipeLeft()">Swipe me left!</div>                                                             // 10258
 * </hljs>                                                                                                             // 10259
 */                                                                                                                    // 10260
/**                                                                                                                    // 10261
 * @ngdoc directive                                                                                                    // 10262
 * @module material.components.swipe                                                                                   // 10263
 * @name mdSwipeRight                                                                                                  // 10264
 *                                                                                                                     // 10265
 * @restrict A                                                                                                         // 10266
 *                                                                                                                     // 10267
 * @description                                                                                                        // 10268
 * The md-swipe-right directives allows you to specify custom behavior when an element is swiped                       // 10269
 * right.                                                                                                              // 10270
 *                                                                                                                     // 10271
 * @usage                                                                                                              // 10272
 * <hljs lang="html">                                                                                                  // 10273
 * <div md-swipe-right="onSwipeRight()">Swipe me right!</div>                                                          // 10274
 * </hljs>                                                                                                             // 10275
 */                                                                                                                    // 10276
                                                                                                                       // 10277
angular.module('material.components.swipe', ['material.core'])                                                         // 10278
    .directive('mdSwipeLeft', getDirective('SwipeLeft'))                                                               // 10279
    .directive('mdSwipeRight', getDirective('SwipeRight'));                                                            // 10280
                                                                                                                       // 10281
function getDirective(name) {                                                                                          // 10282
  var directiveName = 'md' + name;                                                                                     // 10283
  var eventName = '$md.' + name.toLowerCase();                                                                         // 10284
                                                                                                                       // 10285
    DirectiveFactory.$inject = ["$parse"];                                                                             // 10286
  return DirectiveFactory;                                                                                             // 10287
                                                                                                                       // 10288
  /* @ngInject */                                                                                                      // 10289
  function DirectiveFactory($parse) {                                                                                  // 10290
      return { restrict: 'A', link: postLink };                                                                        // 10291
      function postLink(scope, element, attr) {                                                                        // 10292
        var fn = $parse(attr[directiveName]);                                                                          // 10293
        element.on(eventName, function(ev) {                                                                           // 10294
          scope.$apply(function() { fn(scope, { $event: ev }); });                                                     // 10295
        });                                                                                                            // 10296
      }                                                                                                                // 10297
    }                                                                                                                  // 10298
}                                                                                                                      // 10299
                                                                                                                       // 10300
                                                                                                                       // 10301
                                                                                                                       // 10302
})();                                                                                                                  // 10303
(function(){                                                                                                           // 10304
"use strict";                                                                                                          // 10305
                                                                                                                       // 10306
/**                                                                                                                    // 10307
 * @private                                                                                                            // 10308
 * @ngdoc module                                                                                                       // 10309
 * @name material.components.switch                                                                                    // 10310
 */                                                                                                                    // 10311
                                                                                                                       // 10312
angular.module('material.components.switch', [                                                                         // 10313
  'material.core',                                                                                                     // 10314
  'material.components.checkbox'                                                                                       // 10315
])                                                                                                                     // 10316
  .directive('mdSwitch', MdSwitch);                                                                                    // 10317
                                                                                                                       // 10318
/**                                                                                                                    // 10319
 * @private                                                                                                            // 10320
 * @ngdoc directive                                                                                                    // 10321
 * @module material.components.switch                                                                                  // 10322
 * @name mdSwitch                                                                                                      // 10323
 * @restrict E                                                                                                         // 10324
 *                                                                                                                     // 10325
 * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *                                                                                                                     // 10327
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 10328
 * the switch is in the accent color by default. The primary color palette may be used with                            // 10329
 * the `md-primary` class.                                                                                             // 10330
 *                                                                                                                     // 10331
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 10332
 * @param {string=} name Property name of the form under which the control is published.                               // 10333
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.                   // 10334
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.              // 10335
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.                                   // 10337
 * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.
 *                                                                                                                     // 10339
 * @usage                                                                                                              // 10340
 * <hljs lang="html">                                                                                                  // 10341
 * <md-switch ng-model="isActive" aria-label="Finished?">                                                              // 10342
 *   Finished ?                                                                                                        // 10343
 * </md-switch>                                                                                                        // 10344
 *                                                                                                                     // 10345
 * <md-switch md-no-ink ng-model="hasInk" aria-label="No Ink Effects">                                                 // 10346
 *   No Ink Effects                                                                                                    // 10347
 * </md-switch>                                                                                                        // 10348
 *                                                                                                                     // 10349
 * <md-switch ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">                                          // 10350
 *   Disabled                                                                                                          // 10351
 * </md-switch>                                                                                                        // 10352
 *                                                                                                                     // 10353
 * </hljs>                                                                                                             // 10354
 */                                                                                                                    // 10355
function MdSwitch(mdCheckboxDirective, $mdTheming, $mdUtil, $document, $mdConstant, $parse, $$rAF, $mdGesture) {       // 10356
  var checkboxDirective = mdCheckboxDirective[0];                                                                      // 10357
                                                                                                                       // 10358
  return {                                                                                                             // 10359
    restrict: 'E',                                                                                                     // 10360
    priority:210, // Run before ngAria                                                                                 // 10361
    transclude: true,                                                                                                  // 10362
    template:                                                                                                          // 10363
      '<div class="md-container">' +                                                                                   // 10364
        '<div class="md-bar"></div>' +                                                                                 // 10365
        '<div class="md-thumb-container">' +                                                                           // 10366
          '<div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div>' +                                        // 10367
        '</div>'+                                                                                                      // 10368
      '</div>' +                                                                                                       // 10369
      '<div ng-transclude class="md-label">' +                                                                         // 10370
      '</div>',                                                                                                        // 10371
    require: '?ngModel',                                                                                               // 10372
    compile: compile                                                                                                   // 10373
  };                                                                                                                   // 10374
                                                                                                                       // 10375
  function compile(element, attr) {                                                                                    // 10376
    var checkboxLink = checkboxDirective.compile(element, attr);                                                       // 10377
    // no transition on initial load                                                                                   // 10378
    element.addClass('md-dragging');                                                                                   // 10379
                                                                                                                       // 10380
    return function (scope, element, attr, ngModel) {                                                                  // 10381
      ngModel = ngModel || $mdUtil.fakeNgModel();                                                                      // 10382
      var disabledGetter = $parse(attr.ngDisabled);                                                                    // 10383
      var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));                           // 10384
      var switchContainer = angular.element(element[0].querySelector('.md-container'));                                // 10385
                                                                                                                       // 10386
      // no transition on initial load                                                                                 // 10387
      $$rAF(function() {                                                                                               // 10388
        element.removeClass('md-dragging');                                                                            // 10389
      });                                                                                                              // 10390
                                                                                                                       // 10391
      checkboxLink(scope, element, attr, ngModel);                                                                     // 10392
                                                                                                                       // 10393
      if (angular.isDefined(attr.ngDisabled)) {                                                                        // 10394
        scope.$watch(disabledGetter, function(isDisabled) {                                                            // 10395
          element.attr('tabindex', isDisabled ? -1 : 0);                                                               // 10396
        });                                                                                                            // 10397
      }                                                                                                                // 10398
                                                                                                                       // 10399
      // These events are triggered by setup drag                                                                      // 10400
      $mdGesture.register(switchContainer, 'drag');                                                                    // 10401
      switchContainer                                                                                                  // 10402
        .on('$md.dragstart', onDragStart)                                                                              // 10403
        .on('$md.drag', onDrag)                                                                                        // 10404
        .on('$md.dragend', onDragEnd);                                                                                 // 10405
                                                                                                                       // 10406
      var drag;                                                                                                        // 10407
      function onDragStart(ev) {                                                                                       // 10408
        // Don't go if ng-disabled===true                                                                              // 10409
        if (disabledGetter(scope)) return;                                                                             // 10410
        ev.stopPropagation();                                                                                          // 10411
                                                                                                                       // 10412
        element.addClass('md-dragging');                                                                               // 10413
        drag = {                                                                                                       // 10414
          width: thumbContainer.prop('offsetWidth')                                                                    // 10415
        };                                                                                                             // 10416
        element.removeClass('transition');                                                                             // 10417
      }                                                                                                                // 10418
                                                                                                                       // 10419
      function onDrag(ev) {                                                                                            // 10420
        if (!drag) return;                                                                                             // 10421
        ev.stopPropagation();                                                                                          // 10422
        ev.srcEvent && ev.srcEvent.preventDefault();                                                                   // 10423
                                                                                                                       // 10424
        var percent = ev.pointer.distanceX / drag.width;                                                               // 10425
                                                                                                                       // 10426
        //if checked, start from right. else, start from left                                                          // 10427
        var translate = ngModel.$viewValue ?  1 + percent : percent;                                                   // 10428
        // Make sure the switch stays inside its bounds, 0-1%                                                          // 10429
        translate = Math.max(0, Math.min(1, translate));                                                               // 10430
                                                                                                                       // 10431
        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100*translate) + '%,0,0)');                    // 10432
        drag.translate = translate;                                                                                    // 10433
      }                                                                                                                // 10434
                                                                                                                       // 10435
      function onDragEnd(ev) {                                                                                         // 10436
        if (!drag) return;                                                                                             // 10437
        ev.stopPropagation();                                                                                          // 10438
                                                                                                                       // 10439
        element.removeClass('md-dragging');                                                                            // 10440
        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');                                                             // 10441
                                                                                                                       // 10442
        // We changed if there is no distance (this is a click a click),                                               // 10443
        // or if the drag distance is >50% of the total.                                                               // 10444
        var isChanged = ngModel.$viewValue ? drag.translate < 0.5 : drag.translate > 0.5;                              // 10445
        if (isChanged) {                                                                                               // 10446
          applyModelValue(!ngModel.$viewValue);                                                                        // 10447
        }                                                                                                              // 10448
        drag = null;                                                                                                   // 10449
      }                                                                                                                // 10450
                                                                                                                       // 10451
      function applyModelValue(newValue) {                                                                             // 10452
        scope.$apply(function() {                                                                                      // 10453
          ngModel.$setViewValue(newValue);                                                                             // 10454
          ngModel.$render();                                                                                           // 10455
        });                                                                                                            // 10456
      }                                                                                                                // 10457
                                                                                                                       // 10458
    };                                                                                                                 // 10459
  }                                                                                                                    // 10460
                                                                                                                       // 10461
                                                                                                                       // 10462
}                                                                                                                      // 10463
MdSwitch.$inject = ["mdCheckboxDirective", "$mdTheming", "$mdUtil", "$document", "$mdConstant", "$parse", "$$rAF", "$mdGesture"];
                                                                                                                       // 10465
})();                                                                                                                  // 10466
(function(){                                                                                                           // 10467
"use strict";                                                                                                          // 10468
                                                                                                                       // 10469
/**                                                                                                                    // 10470
 * @ngdoc module                                                                                                       // 10471
 * @name material.components.toast                                                                                     // 10472
 * @description                                                                                                        // 10473
 * Toast                                                                                                               // 10474
 */                                                                                                                    // 10475
angular.module('material.components.toast', [                                                                          // 10476
  'material.core',                                                                                                     // 10477
  'material.components.button'                                                                                         // 10478
])                                                                                                                     // 10479
  .directive('mdToast', MdToastDirective)                                                                              // 10480
  .provider('$mdToast', MdToastProvider);                                                                              // 10481
                                                                                                                       // 10482
function MdToastDirective() {                                                                                          // 10483
  return {                                                                                                             // 10484
    restrict: 'E'                                                                                                      // 10485
  };                                                                                                                   // 10486
}                                                                                                                      // 10487
                                                                                                                       // 10488
/**                                                                                                                    // 10489
 * @ngdoc service                                                                                                      // 10490
 * @name $mdToast                                                                                                      // 10491
 * @module material.components.toast                                                                                   // 10492
 *                                                                                                                     // 10493
 * @description                                                                                                        // 10494
 * `$mdToast` is a service to build a toast notification on any position                                               // 10495
 * on the screen with an optional duration, and provides a simple promise API.                                         // 10496
 *                                                                                                                     // 10497
 *                                                                                                                     // 10498
 * ## Restrictions on custom toasts                                                                                    // 10499
 * - The toast's template must have an outer `<md-toast>` element.                                                     // 10500
 * - For a toast action, use element with class `md-action`.                                                           // 10501
 * - Add the class `md-capsule` for curved corners.                                                                    // 10502
 *                                                                                                                     // 10503
 * @usage                                                                                                              // 10504
 * <hljs lang="html">                                                                                                  // 10505
 * <div ng-controller="MyController">                                                                                  // 10506
 *   <md-button ng-click="openToast()">                                                                                // 10507
 *     Open a Toast!                                                                                                   // 10508
 *   </md-button>                                                                                                      // 10509
 * </div>                                                                                                              // 10510
 * </hljs>                                                                                                             // 10511
 *                                                                                                                     // 10512
 * <hljs lang="js">                                                                                                    // 10513
 * var app = angular.module('app', ['ngMaterial']);                                                                    // 10514
 * app.controller('MyController', function($scope, $mdToast) {                                                         // 10515
 *   $scope.openToast = function($event) {                                                                             // 10516
 *     $mdToast.show($mdToast.simple().content('Hello!'));                                                             // 10517
 *     // Could also do $mdToast.showSimple('Hello');                                                                  // 10518
 *   };                                                                                                                // 10519
 * });                                                                                                                 // 10520
 * </hljs>                                                                                                             // 10521
 */                                                                                                                    // 10522
                                                                                                                       // 10523
/**                                                                                                                    // 10524
 * @ngdoc method                                                                                                       // 10525
 * @name $mdToast#showSimple                                                                                           // 10526
 *                                                                                                                     // 10527
 * @description                                                                                                        // 10528
 * Convenience method which builds and shows a simple toast.                                                           // 10529
 *                                                                                                                     // 10530
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or                                         // 10531
 * rejected with `$mdToast.cancel()`.                                                                                  // 10532
 *                                                                                                                     // 10533
 */                                                                                                                    // 10534
                                                                                                                       // 10535
 /**                                                                                                                   // 10536
 * @ngdoc method                                                                                                       // 10537
 * @name $mdToast#simple                                                                                               // 10538
 *                                                                                                                     // 10539
 * @description                                                                                                        // 10540
 * Builds a preconfigured toast.                                                                                       // 10541
 *                                                                                                                     // 10542
 * @returns {obj} a `$mdToastPreset` with the chainable configuration methods:                                         // 10543
 *                                                                                                                     // 10544
 * - $mdToastPreset#content(string) - sets toast content to string                                                     // 10545
 * - $mdToastPreset#action(string) - adds an action button, which resolves the promise returned from `show()` if clicked.
 * - $mdToastPreset#highlightAction(boolean) - sets action button to be highlighted                                    // 10547
 * - $mdToastPreset#capsule(boolean) - adds 'md-capsule' class to the toast (curved corners)                           // 10548
 * - $mdToastPreset#theme(boolean) - sets the theme on the toast to theme (default is `$mdThemingProvider`'s default theme)
 */                                                                                                                    // 10550
                                                                                                                       // 10551
/**                                                                                                                    // 10552
 * @ngdoc method                                                                                                       // 10553
 * @name $mdToast#updateContent                                                                                        // 10554
 *                                                                                                                     // 10555
 * @description                                                                                                        // 10556
 * Updates the content of an existing toast. Useful for updating things like counts, etc.                              // 10557
 *                                                                                                                     // 10558
 */                                                                                                                    // 10559
                                                                                                                       // 10560
 /**                                                                                                                   // 10561
 * @ngdoc method                                                                                                       // 10562
 * @name $mdToast#build                                                                                                // 10563
 *                                                                                                                     // 10564
 * @description                                                                                                        // 10565
 * Creates a custom `$mdToastPreset` that you can configure.                                                           // 10566
 *                                                                                                                     // 10567
 * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).          // 10568
 */                                                                                                                    // 10569
                                                                                                                       // 10570
 /**                                                                                                                   // 10571
 * @ngdoc method                                                                                                       // 10572
 * @name $mdToast#show                                                                                                 // 10573
 *                                                                                                                     // 10574
 * @description Shows the toast.                                                                                       // 10575
 *                                                                                                                     // 10576
 * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`                         // 10577
 * and `build()`, or an options object with the following properties:                                                  // 10578
 *                                                                                                                     // 10579
 *   - `templateUrl` - `{string=}`: The url of an html template file that will                                         // 10580
 *     be used as the content of the toast. Restrictions: the template must                                            // 10581
 *     have an outer `md-toast` element.                                                                               // 10582
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual                                         // 10583
 *     template string.                                                                                                // 10584
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
 *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.                   // 10586
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false     // 10587
 *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay                                          // 10588
 *     active before automatically closing.  Set to 0 or false to have the toast stay open until                       // 10589
 *     closed manually. Default: 3000.                                                                                 // 10590
 *   - `position` - `{string=}`: Where to place the toast. Available: any combination                                  // 10591
 *     of 'bottom', 'left', 'top', 'right', 'fit'. Default: 'bottom left'.                                             // 10592
 *   - `controller` - `{string=}`: The controller to associate with this toast.                                        // 10593
 *     The controller will be injected the local `$hideToast`, which is a function                                     // 10594
 *     used to hide the toast.                                                                                         // 10595
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will                                     // 10596
 *     be used as names of values to inject into the controller. For example,                                          // 10597
 *     `locals: {three: 3}` would inject `three` into the controller with the value                                    // 10598
 *     of 3.                                                                                                           // 10599
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values                                  // 10601
 *     and the toast will not open until the promises resolve.                                                         // 10602
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                                // 10603
 *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending                              // 10604
 *     to the root element of the application.                                                                         // 10605
 *                                                                                                                     // 10606
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or                                         // 10607
 * rejected with `$mdToast.cancel()`.                                                                                  // 10608
 */                                                                                                                    // 10609
                                                                                                                       // 10610
/**                                                                                                                    // 10611
 * @ngdoc method                                                                                                       // 10612
 * @name $mdToast#hide                                                                                                 // 10613
 *                                                                                                                     // 10614
 * @description                                                                                                        // 10615
 * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.                                     // 10616
 *                                                                                                                     // 10617
 * @param {*=} response An argument for the resolved promise.                                                          // 10618
 *                                                                                                                     // 10619
 * @returns {promise} a promise that is called when the existing element is removed from the DOM                       // 10620
 *                                                                                                                     // 10621
 */                                                                                                                    // 10622
                                                                                                                       // 10623
/**                                                                                                                    // 10624
 * @ngdoc method                                                                                                       // 10625
 * @name $mdToast#cancel                                                                                               // 10626
 *                                                                                                                     // 10627
 * @description                                                                                                        // 10628
 * Hide the existing toast and reject the promise returned from                                                        // 10629
 * `$mdToast.show()`.                                                                                                  // 10630
 *                                                                                                                     // 10631
 * @param {*=} response An argument for the rejected promise.                                                          // 10632
 *                                                                                                                     // 10633
 * @returns {promise} a promise that is called when the existing element is removed from the DOM                       // 10634
 *                                                                                                                     // 10635
 */                                                                                                                    // 10636
                                                                                                                       // 10637
function MdToastProvider($$interimElementProvider) {                                                                   // 10638
  var activeToastContent;                                                                                              // 10639
  var $mdToast = $$interimElementProvider('$mdToast')                                                                  // 10640
    .setDefaults({                                                                                                     // 10641
      methods: ['position', 'hideDelay', 'capsule' ],                                                                  // 10642
      options: toastDefaultOptions                                                                                     // 10643
    })                                                                                                                 // 10644
    .addPreset('simple', {                                                                                             // 10645
      argOption: 'content',                                                                                            // 10646
      methods: ['content', 'action', 'highlightAction', 'theme', 'parent'],                                            // 10647
      options: /* @ngInject */ ["$mdToast", "$mdTheming", function($mdToast, $mdTheming) {                             // 10648
        var opts = {                                                                                                   // 10649
          template: [                                                                                                  // 10650
            '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">',                      // 10651
              '<span flex>{{ toast.content }}</span>',                                                                 // 10652
              '<md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">',
                '{{ toast.action }}',                                                                                  // 10654
              '</md-button>',                                                                                          // 10655
            '</md-toast>'                                                                                              // 10656
          ].join(''),                                                                                                  // 10657
          controller: /* @ngInject */ ["$scope", function mdToastCtrl($scope) {                                        // 10658
            var self = this;                                                                                           // 10659
            $scope.$watch(function() { return activeToastContent; }, function() {                                      // 10660
              self.content = activeToastContent;                                                                       // 10661
            });                                                                                                        // 10662
            this.resolve = function() {                                                                                // 10663
              $mdToast.hide();                                                                                         // 10664
            };                                                                                                         // 10665
          }],                                                                                                          // 10666
          theme: $mdTheming.defaultTheme(),                                                                            // 10667
          controllerAs: 'toast',                                                                                       // 10668
          bindToController: true                                                                                       // 10669
        };                                                                                                             // 10670
        return opts;                                                                                                   // 10671
      }]                                                                                                               // 10672
    })                                                                                                                 // 10673
    .addMethod('updateContent', function(newContent) {                                                                 // 10674
      activeToastContent = newContent;                                                                                 // 10675
    });                                                                                                                // 10676
                                                                                                                       // 10677
  toastDefaultOptions.$inject = ["$timeout", "$animate", "$mdToast", "$mdUtil"];                                       // 10678
    return $mdToast;                                                                                                   // 10679
                                                                                                                       // 10680
  /* @ngInject */                                                                                                      // 10681
  function toastDefaultOptions($timeout, $animate, $mdToast, $mdUtil) {                                                // 10682
    return {                                                                                                           // 10683
      onShow: onShow,                                                                                                  // 10684
      onRemove: onRemove,                                                                                              // 10685
      position: 'bottom left',                                                                                         // 10686
      themable: true,                                                                                                  // 10687
      hideDelay: 3000                                                                                                  // 10688
    };                                                                                                                 // 10689
                                                                                                                       // 10690
    function onShow(scope, element, options) {                                                                         // 10691
      element = $mdUtil.extractElementByName(element, 'md-toast');                                                     // 10692
                                                                                                                       // 10693
      // 'top left' -> 'md-top md-left'                                                                                // 10694
      activeToastContent = options.content;                                                                            // 10695
      element.addClass(options.position.split(' ').map(function(pos) {                                                 // 10696
        return 'md-' + pos;                                                                                            // 10697
      }).join(' '));                                                                                                   // 10698
      options.parent.addClass(toastOpenClass(options.position));                                                       // 10699
                                                                                                                       // 10700
      options.onSwipe = function(ev, gesture) {                                                                        // 10701
        //Add swipeleft/swiperight class to element so it can animate correctly                                        // 10702
        element.addClass('md-' + ev.type.replace('$md.',''));                                                          // 10703
        $timeout($mdToast.cancel);                                                                                     // 10704
      };                                                                                                               // 10705
      element.on('$md.swipeleft $md.swiperight', options.onSwipe);                                                     // 10706
      return $animate.enter(element, options.parent);                                                                  // 10707
    }                                                                                                                  // 10708
                                                                                                                       // 10709
    function onRemove(scope, element, options) {                                                                       // 10710
      element.off('$md.swipeleft $md.swiperight', options.onSwipe);                                                    // 10711
      options.parent.removeClass(toastOpenClass(options.position));                                                    // 10712
      return $animate.leave(element);                                                                                  // 10713
    }                                                                                                                  // 10714
                                                                                                                       // 10715
    function toastOpenClass(position) {                                                                                // 10716
      return 'md-toast-open-' +                                                                                        // 10717
        (position.indexOf('top') > -1 ? 'top' : 'bottom');                                                             // 10718
    }                                                                                                                  // 10719
  }                                                                                                                    // 10720
                                                                                                                       // 10721
}                                                                                                                      // 10722
MdToastProvider.$inject = ["$$interimElementProvider"];                                                                // 10723
                                                                                                                       // 10724
})();                                                                                                                  // 10725
(function(){                                                                                                           // 10726
"use strict";                                                                                                          // 10727
                                                                                                                       // 10728
/**                                                                                                                    // 10729
 * @ngdoc module                                                                                                       // 10730
 * @name material.components.tabs                                                                                      // 10731
 * @description                                                                                                        // 10732
 *                                                                                                                     // 10733
 *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.                    // 10734
 *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.                          // 10735
 *                                                                                                                     // 10736
 *  Features include support for:                                                                                      // 10737
 *                                                                                                                     // 10738
 *  - static or dynamic tabs,                                                                                          // 10739
 *  - responsive designs,                                                                                              // 10740
 *  - accessibility support (ARIA),                                                                                    // 10741
 *  - tab pagination,                                                                                                  // 10742
 *  - external or internal tab content,                                                                                // 10743
 *  - focus indicators and arrow-key navigations,                                                                      // 10744
 *  - programmatic lookup and access to tab controllers, and                                                           // 10745
 *  - dynamic transitions through different tab contents.                                                              // 10746
 *                                                                                                                     // 10747
 */                                                                                                                    // 10748
/*                                                                                                                     // 10749
 * @see js folder for tabs implementation                                                                              // 10750
 */                                                                                                                    // 10751
angular.module('material.components.tabs', [                                                                           // 10752
  'material.core',                                                                                                     // 10753
  'material.components.icon'                                                                                           // 10754
]);                                                                                                                    // 10755
                                                                                                                       // 10756
})();                                                                                                                  // 10757
(function(){                                                                                                           // 10758
"use strict";                                                                                                          // 10759
                                                                                                                       // 10760
/**                                                                                                                    // 10761
 * @ngdoc module                                                                                                       // 10762
 * @name material.components.toolbar                                                                                   // 10763
 */                                                                                                                    // 10764
angular.module('material.components.toolbar', [                                                                        // 10765
  'material.core',                                                                                                     // 10766
  'material.components.content'                                                                                        // 10767
])                                                                                                                     // 10768
  .directive('mdToolbar', mdToolbarDirective);                                                                         // 10769
                                                                                                                       // 10770
/**                                                                                                                    // 10771
 * @ngdoc directive                                                                                                    // 10772
 * @name mdToolbar                                                                                                     // 10773
 * @module material.components.toolbar                                                                                 // 10774
 * @restrict E                                                                                                         // 10775
 * @description                                                                                                        // 10776
 * `md-toolbar` is used to place a toolbar in your app.                                                                // 10777
 *                                                                                                                     // 10778
 * Toolbars are usually used above a content area to display the title of the                                          // 10779
 * current page, and show relevant action buttons for that page.                                                       // 10780
 *                                                                                                                     // 10781
 * You can change the height of the toolbar by adding either the                                                       // 10782
 * `md-medium-tall` or `md-tall` class to the toolbar.                                                                 // 10783
 *                                                                                                                     // 10784
 * @usage                                                                                                              // 10785
 * <hljs lang="html">                                                                                                  // 10786
 * <div layout="column" layout-fill>                                                                                   // 10787
 *   <md-toolbar>                                                                                                      // 10788
 *                                                                                                                     // 10789
 *     <div class="md-toolbar-tools">                                                                                  // 10790
 *       <span>My App's Title</span>                                                                                   // 10791
 *                                                                                                                     // 10792
 *       <!-- fill up the space between left and right area -->                                                        // 10793
 *       <span flex></span>                                                                                            // 10794
 *                                                                                                                     // 10795
 *       <md-button>                                                                                                   // 10796
 *         Right Bar Button                                                                                            // 10797
 *       </md-button>                                                                                                  // 10798
 *     </div>                                                                                                          // 10799
 *                                                                                                                     // 10800
 *   </md-toolbar>                                                                                                     // 10801
 *   <md-content>                                                                                                      // 10802
 *     Hello!                                                                                                          // 10803
 *   </md-content>                                                                                                     // 10804
 * </div>                                                                                                              // 10805
 * </hljs>                                                                                                             // 10806
 *                                                                                                                     // 10807
 * @param {boolean=} md-scroll-shrink Whether the header should shrink away as                                         // 10808
 * the user scrolls down, and reveal itself as the user scrolls up.                                                    // 10809
 * Note: for scrollShrink to work, the toolbar must be a sibling of a                                                  // 10810
 * `md-content` element, placed before it. See the scroll shrink demo.                                                 // 10811
 *                                                                                                                     // 10812
 *                                                                                                                     // 10813
 * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's                               // 10814
 * shrinking by. For example, if 0.25 is given then the toolbar will shrink                                            // 10815
 * at one fourth the rate at which the user scrolls down. Default 0.5.                                                 // 10816
 */                                                                                                                    // 10817
function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate, $timeout) {                             // 10818
                                                                                                                       // 10819
  return {                                                                                                             // 10820
    restrict: 'E',                                                                                                     // 10821
    controller: angular.noop,                                                                                          // 10822
    link: function(scope, element, attr) {                                                                             // 10823
      $mdTheming(element);                                                                                             // 10824
                                                                                                                       // 10825
      if (angular.isDefined(attr.mdScrollShrink)) {                                                                    // 10826
        setupScrollShrink();                                                                                           // 10827
      }                                                                                                                // 10828
                                                                                                                       // 10829
      function setupScrollShrink() {                                                                                   // 10830
        // Current "y" position of scroll                                                                              // 10831
        var y = 0;                                                                                                     // 10832
        // Store the last scroll top position                                                                          // 10833
        var prevScrollTop = 0;                                                                                         // 10834
                                                                                                                       // 10835
        var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;                                                       // 10836
                                                                                                                       // 10837
        var toolbarHeight;                                                                                             // 10838
        var contentElement;                                                                                            // 10839
                                                                                                                       // 10840
        var debouncedContentScroll = $$rAF.throttle(onContentScroll);                                                  // 10841
        var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);                                   // 10842
                                                                                                                       // 10843
        // Wait for $mdContentLoaded event from mdContent directive.                                                   // 10844
        // If the mdContent element is a sibling of our toolbar, hook it up                                            // 10845
        // to scroll events.                                                                                           // 10846
        scope.$on('$mdContentLoaded', onMdContentLoad);                                                                // 10847
                                                                                                                       // 10848
        function onMdContentLoad($event, newContentEl) {                                                               // 10849
          // Toolbar and content must be siblings                                                                      // 10850
          if (element.parent()[0] === newContentEl.parent()[0]) {                                                      // 10851
            // unhook old content event listener if exists                                                             // 10852
            if (contentElement) {                                                                                      // 10853
              contentElement.off('scroll', debouncedContentScroll);                                                    // 10854
            }                                                                                                          // 10855
                                                                                                                       // 10856
            newContentEl.on('scroll', debouncedContentScroll);                                                         // 10857
            newContentEl.attr('scroll-shrink', 'true');                                                                // 10858
                                                                                                                       // 10859
            contentElement = newContentEl;                                                                             // 10860
            $$rAF(updateToolbarHeight);                                                                                // 10861
          }                                                                                                            // 10862
        }                                                                                                              // 10863
                                                                                                                       // 10864
        function updateToolbarHeight() {                                                                               // 10865
          toolbarHeight = element.prop('offsetHeight');                                                                // 10866
          // Add a negative margin-top the size of the toolbar to the content el.                                      // 10867
          // The content will start transformed down the toolbarHeight amount,                                         // 10868
          // so everything looks normal.                                                                               // 10869
          //                                                                                                           // 10870
          // As the user scrolls down, the content will be transformed up slowly                                       // 10871
          // to put the content underneath where the toolbar was.                                                      // 10872
          var margin =  (-toolbarHeight * shrinkSpeedFactor) + 'px';                                                   // 10873
          contentElement.css('margin-top', margin);                                                                    // 10874
          contentElement.css('margin-bottom', margin);                                                                 // 10875
                                                                                                                       // 10876
          onContentScroll();                                                                                           // 10877
        }                                                                                                              // 10878
                                                                                                                       // 10879
        function onContentScroll(e) {                                                                                  // 10880
          var scrollTop = e ? e.target.scrollTop : prevScrollTop;                                                      // 10881
                                                                                                                       // 10882
          debouncedUpdateHeight();                                                                                     // 10883
                                                                                                                       // 10884
          y = Math.min(                                                                                                // 10885
            toolbarHeight / shrinkSpeedFactor,                                                                         // 10886
            Math.max(0, y + scrollTop - prevScrollTop)                                                                 // 10887
          );                                                                                                           // 10888
                                                                                                                       // 10889
          element.css(                                                                                                 // 10890
            $mdConstant.CSS.TRANSFORM,                                                                                 // 10891
            'translate3d(0,' + (-y * shrinkSpeedFactor) + 'px,0)'                                                      // 10892
          );                                                                                                           // 10893
          contentElement.css(                                                                                          // 10894
            $mdConstant.CSS.TRANSFORM,                                                                                 // 10895
            'translate3d(0,' + ((toolbarHeight - y) * shrinkSpeedFactor) + 'px,0)'                                     // 10896
          );                                                                                                           // 10897
                                                                                                                       // 10898
          prevScrollTop = scrollTop;                                                                                   // 10899
                                                                                                                       // 10900
            if (element.hasClass('md-whiteframe-z1')) {                                                                // 10901
              if (!y) {                                                                                                // 10902
                $timeout(function () { $animate.removeClass(element, 'md-whiteframe-z1'); });                          // 10903
              }                                                                                                        // 10904
            } else {                                                                                                   // 10905
              if (y) {                                                                                                 // 10906
                $timeout(function () { $animate.addClass(element, 'md-whiteframe-z1'); });                             // 10907
              }                                                                                                        // 10908
            }                                                                                                          // 10909
        }                                                                                                              // 10910
                                                                                                                       // 10911
      }                                                                                                                // 10912
                                                                                                                       // 10913
    }                                                                                                                  // 10914
  };                                                                                                                   // 10915
                                                                                                                       // 10916
}                                                                                                                      // 10917
mdToolbarDirective.$inject = ["$$rAF", "$mdConstant", "$mdUtil", "$mdTheming", "$animate", "$timeout"];                // 10918
                                                                                                                       // 10919
})();                                                                                                                  // 10920
(function(){                                                                                                           // 10921
"use strict";                                                                                                          // 10922
                                                                                                                       // 10923
/**                                                                                                                    // 10924
 * @ngdoc module                                                                                                       // 10925
 * @name material.components.tooltip                                                                                   // 10926
 */                                                                                                                    // 10927
angular                                                                                                                // 10928
    .module('material.components.tooltip', [ 'material.core' ])                                                        // 10929
    .directive('mdTooltip', MdTooltipDirective);                                                                       // 10930
                                                                                                                       // 10931
/**                                                                                                                    // 10932
 * @ngdoc directive                                                                                                    // 10933
 * @name mdTooltip                                                                                                     // 10934
 * @module material.components.tooltip                                                                                 // 10935
 * @description                                                                                                        // 10936
 * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).                  // 10937
 *                                                                                                                     // 10938
 * Place a `<md-tooltip>` as a child of the element it describes.                                                      // 10939
 *                                                                                                                     // 10940
 * A tooltip will activate when the user focuses, hovers over, or touches the parent.                                  // 10941
 *                                                                                                                     // 10942
 * @usage                                                                                                              // 10943
 * <hljs lang="html">                                                                                                  // 10944
 * <md-button class="md-fab md-accent" aria-label="Play">                                                              // 10945
 *   <md-tooltip>                                                                                                      // 10946
 *     Play Music                                                                                                      // 10947
 *   </md-tooltip>                                                                                                     // 10948
 *   <md-icon icon="img/icons/ic_play_arrow_24px.svg"></md-icon>                                                       // 10949
 * </md-button>                                                                                                        // 10950
 * </hljs>                                                                                                             // 10951
 *                                                                                                                     // 10952
 * @param {expression=} md-visible Boolean bound to whether the tooltip is                                             // 10953
 * currently visible.                                                                                                  // 10954
 * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 400ms.
 * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.
 * @param {boolean=} md-autohide If present or provided with a boolean value, the tooltip will hide on mouse leave, regardless of focus
 */                                                                                                                    // 10958
function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement, $animate, $q) {    // 10959
                                                                                                                       // 10960
  var TOOLTIP_SHOW_DELAY = 300;                                                                                        // 10961
  var TOOLTIP_WINDOW_EDGE_SPACE = 8;                                                                                   // 10962
                                                                                                                       // 10963
  return {                                                                                                             // 10964
    restrict: 'E',                                                                                                     // 10965
    transclude: true,                                                                                                  // 10966
    priority:210, // Before ngAria                                                                                     // 10967
    template: '\
        <div class="md-background"></div>\
        <div class="md-content" ng-transclude></div>',                                                                 // 10970
    scope: {                                                                                                           // 10971
      visible: '=?mdVisible',                                                                                          // 10972
      delay: '=?mdDelay',                                                                                              // 10973
      autohide: '=?mdAutohide'                                                                                         // 10974
    },                                                                                                                 // 10975
    link: postLink                                                                                                     // 10976
  };                                                                                                                   // 10977
                                                                                                                       // 10978
  function postLink(scope, element, attr) {                                                                            // 10979
                                                                                                                       // 10980
    $mdTheming(element);                                                                                               // 10981
                                                                                                                       // 10982
    var parent        = getParentWithPointerEvents(),                                                                  // 10983
        background    = angular.element(element[0].getElementsByClassName('md-background')[0]),                        // 10984
        content       = angular.element(element[0].getElementsByClassName('md-content')[0]),                           // 10985
        direction     = attr.mdDirection,                                                                              // 10986
        current       = getNearestContentElement(),                                                                    // 10987
        tooltipParent = angular.element(current || document.body),                                                     // 10988
        debouncedOnResize = $$rAF.throttle(function () { if (scope.visible) positionTooltip(); });                     // 10989
                                                                                                                       // 10990
    return init();                                                                                                     // 10991
                                                                                                                       // 10992
    function init () {                                                                                                 // 10993
      setDefaults();                                                                                                   // 10994
      manipulateElement();                                                                                             // 10995
      bindEvents();                                                                                                    // 10996
      configureWatchers();                                                                                             // 10997
      addAriaLabel();                                                                                                  // 10998
    }                                                                                                                  // 10999
                                                                                                                       // 11000
    function setDefaults () {                                                                                          // 11001
      if (!angular.isDefined(attr.mdDelay)) scope.delay = TOOLTIP_SHOW_DELAY;                                          // 11002
    }                                                                                                                  // 11003
                                                                                                                       // 11004
    function configureWatchers () {                                                                                    // 11005
      scope.$on('$destroy', function() {                                                                               // 11006
        scope.visible = false;                                                                                         // 11007
        element.remove();                                                                                              // 11008
        angular.element($window).off('resize', debouncedOnResize);                                                     // 11009
      });                                                                                                              // 11010
      scope.$watch('visible', function (isVisible) {                                                                   // 11011
        if (isVisible) showTooltip();                                                                                  // 11012
        else hideTooltip();                                                                                            // 11013
      });                                                                                                              // 11014
    }                                                                                                                  // 11015
                                                                                                                       // 11016
    function addAriaLabel () {                                                                                         // 11017
      if (!parent.attr('aria-label') && !parent.text().trim()) {                                                       // 11018
        parent.attr('aria-label', element.text().trim());                                                              // 11019
      }                                                                                                                // 11020
    }                                                                                                                  // 11021
                                                                                                                       // 11022
    function manipulateElement () {                                                                                    // 11023
      element.detach();                                                                                                // 11024
      element.attr('role', 'tooltip');                                                                                 // 11025
    }                                                                                                                  // 11026
                                                                                                                       // 11027
    function getParentWithPointerEvents () {                                                                           // 11028
      var parent = element.parent();                                                                                   // 11029
      while (parent && $window.getComputedStyle(parent[0])['pointer-events'] == 'none') {                              // 11030
        parent = parent.parent();                                                                                      // 11031
      }                                                                                                                // 11032
      return parent;                                                                                                   // 11033
    }                                                                                                                  // 11034
                                                                                                                       // 11035
    function getNearestContentElement () {                                                                             // 11036
      var current = element.parent()[0];                                                                               // 11037
      // Look for the nearest parent md-content, stopping at the rootElement.                                          // 11038
      while (current && current !== $rootElement[0] && current !== document.body) {                                    // 11039
        if (current.tagName && current.tagName.toLowerCase() == 'md-content') break;                                   // 11040
        current = current.parentNode;                                                                                  // 11041
      }                                                                                                                // 11042
      return current;                                                                                                  // 11043
    }                                                                                                                  // 11044
                                                                                                                       // 11045
    function hasComputedStyleValue(key, value) {                                                                       // 11046
        // Check if we should show it or not...                                                                        // 11047
        var computedStyles = $window.getComputedStyle(element[0]);                                                     // 11048
        return angular.isDefined(computedStyles[key]) && (computedStyles[key] == value);                               // 11049
    }                                                                                                                  // 11050
                                                                                                                       // 11051
    function bindEvents () {                                                                                           // 11052
      var mouseActive = false;                                                                                         // 11053
      var enterHandler = function() {                                                                                  // 11054
        if (!hasComputedStyleValue('pointer-events','none')) {                                                         // 11055
          setVisible(true);                                                                                            // 11056
        }                                                                                                              // 11057
      };                                                                                                               // 11058
      var leaveHandler = function () {                                                                                 // 11059
        var autohide = scope.hasOwnProperty('autohide') ? scope.autohide : attr.hasOwnProperty('mdAutohide');          // 11060
        if (autohide || mouseActive || ($document[0].activeElement !== parent[0]) ) {                                  // 11061
          setVisible(false);                                                                                           // 11062
        }                                                                                                              // 11063
        mouseActive = false;                                                                                           // 11064
      };                                                                                                               // 11065
                                                                                                                       // 11066
      // to avoid `synthetic clicks` we listen to mousedown instead of `click`                                         // 11067
      parent.on('mousedown', function() { mouseActive = true; });                                                      // 11068
      parent.on('focus mouseenter touchstart', enterHandler );                                                         // 11069
      parent.on('blur mouseleave touchend touchcancel', leaveHandler );                                                // 11070
                                                                                                                       // 11071
                                                                                                                       // 11072
      angular.element($window).on('resize', debouncedOnResize);                                                        // 11073
    }                                                                                                                  // 11074
                                                                                                                       // 11075
    function setVisible (value) {                                                                                      // 11076
      setVisible.value = !!value;                                                                                      // 11077
      if (!setVisible.queued) {                                                                                        // 11078
        if (value) {                                                                                                   // 11079
          setVisible.queued = true;                                                                                    // 11080
          $timeout(function() {                                                                                        // 11081
            scope.visible = setVisible.value;                                                                          // 11082
            setVisible.queued = false;                                                                                 // 11083
          }, scope.delay);                                                                                             // 11084
        } else {                                                                                                       // 11085
          $timeout(function() { scope.visible = false; });                                                             // 11086
        }                                                                                                              // 11087
      }                                                                                                                // 11088
    }                                                                                                                  // 11089
                                                                                                                       // 11090
    function showTooltip() {                                                                                           // 11091
      // Insert the element before positioning it, so we can get the position                                          // 11092
      // and check if we should display it                                                                             // 11093
      tooltipParent.append(element);                                                                                   // 11094
                                                                                                                       // 11095
      // Check if we should display it or not.                                                                         // 11096
      // This handles hide-* and show-* along with any user defined css                                                // 11097
      if ( hasComputedStyleValue('display','none') ) {                                                                 // 11098
        scope.visible = false;                                                                                         // 11099
        element.detach();                                                                                              // 11100
        return;                                                                                                        // 11101
      }                                                                                                                // 11102
                                                                                                                       // 11103
      positionTooltip();                                                                                               // 11104
      angular.forEach([element, background, content], function (element) {                                             // 11105
        $animate.addClass(element, 'md-show');                                                                         // 11106
      });                                                                                                              // 11107
    }                                                                                                                  // 11108
                                                                                                                       // 11109
    function hideTooltip() {                                                                                           // 11110
      $q.all([                                                                                                         // 11111
        $animate.removeClass(content, 'md-show'),                                                                      // 11112
        $animate.removeClass(background, 'md-show'),                                                                   // 11113
        $animate.removeClass(element, 'md-show')                                                                       // 11114
      ]).then(function () {                                                                                            // 11115
        if (!scope.visible) element.detach();                                                                          // 11116
      });                                                                                                              // 11117
    }                                                                                                                  // 11118
                                                                                                                       // 11119
    function positionTooltip() {                                                                                       // 11120
      var tipRect = $mdUtil.offsetRect(element, tooltipParent);                                                        // 11121
      var parentRect = $mdUtil.offsetRect(parent, tooltipParent);                                                      // 11122
      var newPosition = getPosition(direction);                                                                        // 11123
                                                                                                                       // 11124
      // If the user provided a direction, just nudge the tooltip onto the screen                                      // 11125
      // Otherwise, recalculate based on 'top' since default is 'bottom'                                               // 11126
      if (direction) {                                                                                                 // 11127
        newPosition = fitInParent(newPosition);                                                                        // 11128
      } else if (newPosition.top > element.prop('offsetParent').scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE) {
        newPosition = fitInParent(getPosition('top'));                                                                 // 11130
      }                                                                                                                // 11131
                                                                                                                       // 11132
      element.css({top: newPosition.top + 'px', left: newPosition.left + 'px'});                                       // 11133
                                                                                                                       // 11134
      positionBackground();                                                                                            // 11135
                                                                                                                       // 11136
      function positionBackground () {                                                                                 // 11137
        var size = direction === 'left' || direction === 'right'                                                       // 11138
              ? Math.sqrt(Math.pow(tipRect.width, 2) + Math.pow(tipRect.height / 2, 2)) * 2                            // 11139
              : Math.sqrt(Math.pow(tipRect.width / 2, 2) + Math.pow(tipRect.height, 2)) * 2,                           // 11140
            position = direction === 'left' ? { left: 100, top: 50 }                                                   // 11141
              : direction === 'right' ? { left: 0, top: 50 }                                                           // 11142
              : direction === 'top' ? { left: 50, top: 100 }                                                           // 11143
              : { left: 50, top: 0 };                                                                                  // 11144
        background.css({                                                                                               // 11145
          width: size + 'px',                                                                                          // 11146
          height: size + 'px',                                                                                         // 11147
          left: position.left + '%',                                                                                   // 11148
          top: position.top + '%'                                                                                      // 11149
        });                                                                                                            // 11150
      }                                                                                                                // 11151
                                                                                                                       // 11152
      function fitInParent (pos) {                                                                                     // 11153
        var newPosition = { left: pos.left, top: pos.top };                                                            // 11154
        newPosition.left = Math.min( newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.left = Math.max( newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE );                                    // 11156
        newPosition.top  = Math.min( newPosition.top,  tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.top  = Math.max( newPosition.top,  TOOLTIP_WINDOW_EDGE_SPACE );                                    // 11158
        return newPosition;                                                                                            // 11159
      }                                                                                                                // 11160
                                                                                                                       // 11161
      function getPosition (dir) {                                                                                     // 11162
        return dir === 'left'                                                                                          // 11163
          ? { left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,                                       // 11164
              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }                                       // 11165
          : dir === 'right'                                                                                            // 11166
          ? { left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,                                    // 11167
              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }                                       // 11168
          : dir === 'top'                                                                                              // 11169
          ? { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,                                        // 11170
              top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE }                                       // 11171
          : { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,                                        // 11172
              top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE };                                   // 11173
      }                                                                                                                // 11174
    }                                                                                                                  // 11175
                                                                                                                       // 11176
  }                                                                                                                    // 11177
                                                                                                                       // 11178
}                                                                                                                      // 11179
MdTooltipDirective.$inject = ["$timeout", "$window", "$$rAF", "$document", "$mdUtil", "$mdTheming", "$rootElement", "$animate", "$q"];
                                                                                                                       // 11181
})();                                                                                                                  // 11182
(function(){                                                                                                           // 11183
"use strict";                                                                                                          // 11184
                                                                                                                       // 11185
/**                                                                                                                    // 11186
 * @ngdoc module                                                                                                       // 11187
 * @name material.components.whiteframe                                                                                // 11188
 */                                                                                                                    // 11189
angular.module('material.components.whiteframe', []);                                                                  // 11190
                                                                                                                       // 11191
})();                                                                                                                  // 11192
(function(){                                                                                                           // 11193
"use strict";                                                                                                          // 11194
                                                                                                                       // 11195
angular                                                                                                                // 11196
    .module('material.components.autocomplete')                                                                        // 11197
    .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);                                                             // 11198
                                                                                                                       // 11199
var ITEM_HEIGHT = 41,                                                                                                  // 11200
    MAX_HEIGHT = 5.5 * ITEM_HEIGHT,                                                                                    // 11201
    MENU_PADDING = 8;                                                                                                  // 11202
                                                                                                                       // 11203
function MdAutocompleteCtrl ($scope, $element, $mdUtil, $mdConstant, $timeout, $mdTheming, $window, $animate, $rootElement) {
                                                                                                                       // 11205
  //-- private variables                                                                                               // 11206
                                                                                                                       // 11207
  var self      = this,                                                                                                // 11208
      itemParts = $scope.itemsExpr.split(/ in /i),                                                                     // 11209
      itemExpr  = itemParts[1],                                                                                        // 11210
      elements  = null,                                                                                                // 11211
      promise   = null,                                                                                                // 11212
      cache     = {},                                                                                                  // 11213
      noBlur    = false,                                                                                               // 11214
      selectedItemWatchers = [],                                                                                       // 11215
      hasFocus  = false;                                                                                               // 11216
                                                                                                                       // 11217
  //-- public variables                                                                                                // 11218
                                                                                                                       // 11219
  self.scope    = $scope;                                                                                              // 11220
  self.parent   = $scope.$parent;                                                                                      // 11221
  self.itemName = itemParts[0];                                                                                        // 11222
  self.matches  = [];                                                                                                  // 11223
  self.loading  = false;                                                                                               // 11224
  self.hidden   = true;                                                                                                // 11225
  self.index    = null;                                                                                                // 11226
  self.messages = [];                                                                                                  // 11227
  self.id       = $mdUtil.nextUid();                                                                                   // 11228
                                                                                                                       // 11229
  //-- public methods                                                                                                  // 11230
                                                                                                                       // 11231
  self.keydown  = keydown;                                                                                             // 11232
  self.blur     = blur;                                                                                                // 11233
  self.focus    = focus;                                                                                               // 11234
  self.clear    = clearValue;                                                                                          // 11235
  self.select   = select;                                                                                              // 11236
  self.getCurrentDisplayValue         = getCurrentDisplayValue;                                                        // 11237
  self.registerSelectedItemWatcher    = registerSelectedItemWatcher;                                                   // 11238
  self.unregisterSelectedItemWatcher  = unregisterSelectedItemWatcher;                                                 // 11239
                                                                                                                       // 11240
  self.listEnter = function () { noBlur = true; };                                                                     // 11241
  self.listLeave = function () {                                                                                       // 11242
    noBlur = false;                                                                                                    // 11243
    if (!hasFocus) self.hidden = true;                                                                                 // 11244
  };                                                                                                                   // 11245
  self.mouseUp   = function () { elements.input.focus(); };                                                            // 11246
                                                                                                                       // 11247
  return init();                                                                                                       // 11248
                                                                                                                       // 11249
  //-- initialization methods                                                                                          // 11250
                                                                                                                       // 11251
  function init () {                                                                                                   // 11252
    configureWatchers();                                                                                               // 11253
    $timeout(function () {                                                                                             // 11254
      gatherElements();                                                                                                // 11255
      focusElement();                                                                                                  // 11256
      moveDropdown();                                                                                                  // 11257
    });                                                                                                                // 11258
  }                                                                                                                    // 11259
                                                                                                                       // 11260
  function positionDropdown () {                                                                                       // 11261
    if (!elements) return $timeout(positionDropdown, 0, false);                                                        // 11262
    var hrect  = elements.wrap.getBoundingClientRect(),                                                                // 11263
        vrect  = elements.snap.getBoundingClientRect(),                                                                // 11264
        root   = elements.root.getBoundingClientRect(),                                                                // 11265
        top    = vrect.bottom - root.top,                                                                              // 11266
        bot    = root.bottom - vrect.top,                                                                              // 11267
        left   = hrect.left - root.left,                                                                               // 11268
        width  = hrect.width,                                                                                          // 11269
        styles = {                                                                                                     // 11270
          left:     left + 'px',                                                                                       // 11271
          minWidth: width + 'px',                                                                                      // 11272
          maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + 'px'                   // 11273
        };                                                                                                             // 11274
    if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {                                         // 11275
      styles.top = 'auto';                                                                                             // 11276
      styles.bottom = bot + 'px';                                                                                      // 11277
      styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + 'px';                             // 11278
    } else {                                                                                                           // 11279
      styles.top = top + 'px';                                                                                         // 11280
      styles.bottom = 'auto';                                                                                          // 11281
      styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom - hrect.bottom - MENU_PADDING) + 'px';                       // 11282
    }                                                                                                                  // 11283
    elements.$.ul.css(styles);                                                                                         // 11284
    $timeout(correctHorizontalAlignment, 0, false);                                                                    // 11285
                                                                                                                       // 11286
    function correctHorizontalAlignment () {                                                                           // 11287
      var dropdown = elements.ul.getBoundingClientRect(),                                                              // 11288
          styles   = {};                                                                                               // 11289
      if (dropdown.right > root.right - MENU_PADDING) {                                                                // 11290
        styles.left = (hrect.right - dropdown.width) + 'px';                                                           // 11291
      }                                                                                                                // 11292
      elements.$.ul.css(styles);                                                                                       // 11293
    }                                                                                                                  // 11294
  }                                                                                                                    // 11295
                                                                                                                       // 11296
  function moveDropdown () {                                                                                           // 11297
    if (!elements.$.root.length) return;                                                                               // 11298
    $mdTheming(elements.$.ul);                                                                                         // 11299
    elements.$.ul.detach();                                                                                            // 11300
    elements.$.root.append(elements.$.ul);                                                                             // 11301
    if ($animate.pin) $animate.pin(elements.$.ul, $rootElement);                                                       // 11302
  }                                                                                                                    // 11303
                                                                                                                       // 11304
  function focusElement () {                                                                                           // 11305
    if ($scope.autofocus) elements.input.focus();                                                                      // 11306
  }                                                                                                                    // 11307
                                                                                                                       // 11308
  function configureWatchers () {                                                                                      // 11309
    var wait = parseInt($scope.delay, 10) || 0;                                                                        // 11310
    $scope.$watch('searchText', wait                                                                                   // 11311
        ? $mdUtil.debounce(handleSearchText, wait)                                                                     // 11312
        : handleSearchText);                                                                                           // 11313
    registerSelectedItemWatcher(selectedItemChange);                                                                   // 11314
    $scope.$watch('selectedItem', handleSelectedItemChange);                                                           // 11315
    $scope.$watch('$mdAutocompleteCtrl.hidden', function (hidden, oldHidden) {                                         // 11316
      if (!hidden && oldHidden) positionDropdown();                                                                    // 11317
    });                                                                                                                // 11318
    angular.element($window).on('resize', positionDropdown);                                                           // 11319
  }                                                                                                                    // 11320
                                                                                                                       // 11321
  function gatherElements () {                                                                                         // 11322
    elements = {                                                                                                       // 11323
      main:  $element[0],                                                                                              // 11324
      ul:    $element.find('ul')[0],                                                                                   // 11325
      input: $element.find('input')[0],                                                                                // 11326
      wrap:  $element.find('md-autocomplete-wrap')[0],                                                                 // 11327
      root:  document.body                                                                                             // 11328
    };                                                                                                                 // 11329
    elements.li = elements.ul.getElementsByTagName('li');                                                              // 11330
    elements.snap = getSnapTarget();                                                                                   // 11331
    elements.$ = getAngularElements(elements);                                                                         // 11332
  }                                                                                                                    // 11333
                                                                                                                       // 11334
  function getSnapTarget () {                                                                                          // 11335
    for (var element = $element; element.length; element = element.parent()) {                                         // 11336
      if (angular.isDefined(element.attr('md-autocomplete-snap'))) return element[0];                                  // 11337
    }                                                                                                                  // 11338
    return elements.wrap;                                                                                              // 11339
  }                                                                                                                    // 11340
                                                                                                                       // 11341
  function getAngularElements (elements) {                                                                             // 11342
    var obj = {};                                                                                                      // 11343
    for (var key in elements) {                                                                                        // 11344
      obj[key] = angular.element(elements[key]);                                                                       // 11345
    }                                                                                                                  // 11346
    return obj;                                                                                                        // 11347
  }                                                                                                                    // 11348
                                                                                                                       // 11349
  //-- event/change handlers                                                                                           // 11350
                                                                                                                       // 11351
  function selectedItemChange (selectedItem, previousSelectedItem) {                                                   // 11352
    if (selectedItem) {                                                                                                // 11353
      $scope.searchText = getDisplayValue(selectedItem);                                                               // 11354
    }                                                                                                                  // 11355
    if ($scope.itemChange && selectedItem !== previousSelectedItem)                                                    // 11356
      $scope.itemChange(getItemScope(selectedItem));                                                                   // 11357
  }                                                                                                                    // 11358
                                                                                                                       // 11359
  function handleSelectedItemChange(selectedItem, previousSelectedItem) {                                              // 11360
    for (var i = 0; i < selectedItemWatchers.length; ++i) {                                                            // 11361
      selectedItemWatchers[i](selectedItem, previousSelectedItem);                                                     // 11362
    }                                                                                                                  // 11363
  }                                                                                                                    // 11364
                                                                                                                       // 11365
  /**                                                                                                                  // 11366
   * Register a function to be called when the selected item changes.                                                  // 11367
   * @param cb                                                                                                         // 11368
   */                                                                                                                  // 11369
  function registerSelectedItemWatcher(cb) {                                                                           // 11370
    if (selectedItemWatchers.indexOf(cb) == -1) {                                                                      // 11371
      selectedItemWatchers.push(cb);                                                                                   // 11372
    }                                                                                                                  // 11373
  }                                                                                                                    // 11374
                                                                                                                       // 11375
  /**                                                                                                                  // 11376
   * Unregister a function previously registered for selected item changes.                                            // 11377
   * @param cb                                                                                                         // 11378
   */                                                                                                                  // 11379
  function unregisterSelectedItemWatcher(cb) {                                                                         // 11380
    var i = selectedItemWatchers.indexOf(cb);                                                                          // 11381
    if (i != -1) {                                                                                                     // 11382
      selectedItemWatchers.splice(i, 1);                                                                               // 11383
    }                                                                                                                  // 11384
  }                                                                                                                    // 11385
                                                                                                                       // 11386
  function handleSearchText (searchText, previousSearchText) {                                                         // 11387
    self.index = getDefaultIndex();                                                                                    // 11388
    //-- do nothing on init                                                                                            // 11389
    if (searchText === previousSearchText) return;                                                                     // 11390
    //-- clear selected item if search text no longer matches it                                                       // 11391
    if (searchText !== getDisplayValue($scope.selectedItem)) $scope.selectedItem = null;                               // 11392
    else return;                                                                                                       // 11393
    //-- trigger change event if available                                                                             // 11394
    if ($scope.textChange && searchText !== previousSearchText)                                                        // 11395
      $scope.textChange(getItemScope($scope.selectedItem));                                                            // 11396
    //-- cancel results if search text is not long enough                                                              // 11397
    if (!isMinLengthMet()) {                                                                                           // 11398
      self.loading = false;                                                                                            // 11399
      self.matches = [];                                                                                               // 11400
      self.hidden = shouldHide();                                                                                      // 11401
      updateMessages();                                                                                                // 11402
    } else {                                                                                                           // 11403
      handleQuery();                                                                                                   // 11404
    }                                                                                                                  // 11405
  }                                                                                                                    // 11406
                                                                                                                       // 11407
  function blur () {                                                                                                   // 11408
    hasFocus = false;                                                                                                  // 11409
    if (!noBlur) self.hidden = true;                                                                                   // 11410
  }                                                                                                                    // 11411
                                                                                                                       // 11412
  function focus () {                                                                                                  // 11413
    hasFocus = true;                                                                                                   // 11414
    //-- if searchText is null, let's force it to be a string                                                          // 11415
    if (!angular.isString($scope.searchText)) $scope.searchText = '';                                                  // 11416
    if ($scope.minLength > 0) return;                                                                                  // 11417
    self.hidden = shouldHide();                                                                                        // 11418
    if (!self.hidden) handleQuery();                                                                                   // 11419
  }                                                                                                                    // 11420
                                                                                                                       // 11421
  function keydown (event) {                                                                                           // 11422
    switch (event.keyCode) {                                                                                           // 11423
      case $mdConstant.KEY_CODE.DOWN_ARROW:                                                                            // 11424
        if (self.loading) return;                                                                                      // 11425
        event.preventDefault();                                                                                        // 11426
        self.index = Math.min(self.index + 1, self.matches.length - 1);                                                // 11427
        updateScroll();                                                                                                // 11428
        updateMessages();                                                                                              // 11429
        break;                                                                                                         // 11430
      case $mdConstant.KEY_CODE.UP_ARROW:                                                                              // 11431
        if (self.loading) return;                                                                                      // 11432
        event.preventDefault();                                                                                        // 11433
        self.index = self.index < 0 ? self.matches.length - 1 : Math.max(0, self.index - 1);                           // 11434
        updateScroll();                                                                                                // 11435
        updateMessages();                                                                                              // 11436
        break;                                                                                                         // 11437
      case $mdConstant.KEY_CODE.TAB:                                                                                   // 11438
      case $mdConstant.KEY_CODE.ENTER:                                                                                 // 11439
        if (self.hidden || self.loading || self.index < 0 || self.matches.length < 1) return;                          // 11440
        event.preventDefault();                                                                                        // 11441
        select(self.index);                                                                                            // 11442
        break;                                                                                                         // 11443
      case $mdConstant.KEY_CODE.ESCAPE:                                                                                // 11444
        self.matches = [];                                                                                             // 11445
        self.hidden = true;                                                                                            // 11446
        self.index = getDefaultIndex();                                                                                // 11447
        break;                                                                                                         // 11448
      default:                                                                                                         // 11449
    }                                                                                                                  // 11450
  }                                                                                                                    // 11451
                                                                                                                       // 11452
  //-- getters                                                                                                         // 11453
                                                                                                                       // 11454
  function getMinLength () {                                                                                           // 11455
    return angular.isNumber($scope.minLength) ? $scope.minLength : 1;                                                  // 11456
  }                                                                                                                    // 11457
                                                                                                                       // 11458
  function getDisplayValue (item) {                                                                                    // 11459
    return (item && $scope.itemText) ? $scope.itemText(getItemScope(item)) : item;                                     // 11460
  }                                                                                                                    // 11461
                                                                                                                       // 11462
  function getItemScope (item) {                                                                                       // 11463
    if (!item) return;                                                                                                 // 11464
    var locals = {};                                                                                                   // 11465
    if (self.itemName) locals[self.itemName] = item;                                                                   // 11466
    return locals;                                                                                                     // 11467
  }                                                                                                                    // 11468
                                                                                                                       // 11469
  function getDefaultIndex () {                                                                                        // 11470
    return $scope.autoselect ? 0 : -1;                                                                                 // 11471
  }                                                                                                                    // 11472
                                                                                                                       // 11473
  function shouldHide () {                                                                                             // 11474
    if (!isMinLengthMet()) return true;                                                                                // 11475
  }                                                                                                                    // 11476
                                                                                                                       // 11477
  function getCurrentDisplayValue () {                                                                                 // 11478
    return getDisplayValue(self.matches[self.index]);                                                                  // 11479
  }                                                                                                                    // 11480
                                                                                                                       // 11481
  function isMinLengthMet () {                                                                                         // 11482
    return $scope.searchText.length >= getMinLength();                                                                 // 11483
  }                                                                                                                    // 11484
                                                                                                                       // 11485
  //-- actions                                                                                                         // 11486
                                                                                                                       // 11487
  function select (index) {                                                                                            // 11488
    $scope.selectedItem = self.matches[index];                                                                         // 11489
    $scope.searchText = getDisplayValue($scope.selectedItem) || $scope.searchText;                                     // 11490
    self.hidden = true;                                                                                                // 11491
    self.index = 0;                                                                                                    // 11492
    self.matches = [];                                                                                                 // 11493
  }                                                                                                                    // 11494
                                                                                                                       // 11495
  function clearValue () {                                                                                             // 11496
    $scope.searchText = '';                                                                                            // 11497
    select(-1);                                                                                                        // 11498
                                                                                                                       // 11499
    // Per http://www.w3schools.com/jsref/event_oninput.asp                                                            // 11500
    var eventObj = document.createEvent('CustomEvent');                                                                // 11501
    eventObj.initCustomEvent('input', true, true, {value: $scope.searchText});                                         // 11502
    elements.input.dispatchEvent(eventObj);                                                                            // 11503
                                                                                                                       // 11504
    elements.input.focus();                                                                                            // 11505
  }                                                                                                                    // 11506
                                                                                                                       // 11507
  function fetchResults (searchText) {                                                                                 // 11508
    var items = $scope.$parent.$eval(itemExpr),                                                                        // 11509
        term = searchText.toLowerCase();                                                                               // 11510
    if (angular.isArray(items)) {                                                                                      // 11511
      handleResults(items);                                                                                            // 11512
    } else {                                                                                                           // 11513
      self.loading = true;                                                                                             // 11514
      if (items.success) items.success(handleResults);                                                                 // 11515
      if (items.then)    items.then(handleResults);                                                                    // 11516
      if (items.error)   items.error(function () { self.loading = false; });                                           // 11517
    }                                                                                                                  // 11518
    function handleResults (matches) {                                                                                 // 11519
      cache[term] = matches;                                                                                           // 11520
      self.loading = false;                                                                                            // 11521
      if (searchText !== $scope.searchText) return; //-- just cache the results if old request                         // 11522
      promise = null;                                                                                                  // 11523
      self.matches = matches;                                                                                          // 11524
      self.hidden = shouldHide();                                                                                      // 11525
      updateMessages();                                                                                                // 11526
      positionDropdown();                                                                                              // 11527
    }                                                                                                                  // 11528
  }                                                                                                                    // 11529
                                                                                                                       // 11530
  function updateMessages () {                                                                                         // 11531
    self.messages = self.matches.length                                                                                // 11532
        ? [ getCountMessage(), getCurrentDisplayValue() ]                                                              // 11533
        : [];                                                                                                          // 11534
  }                                                                                                                    // 11535
                                                                                                                       // 11536
  function getCountMessage () {                                                                                        // 11537
    switch (self.matches.length) {                                                                                     // 11538
      case 1:  return 'There is 1 match available.';                                                                   // 11539
      default: return 'There are ' + self.matches.length + ' matches available.';                                      // 11540
    }                                                                                                                  // 11541
  }                                                                                                                    // 11542
                                                                                                                       // 11543
  function updateScroll () {                                                                                           // 11544
    if (!elements.li[self.index]) return;                                                                              // 11545
    var li  = elements.li[self.index],                                                                                 // 11546
        top = li.offsetTop,                                                                                            // 11547
        bot = top + li.offsetHeight,                                                                                   // 11548
        hgt = elements.ul.clientHeight;                                                                                // 11549
    if (top < elements.ul.scrollTop) {                                                                                 // 11550
      elements.ul.scrollTop = top;                                                                                     // 11551
    } else if (bot > elements.ul.scrollTop + hgt) {                                                                    // 11552
      elements.ul.scrollTop = bot - hgt;                                                                               // 11553
    }                                                                                                                  // 11554
  }                                                                                                                    // 11555
                                                                                                                       // 11556
  function handleQuery () {                                                                                            // 11557
    var searchText = $scope.searchText,                                                                                // 11558
        term = searchText.toLowerCase();                                                                               // 11559
    //-- cancel promise if a promise is in progress                                                                    // 11560
    if (promise && promise.cancel) {                                                                                   // 11561
      promise.cancel();                                                                                                // 11562
      promise = null;                                                                                                  // 11563
    }                                                                                                                  // 11564
    //-- if results are cached, pull in cached results                                                                 // 11565
    if (!$scope.noCache && cache[term]) {                                                                              // 11566
      self.matches = cache[term];                                                                                      // 11567
      updateMessages();                                                                                                // 11568
    } else {                                                                                                           // 11569
      fetchResults(searchText);                                                                                        // 11570
    }                                                                                                                  // 11571
    if (hasFocus) self.hidden = shouldHide();                                                                          // 11572
  }                                                                                                                    // 11573
                                                                                                                       // 11574
}                                                                                                                      // 11575
MdAutocompleteCtrl.$inject = ["$scope", "$element", "$mdUtil", "$mdConstant", "$timeout", "$mdTheming", "$window", "$animate", "$rootElement"];
                                                                                                                       // 11577
})();                                                                                                                  // 11578
(function(){                                                                                                           // 11579
"use strict";                                                                                                          // 11580
                                                                                                                       // 11581
angular                                                                                                                // 11582
    .module('material.components.autocomplete')                                                                        // 11583
    .directive('mdAutocomplete', MdAutocomplete);                                                                      // 11584
                                                                                                                       // 11585
/**                                                                                                                    // 11586
 * @ngdoc directive                                                                                                    // 11587
 * @name mdAutocomplete                                                                                                // 11588
 * @module material.components.autocomplete                                                                            // 11589
 *                                                                                                                     // 11590
 * @description                                                                                                        // 11591
 * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a custom query.        // 11592
 * This component allows you to provide real-time suggestions as the user types in the input area.                     // 11593
 *                                                                                                                     // 11594
 * To start, you will need to specify the required parameters and provide a template for your results.                 // 11595
 * The content inside `md-autocomplete` will be treated as a template.                                                 // 11596
 *                                                                                                                     // 11597
 * In more complex cases, you may want to include other content such as a message to display when                      // 11598
 * no matches were found.  You can do this by wrapping your template in `md-item-template` and adding                  // 11599
 * a tag for `md-not-found`.  An example of this is shown below.                                                       // 11600
 * ### Validation                                                                                                      // 11601
 *                                                                                                                     // 11602
 * You can use `ng-messages` to include validation the same way that you would normally validate;                      // 11603
 * however, if you want to replicate a standard input with a floating label, you will have to do the                   // 11604
 * following:                                                                                                          // 11605
 *                                                                                                                     // 11606
 * - Make sure that your template is wrapped in `md-item-template`                                                     // 11607
 * - Add your `ng-messages` code inside of `md-autocomplete`                                                           // 11608
 * - Add your validation properties to `md-autocomplete` (ie. `required`)                                              // 11609
 * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)                                           // 11610
 *                                                                                                                     // 11611
 * There is an example below of how this should look.                                                                  // 11612
 *                                                                                                                     // 11613
 *                                                                                                                     // 11614
 * @param {expression} md-items An expression in the format of `item in items` to iterate over matches for your search.
 * @param {expression} md-selected-item-change An expression to be run each time a new item is selected                // 11616
 * @param {expression} md-search-text-change An expression to be run each time the search text updates                 // 11617
 * @param {string=} md-search-text A model to bind the search query text to                                            // 11618
 * @param {object=} md-selected-item A model to bind the selected item to                                              // 11619
 * @param {string=} md-item-text An expression that will convert your object to a single string.                       // 11620
 * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                  // 11621
 * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete                            // 11622
 * @param {boolean=} ng-disabled Determines whether or not to disable the input field                                  // 11623
 * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will make suggestions       // 11624
 * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking for results         // 11625
 * @param {boolean=} md-autofocus If true, will immediately focus the input element                                    // 11626
 * @param {boolean=} md-autoselect If true, the first item will be selected by default                                 // 11627
 * @param {string=} md-menu-class This will be applied to the dropdown menu for styling                                // 11628
 *                                                                                                                     // 11629
 * @usage                                                                                                              // 11630
 * ###Basic Example                                                                                                    // 11631
 * <hljs lang="html">                                                                                                  // 11632
 *   <md-autocomplete                                                                                                  // 11633
 *       md-selected-item="selectedItem"                                                                               // 11634
 *       md-search-text="searchText"                                                                                   // 11635
 *       md-items="item in getMatches(searchText)"                                                                     // 11636
 *       md-item-text="item.display">                                                                                  // 11637
 *     <span md-highlight-text="searchText">{{item.display}}</span>                                                    // 11638
 *   </md-autocomplete>                                                                                                // 11639
 * </hljs>                                                                                                             // 11640
 *                                                                                                                     // 11641
 * ###Example with "not found" message                                                                                 // 11642
 * <hljs lang="html">                                                                                                  // 11643
 * <md-autocomplete                                                                                                    // 11644
 *     md-selected-item="selectedItem"                                                                                 // 11645
 *     md-search-text="searchText"                                                                                     // 11646
 *     md-items="item in getMatches(searchText)"                                                                       // 11647
 *     md-item-text="item.display">                                                                                    // 11648
 *   <md-item-template>                                                                                                // 11649
 *     <span md-highlight-text="searchText">{{item.display}}</span>                                                    // 11650
 *   </md-item-template>                                                                                               // 11651
 *   <md-not-found>                                                                                                    // 11652
 *     No matches found.                                                                                               // 11653
 *   </md-not-found>                                                                                                   // 11654
 * </md-autocomplete>                                                                                                  // 11655
 * </hljs>                                                                                                             // 11656
 *                                                                                                                     // 11657
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the different                   // 11658
 * parts that make up our component.                                                                                   // 11659
 *                                                                                                                     // 11660
 * ### Example with validation                                                                                         // 11661
 * <hljs lang="html">                                                                                                  // 11662
 * <form name="autocompleteForm">                                                                                      // 11663
 *   <md-autocomplete                                                                                                  // 11664
 *       required                                                                                                      // 11665
 *       input-name="autocomplete"                                                                                     // 11666
 *       md-selected-item="selectedItem"                                                                               // 11667
 *       md-search-text="searchText"                                                                                   // 11668
 *       md-items="item in getMatches(searchText)"                                                                     // 11669
 *       md-item-text="item.display">                                                                                  // 11670
 *     <md-item-template>                                                                                              // 11671
 *       <span md-highlight-text="searchText">{{item.display}}</span>                                                  // 11672
 *     </md-item-template>                                                                                             // 11673
 *     <div ng-messages="autocompleteForm.autocomplete.$error">                                                        // 11674
 *       <div ng-message="required">This field is required</div>                                                       // 11675
 *     </div>                                                                                                          // 11676
 *   </md-autocomplete>                                                                                                // 11677
 * </form>                                                                                                             // 11678
 * </hljs>                                                                                                             // 11679
 *                                                                                                                     // 11680
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the different                   // 11681
 * parts that make up our component.                                                                                   // 11682
 */                                                                                                                    // 11683
                                                                                                                       // 11684
function MdAutocomplete ($mdTheming, $mdUtil) {                                                                        // 11685
  return {                                                                                                             // 11686
    controller:   'MdAutocompleteCtrl',                                                                                // 11687
    controllerAs: '$mdAutocompleteCtrl',                                                                               // 11688
    link:         link,                                                                                                // 11689
    scope:        {                                                                                                    // 11690
      inputName:      '@mdInputName',                                                                                  // 11691
      inputMinlength: '@mdInputMinlength',                                                                             // 11692
      inputMaxlength: '@mdInputMaxlength',                                                                             // 11693
      searchText:     '=?mdSearchText',                                                                                // 11694
      selectedItem:   '=?mdSelectedItem',                                                                              // 11695
      itemsExpr:      '@mdItems',                                                                                      // 11696
      itemText:       '&mdItemText',                                                                                   // 11697
      placeholder:    '@placeholder',                                                                                  // 11698
      noCache:        '=?mdNoCache',                                                                                   // 11699
      itemChange:     '&?mdSelectedItemChange',                                                                        // 11700
      textChange:     '&?mdSearchTextChange',                                                                          // 11701
      minLength:      '=?mdMinLength',                                                                                 // 11702
      delay:          '=?mdDelay',                                                                                     // 11703
      autofocus:      '=?mdAutofocus',                                                                                 // 11704
      floatingLabel:  '@?mdFloatingLabel',                                                                             // 11705
      autoselect:     '=?mdAutoselect',                                                                                // 11706
      menuClass:      '@?mdMenuClass'                                                                                  // 11707
    },                                                                                                                 // 11708
    template: function (element, attr) {                                                                               // 11709
      var noItemsTemplate = getNoItemsTemplate(),                                                                      // 11710
          itemTemplate = getItemTemplate(),                                                                            // 11711
          leftover = element.html();                                                                                   // 11712
      return '\
        <md-autocomplete-wrap\
            layout="row"\
            ng-class="{ \'md-whiteframe-z1\': !floatingLabel }"\
            role="listbox">\
          ' + getInputElement() + '\
          <button\
              type="button"\
              tabindex="-1"\
              ng-if="$mdAutocompleteCtrl.scope.searchText && !isDisabled"\
              ng-click="$mdAutocompleteCtrl.clear()">\
            <md-icon md-svg-icon="md-cancel"></md-icon>\
            <span class="md-visually-hidden">Clear</span>\
          </button>\
          <md-progress-linear\
              ng-if="$mdAutocompleteCtrl.loading"\
              md-mode="indeterminate"></md-progress-linear>\
          <ul role="presentation"\
              class="md-autocomplete-suggestions md-whiteframe-z1 {{menuClass || \'\'}}"\
              id="ul-{{$mdAutocompleteCtrl.id}}"\
              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"\
              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"\
              ng-mouseup="$mdAutocompleteCtrl.mouseUp()">\
            <li ng-repeat="(index, item) in $mdAutocompleteCtrl.matches"\
                ng-class="{ selected: index === $mdAutocompleteCtrl.index }"\
                ng-hide="$mdAutocompleteCtrl.hidden"\
                ng-click="$mdAutocompleteCtrl.select(index)"\
                md-autocomplete-list-item="$mdAutocompleteCtrl.itemName">\
                ' + itemTemplate + '\
            </li>\
            ' + noItemsTemplate + '\
          </ul>\
        </md-autocomplete-wrap>\
        <aria-status\
            class="md-visually-hidden"\
            role="status"\
            aria-live="assertive">\
          <p ng-repeat="message in $mdAutocompleteCtrl.messages" ng-if="message">{{message}}</p>\
        </aria-status>';                                                                                               // 11751
                                                                                                                       // 11752
      function getItemTemplate() {                                                                                     // 11753
        var templateTag = element.find('md-item-template').remove(),                                                   // 11754
            html = templateTag.length ? templateTag.html() : element.html();                                           // 11755
        if (!templateTag.length) element.empty();                                                                      // 11756
        return html;                                                                                                   // 11757
      }                                                                                                                // 11758
                                                                                                                       // 11759
      function getNoItemsTemplate() {                                                                                  // 11760
        var templateTag = element.find('md-not-found').remove(),                                                       // 11761
            template = templateTag.length ? templateTag.html() : '';                                                   // 11762
        return template                                                                                                // 11763
            ? '<li ng-if="!$mdAutocompleteCtrl.matches.length && !$mdAutocompleteCtrl.loading\
                         && !$mdAutocompleteCtrl.hidden"\
                         ng-hide="$mdAutocompleteCtrl.hidden"\
                         md-autocomplete-parent-scope>' + template + '</li>'                                           // 11767
            : '';                                                                                                      // 11768
                                                                                                                       // 11769
      }                                                                                                                // 11770
                                                                                                                       // 11771
      function getInputElement() {                                                                                     // 11772
        if (attr.mdFloatingLabel) {                                                                                    // 11773
          return '\
            <md-input-container flex ng-if="floatingLabel">\
              <label>{{floatingLabel}}</label>\
              <input type="search"\
                  id="fl-input-{{$mdAutocompleteCtrl.id}}"\
                  name="{{inputName}}"\
                  autocomplete="off"\
                  ng-required="isRequired"\
                  ng-minlength="inputMinlength"\
                  ng-maxlength="inputMaxlength"\
                  ng-disabled="isDisabled"\
                  ng-model="$mdAutocompleteCtrl.scope.searchText"\
                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                  ng-blur="$mdAutocompleteCtrl.blur()"\
                  ng-focus="$mdAutocompleteCtrl.focus()"\
                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                  aria-label="{{floatingLabel}}"\
                  aria-autocomplete="list"\
                  aria-haspopup="true"\
                  aria-activedescendant=""\
                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + '</div>\
            </md-input-container>';                                                                                    // 11796
        } else {                                                                                                       // 11797
          return '\
            <input flex type="search"\
                id="input-{{$mdAutocompleteCtrl.id}}"\
                name="{{inputName}}"\
                ng-if="!floatingLabel"\
                autocomplete="off"\
                ng-required="isRequired"\
                ng-disabled="isDisabled"\
                ng-model="$mdAutocompleteCtrl.scope.searchText"\
                ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                ng-blur="$mdAutocompleteCtrl.blur()"\
                ng-focus="$mdAutocompleteCtrl.focus()"\
                placeholder="{{placeholder}}"\
                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                aria-label="{{placeholder}}"\
                aria-autocomplete="list"\
                aria-haspopup="true"\
                aria-activedescendant=""\
                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>';                                                    // 11816
        }                                                                                                              // 11817
      }                                                                                                                // 11818
    }                                                                                                                  // 11819
  };                                                                                                                   // 11820
                                                                                                                       // 11821
  function link (scope, element, attr) {                                                                               // 11822
    attr.$observe('disabled', function (value) { scope.isDisabled = value; });                                         // 11823
    attr.$observe('required', function (value) { scope.isRequired = value !== null; });                                // 11824
                                                                                                                       // 11825
    $mdUtil.initOptionalProperties(scope, attr, {searchText:null, selectedItem:null} );                                // 11826
                                                                                                                       // 11827
    $mdTheming(element);                                                                                               // 11828
  }                                                                                                                    // 11829
}                                                                                                                      // 11830
MdAutocomplete.$inject = ["$mdTheming", "$mdUtil"];                                                                    // 11831
                                                                                                                       // 11832
})();                                                                                                                  // 11833
(function(){                                                                                                           // 11834
"use strict";                                                                                                          // 11835
                                                                                                                       // 11836
angular                                                                                                                // 11837
    .module('material.components.autocomplete')                                                                        // 11838
    .controller('MdHighlightCtrl', MdHighlightCtrl);                                                                   // 11839
                                                                                                                       // 11840
function MdHighlightCtrl ($scope, $element, $interpolate) {                                                            // 11841
  this.init = init;                                                                                                    // 11842
                                                                                                                       // 11843
  return init();                                                                                                       // 11844
                                                                                                                       // 11845
  function init (term) {                                                                                               // 11846
    var unsafeText = $interpolate($element.html())($scope),                                                            // 11847
        text = angular.element('<div>').text(unsafeText).html(),                                                       // 11848
        flags = $element.attr('md-highlight-flags') || '',                                                             // 11849
        watcher = $scope.$watch(term, function (term) {                                                                // 11850
          var regex = getRegExp(term, flags),                                                                          // 11851
              html = text.replace(regex, '<span class="highlight">$&</span>');                                         // 11852
          $element.html(html);                                                                                         // 11853
        });                                                                                                            // 11854
    $element.on('$destroy', function () { watcher(); });                                                               // 11855
  }                                                                                                                    // 11856
                                                                                                                       // 11857
  function sanitize (term) {                                                                                           // 11858
    if (!term) return term;                                                                                            // 11859
    return term.replace(/[\\\^\$\*\+\?\.\(\)\|\{\}\[\]]/g, '\\$&');                                                    // 11860
  }                                                                                                                    // 11861
                                                                                                                       // 11862
  function getRegExp (text, flags) {                                                                                   // 11863
    var str = '';                                                                                                      // 11864
    if (flags.indexOf('^') >= 1) str += '^';                                                                           // 11865
    str += text;                                                                                                       // 11866
    if (flags.indexOf('$') >= 1) str += '$';                                                                           // 11867
    return new RegExp(sanitize(str), flags.replace(/[\$\^]/g, ''));                                                    // 11868
  }                                                                                                                    // 11869
}                                                                                                                      // 11870
MdHighlightCtrl.$inject = ["$scope", "$element", "$interpolate"];                                                      // 11871
                                                                                                                       // 11872
})();                                                                                                                  // 11873
(function(){                                                                                                           // 11874
"use strict";                                                                                                          // 11875
                                                                                                                       // 11876
angular                                                                                                                // 11877
    .module('material.components.autocomplete')                                                                        // 11878
    .directive('mdHighlightText', MdHighlight);                                                                        // 11879
                                                                                                                       // 11880
/**                                                                                                                    // 11881
 * @ngdoc directive                                                                                                    // 11882
 * @name mdHighlightText                                                                                               // 11883
 * @module material.components.autocomplete                                                                            // 11884
 *                                                                                                                     // 11885
 * @description                                                                                                        // 11886
 * The `md-highlight-text` directive allows you to specify text that should be highlighted within                      // 11887
 * an element.  Highlighted text will be wrapped in `<span class="highlight"></span>` which can                        // 11888
 * be styled through CSS.  Please note that child elements may not be used with this directive.                        // 11889
 *                                                                                                                     // 11890
 * @param {string} md-highlight-text A model to be searched for                                                        // 11891
 * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).                     // 11892
 *    #### **Supported flags**:                                                                                        // 11893
 *    - `g`: Find all matches within the provided text                                                                 // 11894
 *    - `i`: Ignore case when searching for matches                                                                    // 11895
 *    - `$`: Only match if the text ends with the search term                                                          // 11896
 *    - `^`: Only match if the text begins with the search term                                                        // 11897
 *                                                                                                                     // 11898
 * @usage                                                                                                              // 11899
 * <hljs lang="html">                                                                                                  // 11900
 * <input placeholder="Enter a search term..." ng-model="searchTerm" type="text" />                                    // 11901
 * <ul>                                                                                                                // 11902
 *   <li ng-repeat="result in results" md-highlight-text="searchTerm">                                                 // 11903
 *     {{result.text}}                                                                                                 // 11904
 *   </li>                                                                                                             // 11905
 * </ul>                                                                                                               // 11906
 * </hljs>                                                                                                             // 11907
 */                                                                                                                    // 11908
                                                                                                                       // 11909
function MdHighlight () {                                                                                              // 11910
  return {                                                                                                             // 11911
    terminal: true,                                                                                                    // 11912
    scope: false,                                                                                                      // 11913
    controller: 'MdHighlightCtrl',                                                                                     // 11914
    link: function (scope, element, attr, ctrl) {                                                                      // 11915
      ctrl.init(attr.mdHighlightText);                                                                                 // 11916
    }                                                                                                                  // 11917
  };                                                                                                                   // 11918
}                                                                                                                      // 11919
                                                                                                                       // 11920
})();                                                                                                                  // 11921
(function(){                                                                                                           // 11922
"use strict";                                                                                                          // 11923
                                                                                                                       // 11924
angular                                                                                                                // 11925
    .module('material.components.autocomplete')                                                                        // 11926
    .directive('mdAutocompleteListItem', MdAutocompleteListItem);                                                      // 11927
                                                                                                                       // 11928
function MdAutocompleteListItem ($compile, $mdUtil) {                                                                  // 11929
  return {                                                                                                             // 11930
    terminal: true,                                                                                                    // 11931
    link: postLink,                                                                                                    // 11932
    scope: false                                                                                                       // 11933
  };                                                                                                                   // 11934
  function postLink (scope, element, attr) {                                                                           // 11935
    var ctrl     = scope.$parent.$mdAutocompleteCtrl,                                                                  // 11936
        newScope = ctrl.parent.$new(false, ctrl.parent),                                                               // 11937
        itemName = ctrl.scope.$eval(attr.mdAutocompleteListItem);                                                      // 11938
    newScope[itemName] = scope.item;                                                                                   // 11939
    $compile(element.contents())(newScope);                                                                            // 11940
    element.attr({                                                                                                     // 11941
      role: 'option',                                                                                                  // 11942
      id: 'item_' + $mdUtil.nextUid()                                                                                  // 11943
    });                                                                                                                // 11944
  }                                                                                                                    // 11945
}                                                                                                                      // 11946
MdAutocompleteListItem.$inject = ["$compile", "$mdUtil"];                                                              // 11947
                                                                                                                       // 11948
})();                                                                                                                  // 11949
(function(){                                                                                                           // 11950
"use strict";                                                                                                          // 11951
                                                                                                                       // 11952
angular                                                                                                                // 11953
    .module('material.components.autocomplete')                                                                        // 11954
    .directive('mdAutocompleteParentScope', MdAutocompleteParentScope);                                                // 11955
                                                                                                                       // 11956
function MdAutocompleteParentScope ($compile, $mdUtil) {                                                               // 11957
  return {                                                                                                             // 11958
    restrict: 'A',                                                                                                     // 11959
    terminal: true,                                                                                                    // 11960
    link: postLink,                                                                                                    // 11961
    scope: false                                                                                                       // 11962
  };                                                                                                                   // 11963
  function postLink (scope, element, attr) {                                                                           // 11964
    var ctrl     = scope.$parent.$mdAutocompleteCtrl;                                                                  // 11965
    $compile(element.contents())(ctrl.parent);                                                                         // 11966
    if (attr.hasOwnProperty('mdAutocompleteReplace')) {                                                                // 11967
      element.after(element.contents());                                                                               // 11968
      element.remove();                                                                                                // 11969
    }                                                                                                                  // 11970
  }                                                                                                                    // 11971
}                                                                                                                      // 11972
MdAutocompleteParentScope.$inject = ["$compile", "$mdUtil"];                                                           // 11973
                                                                                                                       // 11974
})();                                                                                                                  // 11975
(function(){                                                                                                           // 11976
"use strict";                                                                                                          // 11977
                                                                                                                       // 11978
angular                                                                                                                // 11979
    .module('material.components.chips')                                                                               // 11980
    .directive('mdChip', MdChip);                                                                                      // 11981
                                                                                                                       // 11982
/**                                                                                                                    // 11983
 * @ngdoc directive                                                                                                    // 11984
 * @name mdChip                                                                                                        // 11985
 * @module material.components.chips                                                                                   // 11986
 *                                                                                                                     // 11987
 * @description                                                                                                        // 11988
 * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual                     // 11989
 * chips.                                                                                                              // 11990
 *                                                                                                                     // 11991
 *                                                                                                                     // 11992
 * @usage                                                                                                              // 11993
 * <hljs lang="html">                                                                                                  // 11994
 *   <md-chip>{{$chip}}</md-chip>                                                                                      // 11995
 * </hljs>                                                                                                             // 11996
 *                                                                                                                     // 11997
 */                                                                                                                    // 11998
                                                                                                                       // 11999
// This hint text is hidden within a chip but used by screen readers to                                                // 12000
// inform the user how they can interact with a chip.                                                                  // 12001
var DELETE_HINT_TEMPLATE = '\
    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">\
      {{$mdChipsCtrl.deleteHint}}\
    </span>';                                                                                                          // 12005
                                                                                                                       // 12006
/**                                                                                                                    // 12007
 * MDChip Directive Definition                                                                                         // 12008
 *                                                                                                                     // 12009
 * @param $mdTheming                                                                                                   // 12010
 * @param $mdInkRipple                                                                                                 // 12011
 * @ngInject                                                                                                           // 12012
 */                                                                                                                    // 12013
function MdChip($mdTheming) {                                                                                          // 12014
  return {                                                                                                             // 12015
    restrict: 'E',                                                                                                     // 12016
    require: '^?mdChips',                                                                                              // 12017
    compile:  compile                                                                                                  // 12018
  };                                                                                                                   // 12019
                                                                                                                       // 12020
  function compile(element, attr) {                                                                                    // 12021
    element.append(DELETE_HINT_TEMPLATE);                                                                              // 12022
    return function postLink(scope, element, attr, ctrl) {                                                             // 12023
      element.addClass('md-chip');                                                                                     // 12024
      $mdTheming(element);                                                                                             // 12025
                                                                                                                       // 12026
      if (ctrl) angular.element(element[0].querySelector('.md-chip-content'))                                          // 12027
          .on('blur', function () {                                                                                    // 12028
            ctrl.selectedChip = -1;                                                                                    // 12029
          });                                                                                                          // 12030
    };                                                                                                                 // 12031
  }                                                                                                                    // 12032
}                                                                                                                      // 12033
MdChip.$inject = ["$mdTheming"];                                                                                       // 12034
                                                                                                                       // 12035
})();                                                                                                                  // 12036
(function(){                                                                                                           // 12037
"use strict";                                                                                                          // 12038
                                                                                                                       // 12039
angular                                                                                                                // 12040
    .module('material.components.chips')                                                                               // 12041
    .directive('mdChipRemove', MdChipRemove);                                                                          // 12042
                                                                                                                       // 12043
/**                                                                                                                    // 12044
 * @ngdoc directive                                                                                                    // 12045
 * @name mdChipRemove                                                                                                  // 12046
 * @module material.components.chips                                                                                   // 12047
 *                                                                                                                     // 12048
 * @description                                                                                                        // 12049
 * `<md-chip-remove>`                                                                                                  // 12050
 * Designates an element to be used as the delete button for a chip. This                                              // 12051
 * element is passed as a child of the `md-chips` element.                                                             // 12052
 *                                                                                                                     // 12053
 * @usage                                                                                                              // 12054
 * <hljs lang="html">                                                                                                  // 12055
 *   <md-chips><button md-chip-remove>DEL</button></md-chips>                                                          // 12056
 * </hljs>                                                                                                             // 12057
 */                                                                                                                    // 12058
                                                                                                                       // 12059
                                                                                                                       // 12060
/**                                                                                                                    // 12061
 * MdChipRemove Directive Definition.                                                                                  // 12062
 *                                                                                                                     // 12063
 * @param $compile                                                                                                     // 12064
 * @param $timeout                                                                                                     // 12065
 * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}                                    // 12066
 * @constructor                                                                                                        // 12067
 */                                                                                                                    // 12068
function MdChipRemove ($timeout) {                                                                                     // 12069
  return {                                                                                                             // 12070
    restrict: 'A',                                                                                                     // 12071
    require: '^mdChips',                                                                                               // 12072
    scope: false,                                                                                                      // 12073
    link: postLink                                                                                                     // 12074
  };                                                                                                                   // 12075
                                                                                                                       // 12076
  function postLink(scope, element, attr, ctrl) {                                                                      // 12077
    element.on('click', function(event) {                                                                              // 12078
      scope.$apply(function() {                                                                                        // 12079
        ctrl.removeChip(scope.$$replacedScope.$index);                                                                 // 12080
      });                                                                                                              // 12081
    });                                                                                                                // 12082
                                                                                                                       // 12083
    // Child elements aren't available until after a $timeout tick as they are hidden by an                            // 12084
    // `ng-if`. see http://goo.gl/zIWfuw                                                                               // 12085
    $timeout(function() {                                                                                              // 12086
      element.attr({ tabindex: -1, ariaHidden: true });                                                                // 12087
      element.find('button').attr('tabindex', '-1');                                                                   // 12088
    });                                                                                                                // 12089
  }                                                                                                                    // 12090
}                                                                                                                      // 12091
MdChipRemove.$inject = ["$timeout"];                                                                                   // 12092
                                                                                                                       // 12093
})();                                                                                                                  // 12094
(function(){                                                                                                           // 12095
"use strict";                                                                                                          // 12096
                                                                                                                       // 12097
angular                                                                                                                // 12098
    .module('material.components.chips')                                                                               // 12099
    .directive('mdChipTransclude', MdChipTransclude);                                                                  // 12100
                                                                                                                       // 12101
function MdChipTransclude ($compile, $mdUtil) {                                                                        // 12102
  return {                                                                                                             // 12103
    restrict: 'EA',                                                                                                    // 12104
    terminal: true,                                                                                                    // 12105
    link: link,                                                                                                        // 12106
    scope: false                                                                                                       // 12107
  };                                                                                                                   // 12108
  function link (scope, element, attr) {                                                                               // 12109
    var ctrl = scope.$parent.$mdChipsCtrl,                                                                             // 12110
        newScope = ctrl.parent.$new(false, ctrl.parent);                                                               // 12111
    newScope.$$replacedScope = scope;                                                                                  // 12112
    newScope.$chip = scope.$chip;                                                                                      // 12113
    newScope.$mdChipsCtrl = ctrl;                                                                                      // 12114
    element.html(ctrl.$scope.$eval(attr.mdChipTransclude));                                                            // 12115
    $compile(element.contents())(newScope);                                                                            // 12116
  }                                                                                                                    // 12117
}                                                                                                                      // 12118
MdChipTransclude.$inject = ["$compile", "$mdUtil"];                                                                    // 12119
                                                                                                                       // 12120
})();                                                                                                                  // 12121
(function(){                                                                                                           // 12122
"use strict";                                                                                                          // 12123
                                                                                                                       // 12124
angular                                                                                                                // 12125
    .module('material.components.chips')                                                                               // 12126
    .controller('MdChipsCtrl', MdChipsCtrl);                                                                           // 12127
                                                                                                                       // 12128
/**                                                                                                                    // 12129
 * Controller for the MdChips component. Responsible for adding to and                                                 // 12130
 * removing from the list of chips, marking chips as selected, and binding to                                          // 12131
 * the models of various input components.                                                                             // 12132
 *                                                                                                                     // 12133
 * @param $scope                                                                                                       // 12134
 * @param $mdConstant                                                                                                  // 12135
 * @param $log                                                                                                         // 12136
 * @param $element                                                                                                     // 12137
 * @constructor                                                                                                        // 12138
 */                                                                                                                    // 12139
function MdChipsCtrl ($scope, $mdConstant, $log, $element, $timeout) {                                                 // 12140
  /** @type {$timeout} **/                                                                                             // 12141
  this.$timeout = $timeout;                                                                                            // 12142
                                                                                                                       // 12143
  /** @type {Object} */                                                                                                // 12144
  this.$mdConstant = $mdConstant;                                                                                      // 12145
                                                                                                                       // 12146
  /** @type {angular.$scope} */                                                                                        // 12147
  this.$scope = $scope;                                                                                                // 12148
                                                                                                                       // 12149
  /** @type {angular.$scope} */                                                                                        // 12150
  this.parent = $scope.$parent;                                                                                        // 12151
                                                                                                                       // 12152
  /** @type {$log} */                                                                                                  // 12153
  this.$log = $log;                                                                                                    // 12154
                                                                                                                       // 12155
  /** @type {$element} */                                                                                              // 12156
  this.$element = $element;                                                                                            // 12157
                                                                                                                       // 12158
  /** @type {angular.NgModelController} */                                                                             // 12159
  this.ngModelCtrl = null;                                                                                             // 12160
                                                                                                                       // 12161
  /** @type {angular.NgModelController} */                                                                             // 12162
  this.userInputNgModelCtrl = null;                                                                                    // 12163
                                                                                                                       // 12164
  /** @type {Element} */                                                                                               // 12165
  this.userInputElement = null;                                                                                        // 12166
                                                                                                                       // 12167
  /** @type {Array.<Object>} */                                                                                        // 12168
  this.items = [];                                                                                                     // 12169
                                                                                                                       // 12170
  /** @type {number} */                                                                                                // 12171
  this.selectedChip = -1;                                                                                              // 12172
                                                                                                                       // 12173
                                                                                                                       // 12174
  /**                                                                                                                  // 12175
   * Hidden hint text for how to delete a chip. Used to give context to screen readers.                                // 12176
   * @type {string}                                                                                                    // 12177
   */                                                                                                                  // 12178
  this.deleteHint = 'Press delete to remove this chip.';                                                               // 12179
                                                                                                                       // 12180
  /**                                                                                                                  // 12181
   * Hidden label for the delete button. Used to give context to screen readers.                                       // 12182
   * @type {string}                                                                                                    // 12183
   */                                                                                                                  // 12184
  this.deleteButtonLabel = 'Remove';                                                                                   // 12185
                                                                                                                       // 12186
  /**                                                                                                                  // 12187
   * Model used by the input element.                                                                                  // 12188
   * @type {string}                                                                                                    // 12189
   */                                                                                                                  // 12190
  this.chipBuffer = '';                                                                                                // 12191
                                                                                                                       // 12192
  /**                                                                                                                  // 12193
   * Whether to use the mdOnAppend expression to transform the chip buffer                                             // 12194
   * before appending it to the list.                                                                                  // 12195
   * @type {boolean}                                                                                                   // 12196
   */                                                                                                                  // 12197
  this.useMdOnAppend = false;                                                                                          // 12198
}                                                                                                                      // 12199
MdChipsCtrl.$inject = ["$scope", "$mdConstant", "$log", "$element", "$timeout"];                                       // 12200
                                                                                                                       // 12201
/**                                                                                                                    // 12202
 * Handles the keydown event on the input element: <enter> appends the                                                 // 12203
 * buffer to the chip list, while backspace removes the last chip in the list                                          // 12204
 * if the current buffer is empty.                                                                                     // 12205
 * @param event                                                                                                        // 12206
 */                                                                                                                    // 12207
MdChipsCtrl.prototype.inputKeydown = function(event) {                                                                 // 12208
  var chipBuffer = this.getChipBuffer();                                                                               // 12209
  switch (event.keyCode) {                                                                                             // 12210
    case this.$mdConstant.KEY_CODE.ENTER:                                                                              // 12211
      if (this.$scope.requireMatch || !chipBuffer) break;                                                              // 12212
      event.preventDefault();                                                                                          // 12213
      this.appendChip(chipBuffer);                                                                                     // 12214
      this.resetChipBuffer();                                                                                          // 12215
      break;                                                                                                           // 12216
    case this.$mdConstant.KEY_CODE.BACKSPACE:                                                                          // 12217
      if (chipBuffer) break;                                                                                           // 12218
      event.stopPropagation();                                                                                         // 12219
      if (this.items.length) this.selectAndFocusChipSafe(this.items.length - 1);                                       // 12220
      break;                                                                                                           // 12221
  }                                                                                                                    // 12222
};                                                                                                                     // 12223
                                                                                                                       // 12224
/**                                                                                                                    // 12225
 * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow                          // 12226
 * keys switch which chips is active                                                                                   // 12227
 * @param event                                                                                                        // 12228
 */                                                                                                                    // 12229
MdChipsCtrl.prototype.chipKeydown = function (event) {                                                                 // 12230
  if (this.getChipBuffer()) return;                                                                                    // 12231
  switch (event.keyCode) {                                                                                             // 12232
    case this.$mdConstant.KEY_CODE.BACKSPACE:                                                                          // 12233
    case this.$mdConstant.KEY_CODE.DELETE:                                                                             // 12234
      if (this.selectedChip < 0) return;                                                                               // 12235
      event.preventDefault();                                                                                          // 12236
      this.removeAndSelectAdjacentChip(this.selectedChip);                                                             // 12237
      break;                                                                                                           // 12238
    case this.$mdConstant.KEY_CODE.LEFT_ARROW:                                                                         // 12239
      event.preventDefault();                                                                                          // 12240
      if (this.selectedChip < 0) this.selectedChip = this.items.length;                                                // 12241
      if (this.items.length) this.selectAndFocusChipSafe(this.selectedChip - 1);                                       // 12242
      break;                                                                                                           // 12243
    case this.$mdConstant.KEY_CODE.RIGHT_ARROW:                                                                        // 12244
      event.preventDefault();                                                                                          // 12245
      this.selectAndFocusChipSafe(this.selectedChip + 1);                                                              // 12246
      break;                                                                                                           // 12247
    case this.$mdConstant.KEY_CODE.ESCAPE:                                                                             // 12248
    case this.$mdConstant.KEY_CODE.TAB:                                                                                // 12249
      if (this.selectedChip < 0) return;                                                                               // 12250
      event.preventDefault();                                                                                          // 12251
      this.onFocus();                                                                                                  // 12252
      break;                                                                                                           // 12253
  }                                                                                                                    // 12254
};                                                                                                                     // 12255
                                                                                                                       // 12256
/**                                                                                                                    // 12257
 * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`                     // 12258
 * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used                       // 12259
 * always.                                                                                                             // 12260
 */                                                                                                                    // 12261
MdChipsCtrl.prototype.getPlaceholder = function() {                                                                    // 12262
  // Allow `secondary-placeholder` to be blank.                                                                        // 12263
  var useSecondary = (this.items.length &&                                                                             // 12264
      (this.secondaryPlaceholder == '' || this.secondaryPlaceholder));                                                 // 12265
  return useSecondary ? this.placeholder : this.secondaryPlaceholder;                                                  // 12266
};                                                                                                                     // 12267
                                                                                                                       // 12268
/**                                                                                                                    // 12269
 * Removes chip at {@code index} and selects the adjacent chip.                                                        // 12270
 * @param index                                                                                                        // 12271
 */                                                                                                                    // 12272
MdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {                                                  // 12273
  var selIndex = this.getAdjacentChipIndex(index);                                                                     // 12274
  this.removeChip(index);                                                                                              // 12275
  this.$timeout(angular.bind(this, function () {                                                                       // 12276
      this.selectAndFocusChipSafe(selIndex);                                                                           // 12277
  }));                                                                                                                 // 12278
};                                                                                                                     // 12279
                                                                                                                       // 12280
/**                                                                                                                    // 12281
 * Sets the selected chip index to -1.                                                                                 // 12282
 */                                                                                                                    // 12283
MdChipsCtrl.prototype.resetSelectedChip = function() {                                                                 // 12284
  this.selectedChip = -1;                                                                                              // 12285
};                                                                                                                     // 12286
                                                                                                                       // 12287
/**                                                                                                                    // 12288
 * Gets the index of an adjacent chip to select after deletion. Adjacency is                                           // 12289
 * determined as the next chip in the list, unless the target chip is the                                              // 12290
 * last in the list, then it is the chip immediately preceding the target. If                                          // 12291
 * there is only one item in the list, -1 is returned (select none).                                                   // 12292
 * The number returned is the index to select AFTER the target has been                                                // 12293
 * removed.                                                                                                            // 12294
 * If the current chip is not selected, then -1 is returned to select none.                                            // 12295
 */                                                                                                                    // 12296
MdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {                                                         // 12297
  var len = this.items.length - 1;                                                                                     // 12298
  return (len == 0) ? -1 :                                                                                             // 12299
      (index == len) ? index -1 : index;                                                                               // 12300
};                                                                                                                     // 12301
                                                                                                                       // 12302
/**                                                                                                                    // 12303
 * Append the contents of the buffer to the chip list. This method will first                                          // 12304
 * call out to the md-on-append method, if provided                                                                    // 12305
 * @param newChip                                                                                                      // 12306
 */                                                                                                                    // 12307
MdChipsCtrl.prototype.appendChip = function(newChip) {                                                                 // 12308
  if (this.items.indexOf(newChip) + 1) return;                                                                         // 12309
  if (this.useMdOnAppend && this.mdOnAppend) {                                                                         // 12310
    newChip = this.mdOnAppend({'$chip': newChip});                                                                     // 12311
  }                                                                                                                    // 12312
  this.items.push(newChip);                                                                                            // 12313
};                                                                                                                     // 12314
                                                                                                                       // 12315
/**                                                                                                                    // 12316
 * Sets whether to use the md-on-append expression. This expression is                                                 // 12317
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 12318
 * {@code mdOnAppend}. Due to the nature of directive scope bindings, the                                              // 12319
 * controller cannot know on its own/from the scope whether an expression was                                          // 12320
 * actually provided.                                                                                                  // 12321
 */                                                                                                                    // 12322
MdChipsCtrl.prototype.useMdOnAppendExpression = function() {                                                           // 12323
  this.useMdOnAppend = true;                                                                                           // 12324
};                                                                                                                     // 12325
                                                                                                                       // 12326
/**                                                                                                                    // 12327
 * Gets the input buffer. The input buffer can be the model bound to the                                               // 12328
 * default input item {@code this.chipBuffer}, the {@code selectedItem}                                                // 12329
 * model of an {@code md-autocomplete}, or, through some magic, the model                                              // 12330
 * bound to any inpput or text area element found within a                                                             // 12331
 * {@code md-input-container} element.                                                                                 // 12332
 * @return {Object|string}                                                                                             // 12333
 */                                                                                                                    // 12334
MdChipsCtrl.prototype.getChipBuffer = function() {                                                                     // 12335
  return !this.userInputElement ? this.chipBuffer :                                                                    // 12336
      this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue :                                               // 12337
          this.userInputElement[0].value;                                                                              // 12338
};                                                                                                                     // 12339
                                                                                                                       // 12340
/**                                                                                                                    // 12341
 * Resets the input buffer for either the internal input or user provided input element.                               // 12342
 */                                                                                                                    // 12343
MdChipsCtrl.prototype.resetChipBuffer = function() {                                                                   // 12344
  if (this.userInputElement) {                                                                                         // 12345
    if (this.userInputNgModelCtrl) {                                                                                   // 12346
      this.userInputNgModelCtrl.$setViewValue('');                                                                     // 12347
      this.userInputNgModelCtrl.$render();                                                                             // 12348
    } else {                                                                                                           // 12349
      this.userInputElement[0].value = '';                                                                             // 12350
    }                                                                                                                  // 12351
  } else {                                                                                                             // 12352
    this.chipBuffer = '';                                                                                              // 12353
  }                                                                                                                    // 12354
};                                                                                                                     // 12355
                                                                                                                       // 12356
/**                                                                                                                    // 12357
 * Removes the chip at the given index.                                                                                // 12358
 * @param index                                                                                                        // 12359
 */                                                                                                                    // 12360
MdChipsCtrl.prototype.removeChip = function(index) {                                                                   // 12361
  this.items.splice(index, 1);                                                                                         // 12362
};                                                                                                                     // 12363
                                                                                                                       // 12364
MdChipsCtrl.prototype.removeChipAndFocusInput = function (index) {                                                     // 12365
  this.removeChip(index);                                                                                              // 12366
  this.onFocus();                                                                                                      // 12367
};                                                                                                                     // 12368
/**                                                                                                                    // 12369
 * Selects the chip at `index`,                                                                                        // 12370
 * @param index                                                                                                        // 12371
 */                                                                                                                    // 12372
MdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {                                                       // 12373
  if (!this.items.length) {                                                                                            // 12374
    this.selectChip(-1);                                                                                               // 12375
    this.onFocus();                                                                                                    // 12376
    return;                                                                                                            // 12377
  }                                                                                                                    // 12378
  if (index === this.items.length) return this.onFocus();                                                              // 12379
  index = Math.max(index, 0);                                                                                          // 12380
  index = Math.min(index, this.items.length - 1);                                                                      // 12381
  this.selectChip(index);                                                                                              // 12382
  this.focusChip(index);                                                                                               // 12383
};                                                                                                                     // 12384
                                                                                                                       // 12385
/**                                                                                                                    // 12386
 * Marks the chip at the given index as selected.                                                                      // 12387
 * @param index                                                                                                        // 12388
 */                                                                                                                    // 12389
MdChipsCtrl.prototype.selectChip = function(index) {                                                                   // 12390
  if (index >= -1 && index <= this.items.length) {                                                                     // 12391
    this.selectedChip = index;                                                                                         // 12392
  } else {                                                                                                             // 12393
    this.$log.warn('Selected Chip index out of bounds; ignoring.');                                                    // 12394
  }                                                                                                                    // 12395
};                                                                                                                     // 12396
                                                                                                                       // 12397
/**                                                                                                                    // 12398
 * Selects the chip at `index` and gives it focus.                                                                     // 12399
 * @param index                                                                                                        // 12400
 */                                                                                                                    // 12401
MdChipsCtrl.prototype.selectAndFocusChip = function(index) {                                                           // 12402
  this.selectChip(index);                                                                                              // 12403
  if (index != -1) {                                                                                                   // 12404
    this.focusChip(index);                                                                                             // 12405
  }                                                                                                                    // 12406
};                                                                                                                     // 12407
                                                                                                                       // 12408
/**                                                                                                                    // 12409
 * Call `focus()` on the chip at `index`                                                                               // 12410
 */                                                                                                                    // 12411
MdChipsCtrl.prototype.focusChip = function(index) {                                                                    // 12412
  this.$element[0].querySelector('md-chip[index="' + index + '"] .md-chip-content').focus();                           // 12413
};                                                                                                                     // 12414
                                                                                                                       // 12415
/**                                                                                                                    // 12416
 * Configures the required interactions with the ngModel Controller.                                                   // 12417
 * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.                                          // 12418
 * @param ngModelCtrl                                                                                                  // 12419
 */                                                                                                                    // 12420
MdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {                                                       // 12421
  this.ngModelCtrl = ngModelCtrl;                                                                                      // 12422
                                                                                                                       // 12423
  var self = this;                                                                                                     // 12424
  ngModelCtrl.$render = function() {                                                                                   // 12425
    // model is updated. do something.                                                                                 // 12426
    self.items = self.ngModelCtrl.$viewValue;                                                                          // 12427
  };                                                                                                                   // 12428
};                                                                                                                     // 12429
                                                                                                                       // 12430
MdChipsCtrl.prototype.onFocus = function () {                                                                          // 12431
  var input = this.$element[0].querySelector('input');                                                                 // 12432
  input && input.focus();                                                                                              // 12433
  this.resetSelectedChip();                                                                                            // 12434
};                                                                                                                     // 12435
                                                                                                                       // 12436
MdChipsCtrl.prototype.onInputFocus = function () {                                                                     // 12437
  this.inputHasFocus = true;                                                                                           // 12438
  this.resetSelectedChip();                                                                                            // 12439
};                                                                                                                     // 12440
                                                                                                                       // 12441
MdChipsCtrl.prototype.onInputBlur = function () {                                                                      // 12442
  this.inputHasFocus = false;                                                                                          // 12443
};                                                                                                                     // 12444
                                                                                                                       // 12445
/**                                                                                                                    // 12446
 * Configure event bindings on a user-provided input element.                                                          // 12447
 * @param inputElement                                                                                                 // 12448
 */                                                                                                                    // 12449
MdChipsCtrl.prototype.configureUserInput = function(inputElement) {                                                    // 12450
  this.userInputElement = inputElement;                                                                                // 12451
                                                                                                                       // 12452
  // Find the NgModelCtrl for the input element                                                                        // 12453
  var ngModelCtrl = inputElement.controller('ngModel');                                                                // 12454
  // `.controller` will look in the parent as well.                                                                    // 12455
  if (ngModelCtrl != this.ngModelCtrl) {                                                                               // 12456
    this.userInputNgModelCtrl = ngModelCtrl;                                                                           // 12457
  }                                                                                                                    // 12458
                                                                                                                       // 12459
  // Bind to keydown and focus events of input                                                                         // 12460
  var scope = this.$scope;                                                                                             // 12461
  var ctrl = this;                                                                                                     // 12462
  inputElement                                                                                                         // 12463
      .attr({ tabindex: 0 })                                                                                           // 12464
      .on('keydown', function(event) { scope.$apply( angular.bind(ctrl, function() { ctrl.inputKeydown(event); })) })  // 12465
      .on('focus', angular.bind(ctrl, ctrl.onInputFocus))                                                              // 12466
      .on('blur', angular.bind(ctrl, ctrl.onInputBlur));                                                               // 12467
};                                                                                                                     // 12468
                                                                                                                       // 12469
MdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {                                                         // 12470
                                                                                                                       // 12471
  ctrl.registerSelectedItemWatcher(angular.bind(this, function (item) {                                                // 12472
    if (item) {                                                                                                        // 12473
      this.appendChip(item);                                                                                           // 12474
      this.resetChipBuffer();                                                                                          // 12475
    }                                                                                                                  // 12476
  }));                                                                                                                 // 12477
                                                                                                                       // 12478
  this.$element.find('input')                                                                                          // 12479
      .on('focus',angular.bind(this, this.onInputFocus) )                                                              // 12480
      .on('blur', angular.bind(this, this.onInputBlur) );                                                              // 12481
};                                                                                                                     // 12482
                                                                                                                       // 12483
MdChipsCtrl.prototype.hasFocus = function () {                                                                         // 12484
  return this.inputHasFocus || this.selectedChip >= 0;                                                                 // 12485
};                                                                                                                     // 12486
                                                                                                                       // 12487
})();                                                                                                                  // 12488
(function(){                                                                                                           // 12489
"use strict";                                                                                                          // 12490
                                                                                                                       // 12491
  angular                                                                                                              // 12492
      .module('material.components.chips')                                                                             // 12493
      .directive('mdChips', MdChips);                                                                                  // 12494
                                                                                                                       // 12495
  /**                                                                                                                  // 12496
   * @ngdoc directive                                                                                                  // 12497
   * @name mdChips                                                                                                     // 12498
   * @module material.components.chips                                                                                 // 12499
   *                                                                                                                   // 12500
   * @description                                                                                                      // 12501
   * `<md-chips>` is an input component for building lists of strings or objects. The list items are                   // 12502
   * displayed as 'chips'. This component can make use of an `<input>` element or an                                   // 12503
   * `<md-autocomplete>` element.                                                                                      // 12504
   *                                                                                                                   // 12505
   * <strong>Custom `<md-chip-template>` template</strong>                                                             // 12506
   * A custom template may be provided to render the content of each chip. This is achieved by                         // 12507
   * specifying an `<md-chip-template>` element as a child of `<md-chips>`. Note: Any attributes on                    // 12508
   * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The                     // 12509
   * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing                   // 12510
   * the chip object and its index in the list of chips, respectively.                                                 // 12511
   * To override the chip delete control, include an element (ideally a button) with the attribute                     // 12512
   * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element                    // 12513
   * is also placed as a sibling to the chip content (on which there are also click listeners) to                      // 12514
   * avoid a nested ng-click situation.                                                                                // 12515
   *                                                                                                                   // 12516
   * <h3> Pending Features </h3>                                                                                       // 12517
   * <ul style="padding-left:20px;">                                                                                   // 12518
   *                                                                                                                   // 12519
   *   <ul>Style                                                                                                       // 12520
   *     <li>Colours for hover, press states (ripple?).</li>                                                           // 12521
   *   </ul>                                                                                                           // 12522
   *                                                                                                                   // 12523
   *   <ul>List Manipulation                                                                                           // 12524
   *     <li>delete item via DEL or backspace keys when selected</li>                                                  // 12525
   *   </ul>                                                                                                           // 12526
   *                                                                                                                   // 12527
   *   <ul>Validation                                                                                                  // 12528
   *     <li>de-dupe values (or support duplicates, but fix the ng-repeat duplicate key issue)</li>                    // 12529
   *     <li>allow a validation callback</li>                                                                          // 12530
   *     <li>hilighting style for invalid chips</li>                                                                   // 12531
   *   </ul>                                                                                                           // 12532
   *                                                                                                                   // 12533
   *   <ul>Item mutation                                                                                               // 12534
   *     <li>Support `                                                                                                 // 12535
   *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double                        // 12536
   *       click?                                                                                                      // 12537
   *     </li>                                                                                                         // 12538
   *   </ul>                                                                                                           // 12539
   *                                                                                                                   // 12540
   *   <ul>Truncation and Disambiguation (?)                                                                           // 12541
   *     <li>Truncate chip text where possible, but do not truncate entries such that two are                          // 12542
   *     indistinguishable.</li>                                                                                       // 12543
   *   </ul>                                                                                                           // 12544
   *                                                                                                                   // 12545
   *   <ul>Drag and Drop                                                                                               // 12546
   *     <li>Drag and drop chips between related `<md-chips>` elements.                                                // 12547
   *     </li>                                                                                                         // 12548
   *   </ul>                                                                                                           // 12549
   * </ul>                                                                                                             // 12550
   *                                                                                                                   // 12551
   *  <span style="font-size:.8em;text-align:center">                                                                  // 12552
   *    Warning: This component is a WORK IN PROGRESS. If you use it now,                                              // 12553
   *    it will probably break on you in the future.                                                                   // 12554
   *  </span>                                                                                                          // 12555
   *                                                                                                                   // 12556
   * @param {string=|object=} ng-model A model to bind the list of items to                                            // 12557
   * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                // 12558
   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,                      // 12559
   *    displayed when there is at least on item in the list                                                           // 12560
   * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding                     // 12561
   *    the input and delete buttons                                                                                   // 12562
   * @param {expression} md-on-append An expression expected to convert the input string into an                       // 12563
   *    object when adding a chip.                                                                                     // 12564
   * @param {string=} delete-hint A string read by screen readers instructing users that pressing                      // 12565
   *    the delete key will remove the chip.                                                                           // 12566
   * @param {string=} delete-button-label A label for the delete button. Also hidden and read by                       // 12567
   *    screen readers.                                                                                                // 12568
   *                                                                                                                   // 12569
   * @usage                                                                                                            // 12570
   * <hljs lang="html">                                                                                                // 12571
   *   <md-chips                                                                                                       // 12572
   *       ng-model="myItems"                                                                                          // 12573
   *       placeholder="Add an item"                                                                                   // 12574
   *       readonly="isReadOnly">                                                                                      // 12575
   *   </md-chips>                                                                                                     // 12576
   * </hljs>                                                                                                           // 12577
   *                                                                                                                   // 12578
   */                                                                                                                  // 12579
                                                                                                                       // 12580
                                                                                                                       // 12581
  var MD_CHIPS_TEMPLATE = '\
      <md-chips-wrap\
          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"\
          ng-keydown="$mdChipsCtrl.chipKeydown($event)"\
          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus() }"\
          class="md-chips">\
        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"\
            index="{{$index}}"\
            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index}">\
          <div class="md-chip-content"\
              tabindex="-1"\
              aria-hidden="true"\
              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"\
              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>\
          <div class="md-chip-remove-container"\
              md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>\
        </md-chip>\
        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"\
            class="md-chip-input-container"\
            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>\
        </div>\
      </md-chips-wrap>';                                                                                               // 12603
                                                                                                                       // 12604
  var CHIP_INPUT_TEMPLATE = '\
        <input\
            tabindex="0"\
            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"\
            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"\
            ng-model="$mdChipsCtrl.chipBuffer"\
            ng-focus="$mdChipsCtrl.onInputFocus()"\
            ng-blur="$mdChipsCtrl.onInputBlur()"\
            ng-keydown="$mdChipsCtrl.inputKeydown($event)">';                                                          // 12613
                                                                                                                       // 12614
  var CHIP_DEFAULT_TEMPLATE = '\
      <span>{{$chip}}</span>';                                                                                         // 12616
                                                                                                                       // 12617
  var CHIP_REMOVE_TEMPLATE = '\
      <button\
          class="md-chip-remove"\
          ng-if="!$mdChipsCtrl.readonly"\
          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"\
          type="button"\
          aria-hidden="true"\
          tabindex="-1">\
        <md-icon md-svg-icon="md-close"></md-icon>\
        <span class="md-visually-hidden">\
          {{$mdChipsCtrl.deleteButtonLabel}}\
        </span>\
      </button>';                                                                                                      // 12630
                                                                                                                       // 12631
  /**                                                                                                                  // 12632
   * MDChips Directive Definition                                                                                      // 12633
   */                                                                                                                  // 12634
  function MdChips ($mdTheming, $mdUtil, $compile, $log, $timeout) {                                                   // 12635
    return {                                                                                                           // 12636
      template: function(element, attrs) {                                                                             // 12637
        // Clone the element into an attribute. By prepending the attribute                                            // 12638
        // name with '$', Angular won't write it into the DOM. The cloned                                              // 12639
        // element propagates to the link function via the attrs argument,                                             // 12640
        // where various contained-elements can be consumed.                                                           // 12641
        var content = attrs['$mdUserTemplate'] = element.clone();                                                      // 12642
        return MD_CHIPS_TEMPLATE;                                                                                      // 12643
      },                                                                                                               // 12644
      require: ['mdChips'],                                                                                            // 12645
      restrict: 'E',                                                                                                   // 12646
      controller: 'MdChipsCtrl',                                                                                       // 12647
      controllerAs: '$mdChipsCtrl',                                                                                    // 12648
      bindToController: true,                                                                                          // 12649
      compile: compile,                                                                                                // 12650
      scope: {                                                                                                         // 12651
        readonly: '=readonly',                                                                                         // 12652
        placeholder: '@',                                                                                              // 12653
        secondaryPlaceholder: '@',                                                                                     // 12654
        mdOnAppend: '&',                                                                                               // 12655
        deleteHint: '@',                                                                                               // 12656
        deleteButtonLabel: '@',                                                                                        // 12657
        requireMatch: '=?mdRequireMatch'                                                                               // 12658
      }                                                                                                                // 12659
    };                                                                                                                 // 12660
                                                                                                                       // 12661
    /**                                                                                                                // 12662
     * Builds the final template for `md-chips` and returns the postLink function.                                     // 12663
     *                                                                                                                 // 12664
     * Building the template involves 3 key components:                                                                // 12665
     * static chips                                                                                                    // 12666
     * chip template                                                                                                   // 12667
     * input control                                                                                                   // 12668
     *                                                                                                                 // 12669
     * If no `ng-model` is provided, only the static chip work needs to be done.                                       // 12670
     *                                                                                                                 // 12671
     * If no user-passed `md-chip-template` exists, the default template is used. This resulting                       // 12672
     * template is appended to the chip content element.                                                               // 12673
     *                                                                                                                 // 12674
     * The remove button may be overridden by passing an element with an md-chip-remove attribute.                     // 12675
     *                                                                                                                 // 12676
     * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for                       // 12677
     * transclusion later. The transclusion happens in `postLink` as the parent scope is required.                     // 12678
     * If no user input is provided, a default one is appended to the input container node in the                      // 12679
     * template.                                                                                                       // 12680
     *                                                                                                                 // 12681
     * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for                    // 12682
     * transclusion in the `postLink` function.                                                                        // 12683
     *                                                                                                                 // 12684
     *                                                                                                                 // 12685
     * @param element                                                                                                  // 12686
     * @param attr                                                                                                     // 12687
     * @returns {Function}                                                                                             // 12688
     */                                                                                                                // 12689
    function compile(element, attr) {                                                                                  // 12690
      // Grab the user template from attr and reset the attribute to null.                                             // 12691
      var userTemplate = attr['$mdUserTemplate'];                                                                      // 12692
      attr['$mdUserTemplate'] = null;                                                                                  // 12693
                                                                                                                       // 12694
      // Set the chip remove, chip contents and chip input templates. The link function will put                       // 12695
      // them on the scope for transclusion later.                                                                     // 12696
      var chipRemoveTemplate   = getTemplateByQuery('md-chips>*[md-chip-remove]') || CHIP_REMOVE_TEMPLATE,             // 12697
          chipContentsTemplate = getTemplateByQuery('md-chips>md-chip-template') || CHIP_DEFAULT_TEMPLATE,             // 12698
          chipInputTemplate    = getTemplateByQuery('md-chips>md-autocomplete')                                        // 12699
              || getTemplateByQuery('md-chips>input')                                                                  // 12700
              || CHIP_INPUT_TEMPLATE,                                                                                  // 12701
          staticChips = userTemplate.find('md-chip');                                                                  // 12702
                                                                                                                       // 12703
      // Warn of malformed template. See #2545                                                                         // 12704
      if (userTemplate[0].querySelector('md-chip-template>*[md-chip-remove]')) {                                       // 12705
        $log.warn('invalid placement of md-chip-remove within md-chip-template.');                                     // 12706
      }                                                                                                                // 12707
                                                                                                                       // 12708
      function getTemplateByQuery (query) {                                                                            // 12709
        if (!attr.ngModel) return;                                                                                     // 12710
        var element = userTemplate[0].querySelector(query);                                                            // 12711
        return element && element.outerHTML;                                                                           // 12712
      }                                                                                                                // 12713
                                                                                                                       // 12714
      /**                                                                                                              // 12715
       * Configures controller and transcludes.                                                                        // 12716
       */                                                                                                              // 12717
      return function postLink(scope, element, attrs, controllers) {                                                   // 12718
                                                                                                                       // 12719
        $mdUtil.initOptionalProperties(scope, attr);                                                                   // 12720
                                                                                                                       // 12721
        $mdTheming(element);                                                                                           // 12722
        var mdChipsCtrl = controllers[0];                                                                              // 12723
        mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;                                                       // 12724
        mdChipsCtrl.chipRemoveTemplate   = chipRemoveTemplate;                                                         // 12725
        mdChipsCtrl.chipInputTemplate    = chipInputTemplate;                                                          // 12726
                                                                                                                       // 12727
        element                                                                                                        // 12728
            .attr({ ariaHidden: true, tabindex: -1 })                                                                  // 12729
            .on('focus', function () { mdChipsCtrl.onFocus(); });                                                      // 12730
                                                                                                                       // 12731
        if (attr.ngModel) {                                                                                            // 12732
          mdChipsCtrl.configureNgModel(element.controller('ngModel'));                                                 // 12733
                                                                                                                       // 12734
          // If an `md-on-append` attribute was set, tell the controller to use the expression                         // 12735
          // when appending chips.                                                                                     // 12736
          if (attrs.mdOnAppend) mdChipsCtrl.useMdOnAppendExpression();                                                 // 12737
                                                                                                                       // 12738
          // The md-autocomplete and input elements won't be compiled until after this directive                       // 12739
          // is complete (due to their nested nature). Wait a tick before looking for them to                          // 12740
          // configure the controller.                                                                                 // 12741
          if (chipInputTemplate != CHIP_INPUT_TEMPLATE) {                                                              // 12742
            $timeout(function() {                                                                                      // 12743
              if (chipInputTemplate.indexOf('<md-autocomplete') === 0)                                                 // 12744
                mdChipsCtrl                                                                                            // 12745
                    .configureAutocomplete(element.find('md-autocomplete')                                             // 12746
                        .controller('mdAutocomplete'));                                                                // 12747
              mdChipsCtrl.configureUserInput(element.find('input'));                                                   // 12748
            });                                                                                                        // 12749
          }                                                                                                            // 12750
        }                                                                                                              // 12751
                                                                                                                       // 12752
        // Compile with the parent's scope and prepend any static chips to the wrapper.                                // 12753
        if (staticChips.length > 0) {                                                                                  // 12754
          var compiledStaticChips = $compile(staticChips)(scope.$parent);                                              // 12755
          $timeout(function() { element.find('md-chips-wrap').prepend(compiledStaticChips); });                        // 12756
        }                                                                                                              // 12757
      };                                                                                                               // 12758
    }                                                                                                                  // 12759
  }                                                                                                                    // 12760
  MdChips.$inject = ["$mdTheming", "$mdUtil", "$compile", "$log", "$timeout"];                                         // 12761
                                                                                                                       // 12762
})();                                                                                                                  // 12763
(function(){                                                                                                           // 12764
"use strict";                                                                                                          // 12765
                                                                                                                       // 12766
angular                                                                                                                // 12767
    .module('material.components.chips')                                                                               // 12768
    .controller('MdContactChipsCtrl', MdContactChipsCtrl);                                                             // 12769
                                                                                                                       // 12770
                                                                                                                       // 12771
                                                                                                                       // 12772
/**                                                                                                                    // 12773
 * Controller for the MdContactChips component                                                                         // 12774
 * @constructor                                                                                                        // 12775
 */                                                                                                                    // 12776
function MdContactChipsCtrl () {                                                                                       // 12777
  /** @type {Object} */                                                                                                // 12778
  this.selectedItem = null;                                                                                            // 12779
                                                                                                                       // 12780
  /** @type {string} */                                                                                                // 12781
  this.searchText = '';                                                                                                // 12782
}                                                                                                                      // 12783
                                                                                                                       // 12784
                                                                                                                       // 12785
MdContactChipsCtrl.prototype.queryContact = function(searchText) {                                                     // 12786
  var results = this.contactQuery({'$query': searchText});                                                             // 12787
  return this.filterSelected ?                                                                                         // 12788
      results.filter(angular.bind(this, this.filterSelectedContacts)) : results;                                       // 12789
};                                                                                                                     // 12790
                                                                                                                       // 12791
                                                                                                                       // 12792
MdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {                                              // 12793
  return this.contacts.indexOf(contact) == -1;                                                                         // 12794
};                                                                                                                     // 12795
                                                                                                                       // 12796
})();                                                                                                                  // 12797
(function(){                                                                                                           // 12798
"use strict";                                                                                                          // 12799
                                                                                                                       // 12800
  angular                                                                                                              // 12801
      .module('material.components.chips')                                                                             // 12802
      .directive('mdContactChips', MdContactChips);                                                                    // 12803
                                                                                                                       // 12804
  /**                                                                                                                  // 12805
   * @ngdoc directive                                                                                                  // 12806
   * @name mdContactChips                                                                                              // 12807
   * @module material.components.chips                                                                                 // 12808
   *                                                                                                                   // 12809
   * @description                                                                                                      // 12810
   * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an                                // 12811
   *    `md-autocomplete` element. The component allows the caller to supply a query expression                        // 12812
   *    which returns  a list of possible contacts. The user can select one of these and add it to                     // 12813
   *    the list of chips.                                                                                             // 12814
   *                                                                                                                   // 12815
   * @param {string=|object=} ng-model A model to bind the list of items to                                            // 12816
   * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                // 12817
   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,                      // 12818
   *    displayed when there is at least on item in the list                                                           // 12819
   * @param {expression} md-contacts An expression expected to return contacts matching the search                     // 12820
   *    test, `$query`.                                                                                                // 12821
   * @param {string} md-contact-name The field name of the contact object representing the                             // 12822
   *    contact's name.                                                                                                // 12823
   * @param {string} md-contact-email The field name of the contact object representing the                            // 12824
   *    contact's email address.                                                                                       // 12825
   * @param {string} md-contact-image The field name of the contact object representing the                            // 12826
   *    contact's image.                                                                                               // 12827
   *                                                                                                                   // 12828
   *                                                                                                                   // 12829
   * // The following attribute has been removed but may come back.                                                    // 12830
   * @param {expression=} filter-selected Whether to filter selected contacts from the list of                         // 12831
   *    suggestions shown in the autocomplete.                                                                         // 12832
   *                                                                                                                   // 12833
   *                                                                                                                   // 12834
   *                                                                                                                   // 12835
   * @usage                                                                                                            // 12836
   * <hljs lang="html">                                                                                                // 12837
   *   <md-contact-chips                                                                                               // 12838
   *       ng-model="ctrl.contacts"                                                                                    // 12839
   *       md-contacts="ctrl.querySearch($query)"                                                                      // 12840
   *       md-contact-name="name"                                                                                      // 12841
   *       md-contact-image="image"                                                                                    // 12842
   *       md-contact-email="email"                                                                                    // 12843
   *       placeholder="To">                                                                                           // 12844
   *   </md-contact-chips>                                                                                             // 12845
   * </hljs>                                                                                                           // 12846
   *                                                                                                                   // 12847
   */                                                                                                                  // 12848
                                                                                                                       // 12849
                                                                                                                       // 12850
  var MD_CONTACT_CHIPS_TEMPLATE = '\
      <md-chips class="md-contact-chips"\
          ng-model="$mdContactChipsCtrl.contacts"\
          md-require-match="$mdContactChipsCtrl.requireMatch"\
          md-autocomplete-snap>\
          <md-autocomplete\
              md-menu-class="md-contact-chips-suggestions"\
              md-selected-item="$mdContactChipsCtrl.selectedItem"\
              md-search-text="$mdContactChipsCtrl.searchText"\
              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"\
              md-item-text="$mdContactChipsCtrl.mdContactName"\
              md-no-cache="true"\
              md-autoselect\
              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?\
                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">\
            <div class="md-contact-suggestion">\
              <img \
                  ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{item[$mdContactChipsCtrl.contactName]}}" />\
              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText">\
                {{item[$mdContactChipsCtrl.contactName]}}\
              </span>\
              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\
            </div>\
          </md-autocomplete>\
          <md-chip-template>\
            <div class="md-contact-avatar">\
              <img \
                  ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}" />\
            </div>\
            <div class="md-contact-name">\
              {{$chip[$mdContactChipsCtrl.contactName]}}\
            </div>\
          </md-chip-template>\
      </md-chips>';                                                                                                    // 12886
                                                                                                                       // 12887
                                                                                                                       // 12888
  /**                                                                                                                  // 12889
   * MDContactChips Directive Definition                                                                               // 12890
   *                                                                                                                   // 12891
   * @param $mdTheming                                                                                                 // 12892
   * @returns {*}                                                                                                      // 12893
   * @ngInject                                                                                                         // 12894
   */                                                                                                                  // 12895
  function MdContactChips ($mdTheming, $mdUtil) {                                                                      // 12896
    return {                                                                                                           // 12897
      template: function(element, attrs) {                                                                             // 12898
        return MD_CONTACT_CHIPS_TEMPLATE;                                                                              // 12899
      },                                                                                                               // 12900
      restrict: 'E',                                                                                                   // 12901
      controller: 'MdContactChipsCtrl',                                                                                // 12902
      controllerAs: '$mdContactChipsCtrl',                                                                             // 12903
      bindToController: true,                                                                                          // 12904
      compile: compile,                                                                                                // 12905
      scope: {                                                                                                         // 12906
        contactQuery: '&mdContacts',                                                                                   // 12907
        placeholder: '@',                                                                                              // 12908
        secondaryPlaceholder: '@',                                                                                     // 12909
        contactName: '@mdContactName',                                                                                 // 12910
        contactImage: '@mdContactImage',                                                                               // 12911
        contactEmail: '@mdContactEmail',                                                                               // 12912
        contacts: '=ngModel',                                                                                          // 12913
        requireMatch: '=?mdRequireMatch'                                                                               // 12914
      }                                                                                                                // 12915
    };                                                                                                                 // 12916
                                                                                                                       // 12917
    function compile(element, attr) {                                                                                  // 12918
      return function postLink(scope, element, attrs, controllers) {                                                   // 12919
                                                                                                                       // 12920
        $mdUtil.initOptionalProperties(scope, attr);                                                                   // 12921
        $mdTheming(element);                                                                                           // 12922
                                                                                                                       // 12923
        element.attr('tabindex', '-1');                                                                                // 12924
      };                                                                                                               // 12925
    }                                                                                                                  // 12926
  }                                                                                                                    // 12927
  MdContactChips.$inject = ["$mdTheming", "$mdUtil"];                                                                  // 12928
                                                                                                                       // 12929
})();                                                                                                                  // 12930
(function(){                                                                                                           // 12931
"use strict";                                                                                                          // 12932
                                                                                                                       // 12933
/**                                                                                                                    // 12934
 * @ngdoc directive                                                                                                    // 12935
 * @name mdTab                                                                                                         // 12936
 * @module material.components.tabs                                                                                    // 12937
 *                                                                                                                     // 12938
 * @restrict E                                                                                                         // 12939
 *                                                                                                                     // 12940
 * @description                                                                                                        // 12941
 * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.
 *                                                                                                                     // 12943
 * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more        // 12944
 * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested         // 12945
 * markup of the `<md-tab>` is used as the tab header markup.                                                          // 12946
 *                                                                                                                     // 12947
 * Please note that if you use `<md-tab-label>`, your content **MUST** be wrapped in the `<md-tab-body>` tag.  This    // 12948
 * is to define a clear separation between the tab content and the tab label.                                          // 12949
 *                                                                                                                     // 12950
 * If a tab **label** has been identified, then any **non-**`<md-tab-label>` markup                                    // 12951
 * will be considered tab content and will be transcluded to the internal `<div class="md-tabs-content">` container.   // 12952
 *                                                                                                                     // 12953
 * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is    // 12954
 * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can      // 12955
 * be initiated via data binding changes, programmatic invocation, or user gestures.                                   // 12956
 *                                                                                                                     // 12957
 * @param {string=} label Optional attribute to specify a simple string as the tab label                               // 12958
 * @param {boolean=} disabled If present, disabled tab selection.                                                      // 12959
 * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.                  // 12960
 * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.                       // 12961
 *                                                                                                                     // 12962
 *                                                                                                                     // 12963
 * @usage                                                                                                              // 12964
 *                                                                                                                     // 12965
 * <hljs lang="html">                                                                                                  // 12966
 * <md-tab label="" disabled="" md-on-select="" md-on-deselect="" >                                                    // 12967
 *   <h3>My Tab content</h3>                                                                                           // 12968
 * </md-tab>                                                                                                           // 12969
 *                                                                                                                     // 12970
 * <md-tab >                                                                                                           // 12971
 *   <md-tab-label>                                                                                                    // 12972
 *     <h3>My Tab content</h3>                                                                                         // 12973
 *   </md-tab-label>                                                                                                   // 12974
 *   <md-tab-body>                                                                                                     // 12975
 *     <p>                                                                                                             // 12976
 *       Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,             // 12977
 *       totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae               // 12978
 *       dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,             // 12979
 *       sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.                                // 12980
 *     </p>                                                                                                            // 12981
 *   </md-tab-body>                                                                                                    // 12982
 * </md-tab>                                                                                                           // 12983
 * </hljs>                                                                                                             // 12984
 *                                                                                                                     // 12985
 */                                                                                                                    // 12986
angular                                                                                                                // 12987
    .module('material.components.tabs')                                                                                // 12988
    .directive('mdTab', MdTab);                                                                                        // 12989
                                                                                                                       // 12990
function MdTab () {                                                                                                    // 12991
  return {                                                                                                             // 12992
    require: '^?mdTabs',                                                                                               // 12993
    terminal: true,                                                                                                    // 12994
    template: function (element, attr) {                                                                               // 12995
      var label = getLabel(),                                                                                          // 12996
          body  = getTemplate();                                                                                       // 12997
      return '' +                                                                                                      // 12998
          '<md-tab-label>' + label + '</md-tab-label>' +                                                               // 12999
          '<md-tab-body>' + body + '</md-tab-body>';                                                                   // 13000
      function getLabel () {                                                                                           // 13001
        return getLabelAttribute() || getLabelElement() || getElementContents();                                       // 13002
        function getLabelAttribute () { return attr.label; }                                                           // 13003
        function getLabelElement () {                                                                                  // 13004
          var label = element.find('md-tab-label');                                                                    // 13005
          if (label.length) return label.remove().html();                                                              // 13006
        }                                                                                                              // 13007
        function getElementContents () {                                                                               // 13008
          var html = element.html();                                                                                   // 13009
          element.empty();                                                                                             // 13010
          return html;                                                                                                 // 13011
        }                                                                                                              // 13012
      }                                                                                                                // 13013
      function getTemplate () {                                                                                        // 13014
        var content = element.find('md-tab-body'),                                                                     // 13015
            template = content.length ? content.html() : attr.label ? element.html() : '';                             // 13016
        if (content.length) content.remove();                                                                          // 13017
        else if (attr.label) element.empty();                                                                          // 13018
        return template;                                                                                               // 13019
      }                                                                                                                // 13020
    },                                                                                                                 // 13021
    scope: {                                                                                                           // 13022
      active:   '=?mdActive',                                                                                          // 13023
      disabled: '=?ngDisabled',                                                                                        // 13024
      select:   '&?mdOnSelect',                                                                                        // 13025
      deselect: '&?mdOnDeselect'                                                                                       // 13026
    },                                                                                                                 // 13027
    link: postLink                                                                                                     // 13028
  };                                                                                                                   // 13029
                                                                                                                       // 13030
  function postLink (scope, element, attr, ctrl) {                                                                     // 13031
    if (!ctrl) return;                                                                                                 // 13032
    var tabs = element.parent()[0].getElementsByTagName('md-tab'),                                                     // 13033
        index = Array.prototype.indexOf.call(tabs, element[0]),                                                        // 13034
        data = ctrl.insertTab({                                                                                        // 13035
          scope:    scope,                                                                                             // 13036
          parent:   scope.$parent,                                                                                     // 13037
          index:    index,                                                                                             // 13038
          element:  element,                                                                                           // 13039
          template: element.find('md-tab-body').html(),                                                                // 13040
          label:    element.find('md-tab-label').html()                                                                // 13041
        }, index);                                                                                                     // 13042
                                                                                                                       // 13043
    scope.select   = scope.select   || angular.noop;                                                                   // 13044
    scope.deselect = scope.deselect || angular.noop;                                                                   // 13045
                                                                                                                       // 13046
    scope.$watch('active', function (active) { if (active) ctrl.select(data.getIndex()); });                           // 13047
    scope.$watch('disabled', function () { ctrl.refreshIndex(); });                                                    // 13048
    scope.$watch(                                                                                                      // 13049
        function () {                                                                                                  // 13050
          return Array.prototype.indexOf.call(tabs, element[0]);                                                       // 13051
        },                                                                                                             // 13052
        function (newIndex) {                                                                                          // 13053
          data.index = newIndex;                                                                                       // 13054
          ctrl.updateTabOrder();                                                                                       // 13055
        }                                                                                                              // 13056
    );                                                                                                                 // 13057
    scope.$on('$destroy', function () { ctrl.removeTab(data); });                                                      // 13058
                                                                                                                       // 13059
  }                                                                                                                    // 13060
}                                                                                                                      // 13061
                                                                                                                       // 13062
})();                                                                                                                  // 13063
(function(){                                                                                                           // 13064
"use strict";                                                                                                          // 13065
                                                                                                                       // 13066
angular                                                                                                                // 13067
    .module('material.components.tabs')                                                                                // 13068
    .directive('mdTabItem', MdTabItem);                                                                                // 13069
                                                                                                                       // 13070
function MdTabItem () {                                                                                                // 13071
  return {                                                                                                             // 13072
    require: '^?mdTabs',                                                                                               // 13073
    link: function link (scope, element, attr, ctrl) {                                                                 // 13074
      if (!ctrl) return;                                                                                               // 13075
      ctrl.attachRipple(scope, element);                                                                               // 13076
    }                                                                                                                  // 13077
  };                                                                                                                   // 13078
}                                                                                                                      // 13079
                                                                                                                       // 13080
})();                                                                                                                  // 13081
(function(){                                                                                                           // 13082
"use strict";                                                                                                          // 13083
                                                                                                                       // 13084
angular                                                                                                                // 13085
    .module('material.components.tabs')                                                                                // 13086
    .directive('mdTabLabel', MdTabLabel);                                                                              // 13087
                                                                                                                       // 13088
function MdTabLabel () {                                                                                               // 13089
  return { terminal: true };                                                                                           // 13090
}                                                                                                                      // 13091
                                                                                                                       // 13092
                                                                                                                       // 13093
})();                                                                                                                  // 13094
(function(){                                                                                                           // 13095
"use strict";                                                                                                          // 13096
                                                                                                                       // 13097
angular.module('material.components.tabs')                                                                             // 13098
    .directive('mdTabScroll', MdTabScroll);                                                                            // 13099
                                                                                                                       // 13100
function MdTabScroll ($parse) {                                                                                        // 13101
  return {                                                                                                             // 13102
    restrict: 'A',                                                                                                     // 13103
    compile: function ($element, attr) {                                                                               // 13104
      var fn = $parse(attr.mdTabScroll, null, true);                                                                   // 13105
      return function ngEventHandler (scope, element) {                                                                // 13106
        element.on('mousewheel', function (event) {                                                                    // 13107
          scope.$apply(function () { fn(scope, { $event: event }); });                                                 // 13108
        });                                                                                                            // 13109
      };                                                                                                               // 13110
    }                                                                                                                  // 13111
  }                                                                                                                    // 13112
}                                                                                                                      // 13113
MdTabScroll.$inject = ["$parse"];                                                                                      // 13114
                                                                                                                       // 13115
})();                                                                                                                  // 13116
(function(){                                                                                                           // 13117
"use strict";                                                                                                          // 13118
                                                                                                                       // 13119
angular                                                                                                                // 13120
    .module('material.components.tabs')                                                                                // 13121
    .controller('MdTabsController', MdTabsController);                                                                 // 13122
                                                                                                                       // 13123
/**                                                                                                                    // 13124
 * @ngInject                                                                                                           // 13125
 */                                                                                                                    // 13126
function MdTabsController ($scope, $element, $window, $timeout, $mdConstant, $mdTabInkRipple,                          // 13127
                           $mdUtil, $animate) {                                                                        // 13128
  var ctrl     = this,                                                                                                 // 13129
      locked   = false,                                                                                                // 13130
      elements = getElements(),                                                                                        // 13131
      queue    = [];                                                                                                   // 13132
                                                                                                                       // 13133
  ctrl.scope = $scope;                                                                                                 // 13134
  ctrl.parent = $scope.$parent;                                                                                        // 13135
  ctrl.tabs = [];                                                                                                      // 13136
  ctrl.lastSelectedIndex = null;                                                                                       // 13137
  ctrl.focusIndex = $scope.selectedIndex || 0;                                                                         // 13138
  ctrl.offsetLeft = 0;                                                                                                 // 13139
  ctrl.hasContent = false;                                                                                             // 13140
  ctrl.hasFocus = false;                                                                                               // 13141
  ctrl.lastClick = true;                                                                                               // 13142
                                                                                                                       // 13143
  ctrl.redirectFocus = redirectFocus;                                                                                  // 13144
  ctrl.attachRipple = attachRipple;                                                                                    // 13145
  ctrl.shouldStretchTabs = shouldStretchTabs;                                                                          // 13146
  ctrl.shouldPaginate = shouldPaginate;                                                                                // 13147
  ctrl.shouldCenterTabs = shouldCenterTabs;                                                                            // 13148
  ctrl.insertTab = insertTab;                                                                                          // 13149
  ctrl.removeTab = removeTab;                                                                                          // 13150
  ctrl.select = select;                                                                                                // 13151
  ctrl.scroll = scroll;                                                                                                // 13152
  ctrl.nextPage = nextPage;                                                                                            // 13153
  ctrl.previousPage = previousPage;                                                                                    // 13154
  ctrl.keydown = keydown;                                                                                              // 13155
  ctrl.canPageForward = canPageForward;                                                                                // 13156
  ctrl.canPageBack = canPageBack;                                                                                      // 13157
  ctrl.refreshIndex = refreshIndex;                                                                                    // 13158
  ctrl.incrementSelectedIndex = incrementSelectedIndex;                                                                // 13159
  ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);                                                 // 13160
  ctrl.updateTabOrder = $mdUtil.debounce(updateTabOrder, 100);                                                         // 13161
                                                                                                                       // 13162
  init();                                                                                                              // 13163
                                                                                                                       // 13164
  function init () {                                                                                                   // 13165
    $scope.$watch('selectedIndex', handleSelectedIndexChange);                                                         // 13166
    $scope.$watch('$mdTabsCtrl.focusIndex', handleFocusIndexChange);                                                   // 13167
    $scope.$watch('$mdTabsCtrl.offsetLeft', handleOffsetChange);                                                       // 13168
    $scope.$watch('$mdTabsCtrl.hasContent', handleHasContent);                                                         // 13169
    angular.element($window).on('resize', handleWindowResize);                                                         // 13170
    angular.element(elements.paging).on('DOMSubtreeModified', ctrl.updateInkBarStyles);                                // 13171
    $timeout(updateHeightFromContent, 0, false);                                                                       // 13172
    $timeout(adjustOffset);                                                                                            // 13173
    $scope.$on('$destroy', cleanup);                                                                                   // 13174
  }                                                                                                                    // 13175
                                                                                                                       // 13176
  function cleanup () {                                                                                                // 13177
    angular.element($window).off('resize', handleWindowResize);                                                        // 13178
    angular.element(elements.paging).off('DOMSubtreeModified', ctrl.updateInkBarStyles);                               // 13179
  }                                                                                                                    // 13180
                                                                                                                       // 13181
  //-- Change handlers                                                                                                 // 13182
                                                                                                                       // 13183
  function handleHasContent (hasContent) {                                                                             // 13184
    $element[hasContent ? 'removeClass' : 'addClass']('md-no-tab-content');                                            // 13185
  }                                                                                                                    // 13186
                                                                                                                       // 13187
  function handleOffsetChange (left) {                                                                                 // 13188
    var newValue = shouldCenterTabs() ? '' : '-' + left + 'px';                                                        // 13189
    angular.element(elements.paging).css('transform', 'translate3d(' + newValue + ', 0, 0)');                          // 13190
    $scope.$broadcast('$mdTabsPaginationChanged');                                                                     // 13191
  }                                                                                                                    // 13192
                                                                                                                       // 13193
  function handleFocusIndexChange (newIndex, oldIndex) {                                                               // 13194
    if (newIndex === oldIndex) return;                                                                                 // 13195
    if (!elements.tabs[newIndex]) return;                                                                              // 13196
    adjustOffset();                                                                                                    // 13197
    redirectFocus();                                                                                                   // 13198
  }                                                                                                                    // 13199
                                                                                                                       // 13200
  function handleSelectedIndexChange (newValue, oldValue) {                                                            // 13201
    if (newValue === oldValue) return;                                                                                 // 13202
                                                                                                                       // 13203
    $scope.selectedIndex = getNearestSafeIndex(newValue);                                                              // 13204
    ctrl.lastSelectedIndex = oldValue;                                                                                 // 13205
    ctrl.updateInkBarStyles();                                                                                         // 13206
    updateHeightFromContent();                                                                                         // 13207
    $scope.$broadcast('$mdTabsChanged');                                                                               // 13208
    ctrl.tabs[oldValue] && ctrl.tabs[oldValue].scope.deselect();                                                       // 13209
    ctrl.tabs[newValue] && ctrl.tabs[newValue].scope.select();                                                         // 13210
  }                                                                                                                    // 13211
                                                                                                                       // 13212
  function handleResizeWhenVisible () {                                                                                // 13213
    //-- if there is already a watcher waiting for resize, do nothing                                                  // 13214
    if (handleResizeWhenVisible.watcher) return;                                                                       // 13215
    //-- otherwise, we will abuse the $watch function to check for visible                                             // 13216
    handleResizeWhenVisible.watcher = $scope.$watch(function () {                                                      // 13217
      //-- since we are checking for DOM size, we use $timeout to wait for after the DOM updates                       // 13218
      $timeout(function () {                                                                                           // 13219
        //-- if the watcher has already run (ie. multiple digests in one cycle), do nothing                            // 13220
        if (!handleResizeWhenVisible.watcher) return;                                                                  // 13221
                                                                                                                       // 13222
        if ($element.prop('offsetParent')) {                                                                           // 13223
          handleResizeWhenVisible.watcher();                                                                           // 13224
          handleResizeWhenVisible.watcher = null;                                                                      // 13225
                                                                                                                       // 13226
          //-- we have to trigger our own $apply so that the DOM bindings will update                                  // 13227
          handleWindowResize();                                                                                        // 13228
        }                                                                                                              // 13229
      }, 0, false);                                                                                                    // 13230
    });                                                                                                                // 13231
  }                                                                                                                    // 13232
                                                                                                                       // 13233
  //-- Event handlers / actions                                                                                        // 13234
                                                                                                                       // 13235
  function keydown (event) {                                                                                           // 13236
    switch (event.keyCode) {                                                                                           // 13237
      case $mdConstant.KEY_CODE.LEFT_ARROW:                                                                            // 13238
        event.preventDefault();                                                                                        // 13239
        incrementSelectedIndex(-1, true);                                                                              // 13240
        break;                                                                                                         // 13241
      case $mdConstant.KEY_CODE.RIGHT_ARROW:                                                                           // 13242
        event.preventDefault();                                                                                        // 13243
        incrementSelectedIndex(1, true);                                                                               // 13244
        break;                                                                                                         // 13245
      case $mdConstant.KEY_CODE.SPACE:                                                                                 // 13246
      case $mdConstant.KEY_CODE.ENTER:                                                                                 // 13247
        event.preventDefault();                                                                                        // 13248
        if (!locked) $scope.selectedIndex = ctrl.focusIndex;                                                           // 13249
        break;                                                                                                         // 13250
    }                                                                                                                  // 13251
    ctrl.lastClick = false;                                                                                            // 13252
  }                                                                                                                    // 13253
                                                                                                                       // 13254
  function select (index) {                                                                                            // 13255
    if (!locked) ctrl.focusIndex = $scope.selectedIndex = index;                                                       // 13256
    ctrl.lastClick = true;                                                                                             // 13257
    ctrl.tabs[index].element.triggerHandler('click');                                                                  // 13258
  }                                                                                                                    // 13259
                                                                                                                       // 13260
  function scroll (event) {                                                                                            // 13261
    if (!shouldPaginate()) return;                                                                                     // 13262
    event.preventDefault();                                                                                            // 13263
    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);                                                   // 13264
  }                                                                                                                    // 13265
                                                                                                                       // 13266
  function nextPage () {                                                                                               // 13267
    var viewportWidth = elements.canvas.clientWidth,                                                                   // 13268
        totalWidth = viewportWidth + ctrl.offsetLeft,                                                                  // 13269
        i, tab;                                                                                                        // 13270
    for (i = 0; i < elements.tabs.length; i++) {                                                                       // 13271
      tab = elements.tabs[i];                                                                                          // 13272
      if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;                                                        // 13273
    }                                                                                                                  // 13274
    ctrl.offsetLeft = fixOffset(tab.offsetLeft);                                                                       // 13275
  }                                                                                                                    // 13276
                                                                                                                       // 13277
  function previousPage () {                                                                                           // 13278
    var i, tab;                                                                                                        // 13279
    for (i = 0; i < elements.tabs.length; i++) {                                                                       // 13280
      tab = elements.tabs[i];                                                                                          // 13281
      if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;                                                  // 13282
    }                                                                                                                  // 13283
    ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);                       // 13284
  }                                                                                                                    // 13285
                                                                                                                       // 13286
  function handleWindowResize () {                                                                                     // 13287
    $scope.$apply(function () {                                                                                        // 13288
      ctrl.lastSelectedIndex = $scope.selectedIndex;                                                                   // 13289
      ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);                                                                    // 13290
      $timeout(ctrl.updateInkBarStyles, 0, false);                                                                     // 13291
    });                                                                                                                // 13292
  }                                                                                                                    // 13293
                                                                                                                       // 13294
  function removeTab (tabData) {                                                                                       // 13295
    var selectedIndex = $scope.selectedIndex,                                                                          // 13296
        tab = ctrl.tabs.splice(tabData.getIndex(), 1)[0];                                                              // 13297
    refreshIndex();                                                                                                    // 13298
    //-- when removing a tab, if the selected index did not change, we have to manually trigger the                    // 13299
    //   tab select/deselect events                                                                                    // 13300
    if ($scope.selectedIndex === selectedIndex) {                                                                      // 13301
      tab.scope.deselect();                                                                                            // 13302
      ctrl.tabs[$scope.selectedIndex] && ctrl.tabs[$scope.selectedIndex].scope.select();                               // 13303
    }                                                                                                                  // 13304
    $timeout(function () {                                                                                             // 13305
      ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);                                                                    // 13306
    });                                                                                                                // 13307
  }                                                                                                                    // 13308
                                                                                                                       // 13309
  function insertTab (tabData, index) {                                                                                // 13310
    var proto = {                                                                                                      // 13311
          getIndex: function () { return ctrl.tabs.indexOf(tab); },                                                    // 13312
          isActive: function () { return this.getIndex() === $scope.selectedIndex; },                                  // 13313
          isLeft:   function () { return this.getIndex() < $scope.selectedIndex; },                                    // 13314
          isRight:  function () { return this.getIndex() > $scope.selectedIndex; },                                    // 13315
          hasFocus: function () { return !ctrl.lastClick && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex; },   // 13316
          id:       $mdUtil.nextUid()                                                                                  // 13317
        },                                                                                                             // 13318
        tab = angular.extend(proto, tabData);                                                                          // 13319
    if (angular.isDefined(index)) {                                                                                    // 13320
      ctrl.tabs.splice(index, 0, tab);                                                                                 // 13321
    } else {                                                                                                           // 13322
      ctrl.tabs.push(tab);                                                                                             // 13323
    }                                                                                                                  // 13324
    processQueue();                                                                                                    // 13325
    updateHasContent();                                                                                                // 13326
    return tab;                                                                                                        // 13327
  }                                                                                                                    // 13328
                                                                                                                       // 13329
  //-- Getter methods                                                                                                  // 13330
                                                                                                                       // 13331
  function getElements () {                                                                                            // 13332
    var elements      = {};                                                                                            // 13333
                                                                                                                       // 13334
    //-- gather tab bar elements                                                                                       // 13335
    elements.wrapper  = $element[0].getElementsByTagName('md-tabs-wrapper')[0];                                        // 13336
    elements.canvas   = elements.wrapper.getElementsByTagName('md-tabs-canvas')[0];                                    // 13337
    elements.paging   = elements.canvas.getElementsByTagName('md-pagination-wrapper')[0];                              // 13338
    elements.tabs     = elements.paging.getElementsByTagName('md-tab-item');                                           // 13339
    elements.dummies  = elements.canvas.getElementsByTagName('md-dummy-tab');                                          // 13340
    elements.inkBar   = elements.paging.getElementsByTagName('md-ink-bar')[0];                                         // 13341
                                                                                                                       // 13342
    //-- gather tab content elements                                                                                   // 13343
    elements.contentsWrapper = $element[0].getElementsByTagName('md-tabs-content-wrapper')[0];                         // 13344
    elements.contents = elements.contentsWrapper.getElementsByTagName('md-tab-content');                               // 13345
                                                                                                                       // 13346
    return elements;                                                                                                   // 13347
  }                                                                                                                    // 13348
                                                                                                                       // 13349
  function canPageBack () {                                                                                            // 13350
    return ctrl.offsetLeft > 0;                                                                                        // 13351
  }                                                                                                                    // 13352
                                                                                                                       // 13353
  function canPageForward () {                                                                                         // 13354
    var lastTab = elements.tabs[elements.tabs.length - 1];                                                             // 13355
    return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth + ctrl.offsetLeft;        // 13356
  }                                                                                                                    // 13357
                                                                                                                       // 13358
  function shouldStretchTabs () {                                                                                      // 13359
    switch ($scope.stretchTabs) {                                                                                      // 13360
      case 'always': return true;                                                                                      // 13361
      case 'never':  return false;                                                                                     // 13362
      default:       return !shouldPaginate() && $window.matchMedia('(max-width: 600px)').matches;                     // 13363
    }                                                                                                                  // 13364
  }                                                                                                                    // 13365
                                                                                                                       // 13366
  function shouldCenterTabs () {                                                                                       // 13367
    return $scope.centerTabs && !shouldPaginate();                                                                     // 13368
  }                                                                                                                    // 13369
                                                                                                                       // 13370
  function shouldPaginate () {                                                                                         // 13371
    if ($scope.noPagination) return false;                                                                             // 13372
    var canvasWidth = $element.prop('clientWidth');                                                                    // 13373
    angular.forEach(elements.tabs, function (tab) { canvasWidth -= tab.offsetWidth; });                                // 13374
    return canvasWidth < 0;                                                                                            // 13375
  }                                                                                                                    // 13376
                                                                                                                       // 13377
  function getNearestSafeIndex(newIndex) {                                                                             // 13378
    var maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex),                                                   // 13379
        i, tab;                                                                                                        // 13380
    for (i = 0; i <= maxOffset; i++) {                                                                                 // 13381
      tab = ctrl.tabs[newIndex + i];                                                                                   // 13382
      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();                                                 // 13383
      tab = ctrl.tabs[newIndex - i];                                                                                   // 13384
      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();                                                 // 13385
    }                                                                                                                  // 13386
    return newIndex;                                                                                                   // 13387
  }                                                                                                                    // 13388
                                                                                                                       // 13389
  //-- Utility methods                                                                                                 // 13390
                                                                                                                       // 13391
  function updateTabOrder () {                                                                                         // 13392
    var selectedItem = ctrl.tabs[$scope.selectedIndex],                                                                // 13393
        focusItem = ctrl.tabs[ctrl.focusIndex];                                                                        // 13394
    ctrl.tabs = ctrl.tabs.sort(function (a, b) {                                                                       // 13395
      return a.index - b.index;                                                                                        // 13396
    });                                                                                                                // 13397
    $scope.selectedIndex = ctrl.tabs.indexOf(selectedItem);                                                            // 13398
    ctrl.focusIndex = ctrl.tabs.indexOf(focusItem);                                                                    // 13399
  }                                                                                                                    // 13400
                                                                                                                       // 13401
  function incrementSelectedIndex (inc, focus) {                                                                       // 13402
    var newIndex,                                                                                                      // 13403
        index = focus ? ctrl.focusIndex : $scope.selectedIndex;                                                        // 13404
    for (newIndex = index + inc;                                                                                       // 13405
         ctrl.tabs[newIndex] && ctrl.tabs[newIndex].scope.disabled;                                                    // 13406
         newIndex += inc) {}                                                                                           // 13407
    if (ctrl.tabs[newIndex]) {                                                                                         // 13408
      if (focus) ctrl.focusIndex = newIndex;                                                                           // 13409
      else $scope.selectedIndex = newIndex;                                                                            // 13410
    }                                                                                                                  // 13411
  }                                                                                                                    // 13412
                                                                                                                       // 13413
  function redirectFocus () {                                                                                          // 13414
    elements.dummies[ctrl.focusIndex].focus();                                                                         // 13415
  }                                                                                                                    // 13416
                                                                                                                       // 13417
  function adjustOffset () {                                                                                           // 13418
    if (shouldCenterTabs()) return;                                                                                    // 13419
    var tab = elements.tabs[ctrl.focusIndex],                                                                          // 13420
        left = tab.offsetLeft,                                                                                         // 13421
        right = tab.offsetWidth + left;                                                                                // 13422
    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth));                       // 13423
    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));                                                      // 13424
  }                                                                                                                    // 13425
                                                                                                                       // 13426
  function processQueue () {                                                                                           // 13427
    queue.forEach(function (func) { $timeout(func); });                                                                // 13428
    queue = [];                                                                                                        // 13429
  }                                                                                                                    // 13430
                                                                                                                       // 13431
  function updateHasContent () {                                                                                       // 13432
    var hasContent = false;                                                                                            // 13433
    angular.forEach(ctrl.tabs, function (tab) {                                                                        // 13434
      if (tab.template) hasContent = true;                                                                             // 13435
    });                                                                                                                // 13436
    ctrl.hasContent = hasContent;                                                                                      // 13437
  }                                                                                                                    // 13438
                                                                                                                       // 13439
  function refreshIndex () {                                                                                           // 13440
    $scope.selectedIndex = getNearestSafeIndex($scope.selectedIndex);                                                  // 13441
    ctrl.focusIndex = getNearestSafeIndex(ctrl.focusIndex);                                                            // 13442
  }                                                                                                                    // 13443
                                                                                                                       // 13444
  function updateHeightFromContent () {                                                                                // 13445
    if (!$scope.dynamicHeight) return $element.css('height', '');                                                      // 13446
    if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);                                                 // 13447
    var tabContent    = elements.contents[$scope.selectedIndex],                                                       // 13448
        contentHeight = tabContent ? tabContent.offsetHeight : 0,                                                      // 13449
        tabsHeight    = elements.wrapper.offsetHeight,                                                                 // 13450
        newHeight     = contentHeight + tabsHeight,                                                                    // 13451
        currentHeight = $element.prop('clientHeight');                                                                 // 13452
    if (currentHeight === newHeight) return;                                                                           // 13453
    locked = true;                                                                                                     // 13454
    $animate                                                                                                           // 13455
        .animate(                                                                                                      // 13456
          $element,                                                                                                    // 13457
          { height: currentHeight + 'px' },                                                                            // 13458
          { height: newHeight + 'px'}                                                                                  // 13459
        )                                                                                                              // 13460
        .then(function () {                                                                                            // 13461
          $element.css('height', '');                                                                                  // 13462
          locked = false;                                                                                              // 13463
        });                                                                                                            // 13464
  }                                                                                                                    // 13465
                                                                                                                       // 13466
  function updateInkBarStyles () {                                                                                     // 13467
    if (!elements.tabs[$scope.selectedIndex]) return;                                                                  // 13468
    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);                                                 // 13469
    //-- if the element is not visible, we will not be able to calculate sizes until it is                             // 13470
    //-- we should treat that as a resize event rather than just updating the ink bar                                  // 13471
    if (!$element.prop('offsetParent')) return handleResizeWhenVisible();                                              // 13472
    var index = $scope.selectedIndex,                                                                                  // 13473
        totalWidth = elements.paging.offsetWidth,                                                                      // 13474
        tab = elements.tabs[index],                                                                                    // 13475
        left = tab.offsetLeft,                                                                                         // 13476
        right = totalWidth - left - tab.offsetWidth;                                                                   // 13477
    updateInkBarClassName();                                                                                           // 13478
    angular.element(elements.inkBar).css({ left: left + 'px', right: right + 'px' });                                  // 13479
  }                                                                                                                    // 13480
                                                                                                                       // 13481
  function updateInkBarClassName () {                                                                                  // 13482
    var newIndex = $scope.selectedIndex,                                                                               // 13483
        oldIndex = ctrl.lastSelectedIndex,                                                                             // 13484
        ink = angular.element(elements.inkBar);                                                                        // 13485
    ink.removeClass('md-left md-right');                                                                               // 13486
    if (!angular.isNumber(oldIndex)) return;                                                                           // 13487
    if (newIndex < oldIndex) {                                                                                         // 13488
      ink.addClass('md-left');                                                                                         // 13489
    } else if (newIndex > oldIndex) {                                                                                  // 13490
      ink.addClass('md-right');                                                                                        // 13491
    }                                                                                                                  // 13492
  }                                                                                                                    // 13493
                                                                                                                       // 13494
  function fixOffset (value) {                                                                                         // 13495
    if (!elements.tabs.length || !shouldPaginate()) return 0;                                                          // 13496
    var lastTab = elements.tabs[elements.tabs.length - 1],                                                             // 13497
        totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;                                                         // 13498
    value = Math.max(0, value);                                                                                        // 13499
    value = Math.min(totalWidth - elements.canvas.clientWidth, value);                                                 // 13500
    return value;                                                                                                      // 13501
  }                                                                                                                    // 13502
                                                                                                                       // 13503
  function attachRipple (scope, element) {                                                                             // 13504
    var options = { colorElement: angular.element(elements.inkBar) };                                                  // 13505
    $mdTabInkRipple.attach(scope, element, options);                                                                   // 13506
  }                                                                                                                    // 13507
}                                                                                                                      // 13508
MdTabsController.$inject = ["$scope", "$element", "$window", "$timeout", "$mdConstant", "$mdTabInkRipple", "$mdUtil", "$animate"];
                                                                                                                       // 13510
})();                                                                                                                  // 13511
(function(){                                                                                                           // 13512
"use strict";                                                                                                          // 13513
                                                                                                                       // 13514
/**                                                                                                                    // 13515
 * @ngdoc directive                                                                                                    // 13516
 * @name mdTabs                                                                                                        // 13517
 * @module material.components.tabs                                                                                    // 13518
 *                                                                                                                     // 13519
 * @restrict E                                                                                                         // 13520
 *                                                                                                                     // 13521
 * @description                                                                                                        // 13522
 * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.
 * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view
 * content that will be associated with each tab button.                                                               // 13525
 *                                                                                                                     // 13526
 * Below is the markup for its simplest usage:                                                                         // 13527
 *                                                                                                                     // 13528
 *  <hljs lang="html">                                                                                                 // 13529
 *  <md-tabs>                                                                                                          // 13530
 *    <md-tab label="Tab #1"></md-tab>                                                                                 // 13531
 *    <md-tab label="Tab #2"></md-tab>                                                                                 // 13532
 *    <md-tab label="Tab #3"></md-tab>                                                                                 // 13533
 *  </md-tabs>                                                                                                         // 13534
 *  </hljs>                                                                                                            // 13535
 *                                                                                                                     // 13536
 * Tabs supports three (3) usage scenarios:                                                                            // 13537
 *                                                                                                                     // 13538
 *  1. Tabs (buttons only)                                                                                             // 13539
 *  2. Tabs with internal view content                                                                                 // 13540
 *  3. Tabs with external view content                                                                                 // 13541
 *                                                                                                                     // 13542
 * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.
 * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.
 * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.
 *                                                                                                                     // 13546
 * Additional features also include:                                                                                   // 13547
 *                                                                                                                     // 13548
 * *  Content can include any markup.                                                                                  // 13549
 * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.                             // 13550
 *                                                                                                                     // 13551
 * ### Explanation of tab stretching                                                                                   // 13552
 *                                                                                                                     // 13553
 * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.
 *                                                                                                                     // 13555
 * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.
 *                                                                                                                     // 13557
 * On desktops, by default, stretching will never occur.                                                               // 13558
 *                                                                                                                     // 13559
 * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:
 *                                                                                                                     // 13561
 * `md-stretch-tabs` | mobile    | desktop                                                                             // 13562
 * ------------------|-----------|--------                                                                             // 13563
 * `auto`            | stretched | ---                                                                                 // 13564
 * `always`          | stretched | stretched                                                                           // 13565
 * `never`           | ---       | ---                                                                                 // 13566
 *                                                                                                                     // 13567
 * @param {integer=} md-selected Index of the active/selected tab                                                      // 13568
 * @param {boolean=} md-no-ink If present, disables ink ripple effects.                                                // 13569
 * @param {boolean=} md-no-bar If present, disables the selection ink bar.                                             // 13570
 * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`  // 13571
 * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`
 * @param {boolean=} md-dynamic-height When enabled, the tab wrapper will resize based on the contents of the selected tab
 * @param {boolean=} md-center-tabs When enabled, tabs will be centered provided there is no need for pagination       // 13574
 * @param {boolean=} md-no-pagination When enabled, pagination will remain off                                         // 13575
 *                                                                                                                     // 13576
 * @usage                                                                                                              // 13577
 * <hljs lang="html">                                                                                                  // 13578
 * <md-tabs md-selected="selectedIndex" >                                                                              // 13579
 *   <img ng-src="img/angular.png" class="centered">                                                                   // 13580
 *   <md-tab                                                                                                           // 13581
 *       ng-repeat="tab in tabs | orderBy:predicate:reversed"                                                          // 13582
 *       md-on-select="onTabSelected(tab)"                                                                             // 13583
 *       md-on-deselect="announceDeselected(tab)"                                                                      // 13584
 *       ng-disabled="tab.disabled">                                                                                   // 13585
 *     <md-tab-label>                                                                                                  // 13586
 *       {{tab.title}}                                                                                                 // 13587
 *       <img src="img/removeTab.png" ng-click="removeTab(tab)" class="delete">                                        // 13588
 *     </md-tab-label>                                                                                                 // 13589
 *     <md-tab-body>                                                                                                   // 13590
 *       {{tab.content}}                                                                                               // 13591
 *     </md-tab-body>                                                                                                  // 13592
 *   </md-tab>                                                                                                         // 13593
 * </md-tabs>                                                                                                          // 13594
 * </hljs>                                                                                                             // 13595
 *                                                                                                                     // 13596
 */                                                                                                                    // 13597
angular                                                                                                                // 13598
    .module('material.components.tabs')                                                                                // 13599
    .directive('mdTabs', MdTabs);                                                                                      // 13600
                                                                                                                       // 13601
function MdTabs ($mdTheming, $mdUtil, $compile) {                                                                      // 13602
  return {                                                                                                             // 13603
    scope: {                                                                                                           // 13604
      noPagination:  '=?mdNoPagination',                                                                               // 13605
      dynamicHeight: '=?mdDynamicHeight',                                                                              // 13606
      centerTabs:    '=?mdCenterTabs',                                                                                 // 13607
      selectedIndex: '=?mdSelected',                                                                                   // 13608
      stretchTabs:   '@?mdStretchTabs'                                                                                 // 13609
    },                                                                                                                 // 13610
    template: function (element, attr) {                                                                               // 13611
      attr["$mdTabsTemplate"] = element.html();                                                                        // 13612
      return '\
        <md-tabs-wrapper ng-class="{ \'md-stretch-tabs\': $mdTabsCtrl.shouldStretchTabs() }">\
          <md-tab-data></md-tab-data>\
          <md-prev-button\
              tabindex="-1"\
              role="button"\
              aria-label="Previous Page"\
              aria-disabled="{{!$mdTabsCtrl.canPageBack()}}"\
              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }"\
              ng-if="$mdTabsCtrl.shouldPaginate()"\
              ng-click="$mdTabsCtrl.previousPage()">\
            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>\
          </md-prev-button>\
          <md-next-button\
              tabindex="-1"\
              role="button"\
              aria-label="Next Page"\
              aria-disabled="{{!$mdTabsCtrl.canPageForward()}}"\
              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }"\
              ng-if="$mdTabsCtrl.shouldPaginate()"\
              ng-click="$mdTabsCtrl.nextPage()">\
            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>\
          </md-next-button>\
          <md-tabs-canvas\
              tabindex="0"\
              aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}"\
              ng-focus="$mdTabsCtrl.redirectFocus()"\
              ng-class="{\
                  \'md-paginated\': $mdTabsCtrl.shouldPaginate(),\
                  \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs()\
              }"\
              ng-keydown="$mdTabsCtrl.keydown($event)"\
              role="tablist">\
            <md-pagination-wrapper\
                ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs() }"\
                md-tab-scroll="$mdTabsCtrl.scroll($event)">\
              <md-tab-item\
                  tabindex="-1"\
                  class="md-tab"\
                  style="max-width: {{ tabWidth ? tabWidth + \'px\' : \'none\' }}"\
                  ng-repeat="tab in $mdTabsCtrl.tabs"\
                  role="tab"\
                  aria-controls="tab-content-{{tab.id}}"\
                  aria-selected="{{tab.isActive()}}"\
                  aria-disabled="{{tab.scope.disabled || \'false\'}}"\
                  ng-click="$mdTabsCtrl.select(tab.getIndex())"\
                  ng-class="{\
                      \'md-active\':    tab.isActive(),\
                      \'md-focused\':   tab.hasFocus(),\
                      \'md-disabled\':  tab.scope.disabled\
                  }"\
                  ng-disabled="tab.scope.disabled"\
                  md-swipe-left="$mdTabsCtrl.nextPage()"\
                  md-swipe-right="$mdTabsCtrl.previousPage()"\
                  md-template="tab.label"\
                  md-scope="tab.parent"></md-tab-item>\
              <md-ink-bar ng-hide="noInkBar"></md-ink-bar>\
            </md-pagination-wrapper>\
            <div class="md-visually-hidden md-dummy-wrapper">\
              <md-dummy-tab\
                  tabindex="-1"\
                  id="tab-item-{{tab.id}}"\
                  role="tab"\
                  aria-controls="tab-content-{{tab.id}}"\
                  aria-selected="{{tab.isActive()}}"\
                  aria-disabled="{{tab.scope.disabled || \'false\'}}"\
                  ng-focus="$mdTabsCtrl.hasFocus = true"\
                  ng-blur="$mdTabsCtrl.hasFocus = false"\
                  ng-repeat="tab in $mdTabsCtrl.tabs"\
                  md-template="tab.label"\
                  md-scope="tab.parent"></md-dummy-tab>\
            </div>\
          </md-tabs-canvas>\
        </md-tabs-wrapper>\
        <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent">\
          <md-tab-content\
              id="tab-content-{{tab.id}}"\
              role="tabpanel"\
              aria-labelledby="tab-item-{{tab.id}}"\
              md-swipe-left="$mdTabsCtrl.incrementSelectedIndex(1)"\
              md-swipe-right="$mdTabsCtrl.incrementSelectedIndex(-1)"\
              ng-if="$mdTabsCtrl.hasContent"\
              ng-repeat="(index, tab) in $mdTabsCtrl.tabs" \
              md-template="tab.template"\
              md-scope="tab.parent"\
              md-connected-if="tab.isActive()"\
              ng-class="{\
                \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null,\
                \'md-active\':        tab.isActive(),\
                \'md-left\':          tab.isLeft(),\
                \'md-right\':         tab.isRight(),\
                \'md-no-scroll\':     dynamicHeight\
              }"></md-tab-content>\
        </md-tabs-content-wrapper>\
      ';                                                                                                               // 13707
    },                                                                                                                 // 13708
    controller: 'MdTabsController',                                                                                    // 13709
    controllerAs: '$mdTabsCtrl',                                                                                       // 13710
    link: function (scope, element, attr) {                                                                            // 13711
      compileTabData(attr.$mdTabsTemplate);                                                                            // 13712
      delete attr.$mdTabsTemplate;                                                                                     // 13713
                                                                                                                       // 13714
      $mdUtil.initOptionalProperties(scope, attr);                                                                     // 13715
                                                                                                                       // 13716
      //-- watch attributes                                                                                            // 13717
      attr.$observe('mdNoBar', function (value) { scope.noInkBar = angular.isDefined(value); });                       // 13718
      //-- set default value for selectedIndex                                                                         // 13719
      scope.selectedIndex = angular.isNumber(scope.selectedIndex) ? scope.selectedIndex : 0;                           // 13720
      //-- apply themes                                                                                                // 13721
      $mdTheming(element);                                                                                             // 13722
                                                                                                                       // 13723
      function compileTabData (template) {                                                                             // 13724
        var dataElement = element.find('md-tab-data');                                                                 // 13725
        dataElement.html(template);                                                                                    // 13726
        $compile(dataElement.contents())(scope.$parent);                                                               // 13727
      }                                                                                                                // 13728
    }                                                                                                                  // 13729
  };                                                                                                                   // 13730
}                                                                                                                      // 13731
MdTabs.$inject = ["$mdTheming", "$mdUtil", "$compile"];                                                                // 13732
                                                                                                                       // 13733
})();                                                                                                                  // 13734
(function(){                                                                                                           // 13735
"use strict";                                                                                                          // 13736
                                                                                                                       // 13737
angular                                                                                                                // 13738
    .module('material.components.tabs')                                                                                // 13739
    .directive('mdTemplate', MdTemplate);                                                                              // 13740
                                                                                                                       // 13741
function MdTemplate ($compile, $mdUtil, $timeout) {                                                                    // 13742
  return {                                                                                                             // 13743
    restrict: 'A',                                                                                                     // 13744
    link: link,                                                                                                        // 13745
    scope: {                                                                                                           // 13746
      template: '=mdTemplate',                                                                                         // 13747
      compileScope: '=mdScope',                                                                                        // 13748
      connected: '=?mdConnectedIf'                                                                                     // 13749
    },                                                                                                                 // 13750
    require: '^?mdTabs'                                                                                                // 13751
  };                                                                                                                   // 13752
  function link (scope, element, attr, ctrl) {                                                                         // 13753
    if (!ctrl) return;                                                                                                 // 13754
    var compileScope = scope.compileScope.$new();                                                                      // 13755
    element.html(scope.template);                                                                                      // 13756
    $compile(element.contents())(compileScope);                                                                        // 13757
    return $timeout(handleScope);                                                                                      // 13758
    function handleScope () {                                                                                          // 13759
      scope.$watch('connected', function (value) { value === false ? disconnect() : reconnect(); });                   // 13760
      scope.$on('$destroy', reconnect);                                                                                // 13761
    }                                                                                                                  // 13762
    function disconnect () {                                                                                           // 13763
      $mdUtil.disconnectScope(compileScope);                                                                           // 13764
    }                                                                                                                  // 13765
    function reconnect () {                                                                                            // 13766
      $mdUtil.reconnectScope(compileScope);                                                                            // 13767
    }                                                                                                                  // 13768
  }                                                                                                                    // 13769
}                                                                                                                      // 13770
MdTemplate.$inject = ["$compile", "$mdUtil", "$timeout"];                                                              // 13771
                                                                                                                       // 13772
})();                                                                                                                  // 13773
(function(){                                                                                                           // 13774
angular.module("material.core").constant("$MD_THEME_CSS", "/* mixin definition ; sets LTR and RTL within the same style call */md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop.md-opaque.md-THEME_NAME-theme {  background-color: '{{foreground-4-0.5}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme, .md-button.md-THEME_NAME-theme {  border-radius: 3px; }  a.md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):hover {    background-color: '{{background-500-0.2}}'; }  a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme:not([disabled]).md-focused {    background-color: '{{background-500-0.2}}'; }  a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover, .md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {    background-color: transparent; }  a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab md-icon, .md-button.md-THEME_NAME-theme.md-fab md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {      background-color: '{{accent-A700}}'; }  a.md-button.md-THEME_NAME-theme.md-icon-button, .md-button.md-THEME_NAME-theme.md-icon-button {    border-radius: 50%; }  a.md-button.md-THEME_NAME-theme.md-primary, .md-button.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab, .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {      color: '{{primary-contrast}}';      background-color: '{{primary-color}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {        color: '{{primary-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {        background-color: '{{primary-color}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {        background-color: '{{primary-600}}'; }    a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {      color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {      background-color: '{{accent-A700}}'; }  a.md-button.md-THEME_NAME-theme.md-raised, .md-button.md-THEME_NAME-theme.md-raised {    color: '{{background-contrast}}';    background-color: '{{background-50}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {      color: '{{background-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {      background-color: '{{background-50}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {      background-color: '{{background-200}}'; }  a.md-button.md-THEME_NAME-theme.md-warn, .md-button.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab, .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {      color: '{{warn-contrast}}';      background-color: '{{warn-color}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {        color: '{{warn-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {        background-color: '{{warn-color}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {        background-color: '{{warn-700}}'; }    a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {      color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent, .md-button.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab, .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {      color: '{{accent-contrast}}';      background-color: '{{accent-color}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {        color: '{{accent-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {        background-color: '{{accent-color}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {        background-color: '{{accent-700}}'; }    a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {      color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled], .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-accent[disabled], .md-button.md-THEME_NAME-theme.md-warn[disabled] {    color: '{{foreground-3}}';    cursor: not-allowed; }    a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon, .md-button.md-THEME_NAME-theme[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {      color: '{{foreground-3}}'; }  a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {    background-color: '{{foreground-4}}'; }  a.md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme[disabled] {    background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages, md-input-container.md-THEME_NAME-theme [ng-message], md-input-container.md-THEME_NAME-theme [data-ng-message], md-input-container.md-THEME_NAME-theme [x-ng-message] {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], [disabled] md-input-container.md-THEME_NAME-theme .md-input {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-list.md-THEME_NAME-theme md-list-item button {  background-color: '{{background-color}}'; }  md-list.md-THEME_NAME-theme md-list-item button.md-button:not([disabled]):hover {    background-color: '{{background-color}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled], md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked:not([disabled]).md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-label {  color: '{{warn-500}}' !important;  border-bottom-color: '{{warn-500}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-label {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-label.md-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-label {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-label {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-label {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-label.md-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme .md-select-label {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-label.md-placeholder {    color: '{{foreground-2}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  border-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-toast.md-THEME_NAME-theme {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled] {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-tabs-wrapper {  background-color: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]) {  color: '{{accent-100}}'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-focused {    color: '{{accent-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-focused {    background: '{{accent-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-ink-bar {  color: '{{primary-600-1}}';  background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary md-tabs-wrapper {  background-color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]) {  color: '{{primary-100}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-focused {    color: '{{primary-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-focused {    background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn md-tabs-wrapper {  background-color: '{{warn-color}}'; }md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]) {  color: '{{warn-100}}'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-focused {    color: '{{warn-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-focused {    background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{primary-color}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{primary-100}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{primary-contrast}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{accent-color}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{accent-100}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{accent-contrast}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{accent-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{primary-600-1}}';  background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{warn-color}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{warn-100}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{warn-contrast}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{warn-contrast-0.1}}'; }md-toolbar.md-THEME_NAME-theme {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }"); 
})();                                                                                                                  // 13776
                                                                                                                       // 13777
                                                                                                                       // 13778
})(window, window.angular);                                                                                            // 13779
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angular:angular-material'] = {};

})();
